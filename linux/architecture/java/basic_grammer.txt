
！！
编译阶段：
 java源文件*.java通过编译生成字节码文件*class
 一个源文件可编译生成多个字节码文件(每个class文件是一个类)
 编译器工具：javac *.java
 
运行阶段：
 app.class 通过java虚拟机的 类加载子系统classloader 加载到内存，有特定的内存/数据结构。
		   通过java虚拟机的执行引擎读取程序计数器进行代码(将代码解释成二进制数据给操作系统执行与底层硬件交互)有序执行   
 运行命令：java 类名 (启动jvm并通过classloader将硬盘上的字节码文件加载到jvm上并执行该类中的主方法入口，进行解释成二进制数据)
		   classpath：字节码文件查找路径

class文件运行在jvm上 
jdk：java开发环境
jre：java运行时环境
jvm：包含在jre上的
java虚拟机jvm通过jdk安装可得，jvm屏蔽了低层操作系统的差异

注释：
	单行注释：//
	多行注释：/* */
	javadoc注释：
		/**
		* javadoc注释
		*/

实例：
//定义一个公开的类名,这个类名和文件名一致,可以没有，有则只能有一个
public class  Helloworld{
/*
类体
static				静态的
void				空
main				方法名
(String[] args)		main方法的参数列表
*/
	public static void main(String[] args){   //主方法，程序执行入口，每个类都可以定义
		//方法体：自上而下顺序执行，以;终止，字符串用""引起来
		//向终端输出一段消息hello world!
		System.out.println("hello world!");
	}
}
//可以有多个class，编译时每个class会对应生成一个以类名为文件名的class文件
//如果执行改类，则需要有主方法入口
class A
{
}

标识符：自定义命名的
命名规则：字母数字下划线和美元符号，区分大小写，不能数字开头和使用关键字
规范：
	类名，接口名：首字母大写，单词首字母大写
	变量名，方法名：首字母小写，单词首字母大写
	常量名：全大写

关键字：全小写
	
字面值：数据，变量的一部分，类似常量(true , 10 , 3.14) 整数型/浮点型/字符串字面值

！！
变量是内存中一块空间：包含名称，数据类型和字面值(数据)，是内存中存储数据的最基本的单元
	需先声明再赋值(初始化)才会真正开辟内存空间，进而访问
声明：同一作用域中，相同变量名只能声明一次(声明代表开辟空间)
	数据类型 变量名... ;
赋值：赋值后才能访问
	变量名=字面值(=是运算符，先运算右边得出的值赋值给变量);

变量作用域：变量有效范围，即在{范围内}
	分类：局部变量(方法体总)  成员变量(类体之内)

！！
数据类型:不同数据类型占用空间大小不同
	作用：指导jvm在运行程序时开辟多大的内存空间
基本数据类型：（不同的变量会分配不同的存储空间，并且存储空间中存储的是该变量的值。赋值操作传递的是变量的值）
	四大类八小种：
	整数类型:
		byte : 占用1个字节 （第一位是符号位，范围为-128~127）
		short: 占用2个字节
		int	 : 占用4个字节
		long : 占用8个字节
	小数类型(浮点类型)
		float: 占用4个字节
		double: 占用8个字节
	字符类型:
		char: 占用2个字节''  (需要借助字符对照表进行加密解密,不然会产生乱码)
	布尔类型:
		boolean: 占用1个字节
引用数据类型：（一个数组引用赋值给另外一个数组引用后，这两个引用指向同一个数组，也就是指向同一块内存空间。）
	字符串""
	类（class）
	接口（interface）
	数组（array）
	
1字节Bytes=8比特bit
字符编码：人为干预，定义了一种文字与二进制之间对照关系。










