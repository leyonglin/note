

linux终端
Ctrl+
	s锁定终端  q解锁终端  
	
	w删除当前单词前面部分 k删除当前字符后面所有  u:删除当前字符前面所有  y:粘贴上次的删除
	h:删除光标前一个字符，同backspace键相同  d：删除当前字符
	esc+d删除当前单词后面部分，和c+w相反
	
	e光标移动命令最后面 a光标移动到命令最前面 
	xx:当前与行首之间跳转
	←向左跳一个单词  →向右跳一个单词
	b:光标左移一个字母  f后移一个字符   p:↑  n:↓     m/j好像是enter  
	t当前字母与前一个字母位置互换
	
	r搜索历史命令(C+r可以往上翻)  g:从历史搜索模式（Ctrl – r）退出。
	
	c退出进程 z任务中止 d：删除当前字符exit或logout  fg命令重新启动前台被中断的任务 bg命令把被中断的任务放在后台执行.
	
	l:清屏，相当于clear。
	v：可以在当前插入特殊字符，例如tab
	
	o ：执行当前命令，并选择上一条命令。
	i


####################################################################################################


bash(命令行)
	!! ：执行上一条命令。!wget ：执行最近的以wget开头的命令。!wget:p ：仅打印最近的以wget开头的命令，不执行。
	!^ : 使用上条命令的第一个参数  !$ ：上一条命令的最后一个参数  !* : 使用上条命令的所有参数  !*:p ：打印上一条命令是所有参数，也即 !*的内容。
	![命令名]:[参数号] : 使用上条命令指定的参数     !:- : 去掉最后一个参数执行上一个命令
	!-2   #感叹号后面跟着一个负数，负几代表倒数第几条history   !cmd / !num : 执行history命令
	!!:gs/old/new：将这条命令中的old更换为new    ls !(*.cfg)：删除除了cfg结尾以外的所有文件
	^abc ：删除上一条命令中的第一个abc。    ^foo^bar ：把上一条命令里的foo替换为bar，并执行


####################################################################################################


  
打开文件：vim --help
  vim File      打开或新建文件，并将光标置于第一行首
  vim +N File     打开文件，并将光标置于第N行首
  vim + File      打开文件，并将光标置于最后一行首
  vim +/Pattern File  打开文件，并将光标置于第一个与"Pattern"匹配的字符串处
  vim -r File     在上次正用vim编辑时发生系统崩溃，恢复"File"
  vim -b File     二进制方式打开文件
  vim -d File1 File2…比较多个文件(如果有不同的话会做出标注)
  vim -m File     只读打开文件，只能查看文件不能修改
  vim -o/O File   多文件在同一窗口显示，按Ctrl+w松开，在按上下左右箭头切换窗口
				  Ctrl+w, s (水平分割屏幕)
				  Ctrl+w, v (垂直分割屏幕)
                  :split filename    水平分割一个窗口
				  :vs    filename    垂直分屏
  vim File1 File2…  打开多个文件，依次编辑
      打开多文件时文件间跳转
      :n或:next  					编辑下一个文件
      :N或:prev  					编辑上一个文件
      :first     					编辑第一个文件
      :last     					编辑最后一个文件
      :files    					查看当前打开的所有文件信息
      :qall     					退出所有打开的文件
      :wqall    					保存退出所有打开的文件
      :saveas/sav /Path/To/File 	复制为另一个文件并进入编辑模式

模式：
  输入模式：(插入模式)
      i/I/a/A/o/O
  命令模式：键盘操作通常被解析为编辑命令(编辑模式)
      ZZ 保存并退出
  末行模式：vim的内置的命令行接口，执行vim内置命令
  ex模式：特殊的末行模式，进行快捷操作并只显示被修改的行
	  命令模式切换到末行模式输入":"
      输入模式切换到命令模式按ESC键
      末行模式切换到命令模式按两次ESC键
      末行模式与输入模式不能直接切换
末行模式常用命令：
  :r {filename}  当前行读入文件 
  :w {filename} 另存为
  :r!command 将命令command的输出结果放到当前行
  :e File  重新打开文件"File"进行编辑
  :e! 　　 放弃对文件修改，重新载入该文件编辑
  :!command  执行shell命令command
  :f       可以查看光标信息

  
操作：
1.
   y/Y + motion 
   c/d/C/D + motion	
   x/s/X/S + motion
2.
   num + y/Y
   num + c/d/C/D
   num + x/s/X/S

替换 : r/R 
粘贴 : p/P 


移动motion：
单字符移动：
　　h或#h 向左移动1个或#个字符
　　l或#l 向右移动1个或#个字符
　　j或#j 向下移动1行或#行
　　k或#k 向上移动1行或#行
  Enter  移动到下一行
  space 光标右移一个字符
  Backspace光标左移一个字符
  fa 向右移动光标到当前行的字符a上
  Fa 向左移动光标到当前行的字符a上
  t/T
  
单词间移动(可以结合数字)：
　　w或W   光标右移到下一个单词至词首  
　　b或B   光标左移到当前或上一个单词的词首
　　e或E   光标右移到当前或下一个单词至词尾
　　ge或gE 光标左移到上一个单词至词尾
  注意：
    W、B、E 命令操作的单词是以空白字符(空格、Tab、换行)为分隔字符串，比如字符串"str1-str2 str3-str4"，对 W、B、E 命令来说是2个单词，而对 w、b、e 命令来说则是6个单词

行内移动：
　　0 移动到当前行绝对行首
　　^ 移动到当前行第一个非空白字符
　　$ 移动到当前行绝对行尾

句子、段落间移动：
　　}  光标右移至下一空行
　　{  光标左移至下一空行
　　% 光标移动至与之匹配的括号上去()、{}、[]、<>  
　　)  光标右移至.的下一个字符
　　(  光标左移至.的下一个字符

行间移动：
  　gg   移动到第1行
　　#G   移动到第#行(或者#gg)
　　G   移动到最后一行
　　H    移动到屏幕首行
　　M   移动到屏幕中间行
　　L   移动到屏幕尾行
　　n$ 　　移动至当前行向下第n行行尾(包含当前行)


翻屏类命令(不是motion)：
  shift+j 删除行尾的换行符，下一行接上来了
  Ctrl+f 向文件尾翻一屏
  Ctrl+b 向文件首翻一屏
  Ctrl+u 向文件首翻半屏
  Ctrl+d 向文件尾翻半屏
  zt    把当前行置于屏幕顶部
  zb    把当前行置于屏幕底部
  zz    把当前行置于屏幕中间

撤销：
  u    撤销前一次的操作
  shif+u(U)撤销光标所在位置到行尾的所有操作
  ctrl+r  重复执行上一次操作(撤销上一次的撤销命令)

查找 :
  /pattern 从光标开始处向文件尾搜索pattern
  ?pattern 从光标开始处向文件首搜索pattern
  n     在同一方向重复上一次搜索命令
  N      在反方向上重复上一次搜索命令
  */#    查找光标当前单词(w)
  ma标记   `a回到标记位置 
    /foo\c将会查找所有的"foo","FOO","Foo"等字符串  \c表示大小写不敏感查找，\C表示大小写敏感查找

可视化(也能使用motion，例如v+e) 
   按键组合	             说明
      v	         字符选择，会将光标经过的地方反白选择
      V	         行选择，会将光标经过的行反白选择
    Ctrl+v	     块选择，用一个矩形选择文本
   可以进行删复制粘贴
   1 ctrl+v 进入列编辑模式
   2 向下或向上移动光标
   3 把需要注释的行的开头标记起来
   4 然后按大写的I
   5 再插入注释符,比如"#"
   6 再按Esc,就会全部注释了


替换：
  :[range]s/{pattern}/{string}/[flags]  # :定界符号s/查找内容/替换为的内容/gicn
  g 一行内查找到多个匹配项时全部替换，如果不加g只替换每行的第一个匹配项
  i 忽略查找字符的大小写
  c 替换前都会需要确认是否替换
  n (number) 报告匹配的次数而不替换，可以用来查询匹配次数

  定界符号：
　　.   表示当前行
　　$   表示最后一行
　　$-2 表示倒数第3行（$-2表示倒数余下2行，所以指倒数第3行）
　　%   全部内容
　　/Pat1/,/Pat2/ 从当前光标所在行往下搜索，第一次被模式1匹配的行到第一次被模式2匹配的行
        例子：
　　    :3,10d 删除第3行到第10行的内容
　　    :.,+9y 复制当前行开始数10行的内容
　　    :.,3d  删除当前行开始数3行的内容
　　    :9,$-2 删除第9行到倒数第3行的内容
	
  #1 用于在替换为的内容中引用前面第一个左括号以及与之对应的右括号中的模式查找匹配到的所有内容
  & 用于在替换为的内容中引用前面查找匹配到的所有内容
    例子:
      :s/p1/p2/ 替换当前行第一个p1为p2
      :s/p1/p2/g 替换当前行所有p1为p2
      :n1,n2s/p1/p2/g 将第n1至n2行每一行中所有p1替换为p2
      :1,$s/string1/string2/g 在全文中将string1替换为string2
      :/FROM/,/;/s/=/<>/g(从FROM至分号部分中的所有等号（=）替换为不等号（<>）)
      :s/\<term\>/replace/gc
      :%s/Kang\|Kodos/alien/gc
      查找1至30行中以非#开头的行，并在行首加上#；&引用了前面查找到的所有内容
        :1,30s/^[^#].*/#&/g
注意：
  1、当要查找的内容中包括分隔符"/"就需要转义，如果不想转义可以使用其它符号替代当前分隔符"/"，用@、#等
     :地址定界s@查找模式@替换为的内容@gic
  2、其中的查找模式可以是正则表达式，例如/vim$匹配行尾的"vim"		   


.重复上一个动作
>>：缩进所有选择的代码
<<：和上面类似，但是反缩进
gd：到达光标所在处函数或者变量的定义处（好像是往前，并非定义处）。
K：在 Man 里面查找光标当前所在处的词。
Ctrl - Z 挂起vim，回到shell，按fg可以返回vim

宏复制：命令行模式qw---x-j-q--100@w(w与前面w对应，100为重复次数) 

寄存器：
"ayy/dd/cc/x/s   	  #寄存，例如:"kyy -- :reg k -- "kp  
:reg a    			  #查看单个 
:reg                  #查看全部
:help registers	
10个数字命名寄存器 "0 - "9p —— vim缓存yank和delete行操作命令产生的文本，默认存储从最近开始0-9存储十个寄存器
26个字母命名寄存器 "a - "z / "A - "Z  完全由用户指定内容的寄存器（a-z存在覆盖，A-Z会以小写存入，存在则追加(含特殊符号)）
1个非行删除内容缓存寄存器 "- —— vim缓存delete操作在非行上时产生的文本
未命名寄存器 ""  —— vim使用的默认寄存器，文本来源命令：d/c/s/x/y
4个只读寄存器 ". "% "# ":  
表达式寄存器 "= 使用VIM强大的表达式功能（输入模式i下，"C" + "r" + "=",可输入表达式，如2+3）
#GUI选择寄存器 "* "+ "~ —— vim缓存在GUI中选择的文本
搜索模式寄存器 "/p 缓存在vim中使用过的最后的搜索内容
黑洞寄存器 "_<motion> 类似Linux中的/dev/null文件，只进不出，可用来滤掉影响默认寄存器的内容


vim的配置文件：
  全局配置文件：/etc/vimrc、/etc/virc
  用户配置文件：~/.vimrc、~/.virc 文件默认不存在可以自己手动创建
  
vim窗口属性设置
:set all           列出当前所有选项设置情况
:set term           设置终端类型
:set list           显示制表位(Ctrl+I)和行尾标志($)
:set report          显示由面向行的命令修改过的数目
:set terse          显示简短的警告信息
:set warn           在转到别的文件时若没保存当前文件则显示NO write信息
:set nomagic         允许在搜索模式中，使用前面不带转义""的特殊字符
:set nowrapscan        禁止vim在搜索到达文件两端时，又从另一端开始
:set mesg           允许vim显示其他用户用write写到自己终端上的信息
:set cindent         C语言格式里面的自动缩进
:set sm/nosm         显示对应的括号()、{}、[]
:set number/nonumber      显示/不显示行号(简写nu)
:set ruler/noruler      显示/不显示标尺(显示光标所在行号和所在行的第几个字符)
:set hlsearch/nohlsearch   开启/关闭搜索关键字高亮显示
:syntax on/off        开启/关闭语法高亮
:set tabstop=4        设置tab键所占的字符数为4(简写ts)
:set autoindent/noautoindent 开启/关闭自动缩进(简写ai)
:set ignorecase/noignorecase 开启/关闭搜索字符串时忽略大小写(简写ic)

vim .vimrc	
:set nu	
:set autoindent	
:set paste（原样粘贴,粘贴时候使用）
:syntax on（默认）
:set cursorline （下划线标识所在行）

:set smartindent  智能缩进
:set ic	          忽略大小写
:set is	          部分匹配（like)
:set tabstop=4	  tab空格数
:set shiftwidth=4 移位>>空格数
:set expandtab	  tab转空格
:set scrolloff = 5 显示初始光标所在行数


帮助：
  :help     查看帮助文档，在这之中，按CTRL+] 进入超连接，按CTRL＋O 返回。
  :help subject 看某一主题的帮助，

行方式命令：
  :n1,n2 co n3   将n1行到n2行之间的内容拷贝到第n3行下
  :n1,n2 m n3    将n1行到n2行之间的内容移至到第n3行下



####################################################################################

 

 终端PS1设置：export PS1='\[\e[32m\][\u@192.168.1.1:\[\e[m\]\[\e[33m\]\w\[\e[m\]\[\e[32m\]]\[\e[m\]\$ '
	颜色代码格式:\[\e[F;Bm\] 







