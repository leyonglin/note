
ecmascript基本语法：https://www.bilibili.com/video/BV1mE411G7Hj?p=73

js组成：
	ecmascript：基础语法
	dom：文档对象模型
	bom：浏览器对象模型
	
引入方法：
	行内式：直接写到元素内部 <input type="button" value="唐伯虎" onclick="alert('秋香')"> 
	内嵌式：<head><script>alert('沙漠骆驼');</script></head>
	外部式：<script src="js/test.js"></script>
	
注释：
	单行//
	多行/* */

输出输入语句：
    alert()：弹窗输出
    prompt()：弹窗用户输入
    console.log("hahaha"); 浏览器控制台输出
	
变量：存放数据的内存空间容器，可以通过变量获取及修改数据
	格式：1.声明 var var_name   2.赋值 var_name = 18    或者 初始化： var var_name = 18  #多个逗号分开
	#未声明未赋值：报错    声明未赋值：undefined   未声明直接赋值：可以使用
命名规范：
	1.首字母必须是字母、下划线_或者美元符号$
	2.其他字母可以是下划线_美元符号$，字母或者数字。
	3.一般采用驼峰法：第一个字母小写，其余有意义的单词首字母大写。
	4.变量名是区分大小写的，不能是关键字或保留字。
类型：不同的数据所占用内存空间不同（是一种弱类型/动态可修改的）运行是才会确定的
	#typeof(var) #检测变量类型
	简单/值数据类型：
		数字（number）: 有进制数，最大最小值，无穷大无穷小，NaN(非数字，可以通过isNaN判断)
		字符串（string）：""     #转义符是\
			拼接：字符串+任何类型=新字符串
		布尔值（boolean）:true和false
		undefined：声明未赋值
		null：var a=null    #是一个对象
	复杂/引用数据类型：
		对象（Object）
		数组（Array）
		函数（Function）
自变量就是变量的值
数据类型转换：
	转换成字符串：1.toString()  2.String()  3.拼接
	转换成数值：1.parseInt()   2.parseFloat()   3.Number()    4.算式(加减乘除)   #第一二种数字开头可以转换
	转换成布尔型：Boolean()

运算符：
	算术运算符：+ - * / %   #浮点数有精度问题，不能用作直接比较
	递增和递减运算符：++  --      #这是一个表达式 var age=10 则(++age + 10)=21(先加1后返回值)  而(age++ + 10)=20(先返回值再加1)
	比较运算符：>  <  >=  <=  ==(18=='18'返回true) !=  ===(18=='18'返回false)  !===   #返回false 和 true
	逻辑运算符：&&  ||  ！
	赋值运算符：=  +=  -=  *=  /=  %=

一元运算符：++ -- !
二元运算符：1 + 2
三元表达式：条件表达式 ? 表达式1 : 表达式2

！！
运算符优先级（多个&& 和 || 的执行顺序）

js引擎运行分两步：
	1.预解析：js会将提升 变量var声明 和 函数function声明 到当前作用域的最前面  
		#函数没顺序，变量有顺序
	2.代码从上到下顺序执行
	
断点调试：https://www.bilibili.com/video/BV1mE411G7Hj?p=73

数据内存分配：
	基本数据类型：在栈中存放值
	复杂基本类型：在栈中存放内存地址，指向堆中存放的实际内容


流程控制：
	分支流程控制 
		if ：单分支，双分支，多分支    #使用场景：范围判断
		switch case			#使用场景：等值

	循环：执行重复代码
		for
		while		#先判断
		do while    #先执行一次循环体
	循环控制：break  continue	




数组：一组数据存储在一个变量中，其中每个数据称作元素
	创建：
		1. var arr = new Array()      #创建一个空数组
		2. var 数组名=[]			  #元素之间用逗号隔开
	获取: arr[索引]   #没有输出undefined
	遍历：for
	长度：arr.length
	新增：
		arr.push(值)    #在最后添加元素,返回数组长度
		arr.unshift(值) #开头添加
		arr[索引]=值	#存在则替换
		直接修改length  #多出来的为undefined
	删除：
		arr.pop()       #删除最后元素，返回删除元素
		arr.shift()     #删除第一个元素，返回删除元素
	反转：arr.reverse()
	排序：arr.sort()
	索引: arr.indexOf()
	转换成字符串：
		arr.toString()    
		arr.join()
		
函数：封装了逻辑相同的代码块,一般有且只有一个return返回值，默认返回值为undefined	
	声明：
		1.function 函数名(形参,...){ 代码块 }   
		  #arguments对象是函数内置对象，用于获取参数，是一个伪数组
		2.var 变量名 = function(){ 代码块 }    #匿名函数
	调用：1.函数名(实参,...)   2. 变量名(实参,...) 
		
变量作用域：	
	全局作用域: 全局变量,浏览器关闭是销毁    			 #特殊情况，在函数内部没有声明的变量
	局部作用域(函数作用域): 局部变量,程序执行完就销毁		
	块级作用域：{}	
作用域链：就近原则		
			

#类和对象：类实例化(将变量替换成实际值)就变成对象，js没有类概念，则对象某种程度可以看做类
创建对象的三种方式：
	1.var obj = { 
	    uname: "zhang",
		saiHi: function() {
		        console.log('hi~')
			   }
		}
	2. var obj = new Object()   #创建一个空对象
	   追加：obj.uname='zhang'
			 obj.saiHi = function() {
			              console.log('hi~')
                         }
	3.构造函数：将对象里面一些相同的属性和方法抽象出看来封装到函数里面   #方便重复创建对象
		function 构造函数名(形参) {
			this.属性 = 值;
			this.方法 = function() {}
		}
		使用：new 构造函数名(实参)      #很像其他语言的类				 
						 
						 
调用：1.对象名.属性名    2.对象名['属性名']   
      1.对象名.方法名()
	  
遍历变量属性：for (var k in obj ) { console.log(k); }		
		
		
js对象有三种：自定义对象
			  内置对象：Math Date...       #内置对象文档：https://developer.mozilla.org/zh-CN/
			  浏览器对象		

判断是否为数组：
	1.arr instanceof(运算符) Array
	2.Array.isArray(arr)

基本包装类型:将基本数据类型包装成复合数据类型，使之具有更多属性和方法
	str.indexOf()
	str.charCodeAt()   #返回元素的ascii码，与键盘对应？
	str.substr()       #截取
	str.replace()      #替换
	str.split()        #转换成数组



##########################################################################################


this 和 self

