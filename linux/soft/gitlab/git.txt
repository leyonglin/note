

git:版本控制工具
gitlab/github:代码托管中心(git服务器:维护远程库)
局域网环境下：gitlab服务器
外网环境：github和码云
gitlab参考文档：https://about.gitlab.com
通过快照方式，以行为单位
团队内部写作：--pull--工作区(写代码)--git add . -- 暂存区(临时存储,方便撤销)-- git commit --本地库(历史版本)--git push --远程库(代码托管中心)  
跨团队协作
远程库1--fork--远程库2--pull request --审核--merge--远程库1

本地库初始化：git init  (会在当前目录生成.git信息文件)
设置签名：区分不同开发人员的身份
命令：项目级别/仓库级别：仅在当前本地库范围内有效  git config user.name/user.email name/email        --- .git/config
	  系统用户级别：登录当前操作系统的用户范围 git config --global user.name/user.email name/email   --- ~/.gitconfig

添加标签：git tags v1.1
查看标签：git tag
上传标签：git push origin --tags
标签回退：git checkout v1.1 (master 回退到最新版本)

pull requests：请求合并    review:代码审查   issues：问题/bug
tags.v4.9.2 == release-v4.9.2  第四个大版本，添加9个功能，打补丁2次   
git工作流: 集中式工作流(过渡,一个分支)---功能分支工作流(master--feature)---gitflow工作流(公司master--devops--feature)----forking工作流(跨公司/跨国)

第一次：	  
查看状态：git status    1.位于哪个branch     2.工作区有没有提交的    3.缓存区有没有提交的 
工作区没提交Changes not staged for commit(update)-->缓存区未提交Changes to be committed --stage-- 本地库   
track(追踪)：被git纳管的文件
添加工作区文件到缓存区(track)：git add <file>...
将文件从缓存区删除：git rm --cached <file>...
从缓存区提交到本地库：git commit -m "" <file> 

非第一次：
查看状态：git status    1.位于哪个branch      2.缓存区有没有提交的
修改后：git status      Changes not...改变但未..
git add <file>..        git commit -m "" <file>   

版本前进和后退：HEAD指针
本地库：git help reset
查看历史记录：git reflog / git log / git log --pretty=oneline / git log --oneline / 
1.基于索引值操作  2.使用^符号(只能往后) / 使用~符号(只能后退)
1.往后退/前进：git reset --hard 索引值
2.git reset --hard HEAD^*   /  git reset --hard HEAD~*    后退*步
hard移动三个区 指针          --git status是干净的   
mixed移动本地库和暂存区指针  --git status是红色的  
soft仅移动本地库指针         --git status是绿色的

删除至本地库文件：删除untrack内容git clean -nxfd(n：预运行x：.gitignore文件f：文件d：目录) 
rm -f <file>--git status(红色)--git rm <file>--git status(绿色)--git commit -m "delete <file>" <file>--git status(干净)
恢复：git reset --hard 索引值

删除至缓存区：rm -f <file>--git status(红色)--git rm <file>--git status(绿色)
git reset --hard 索引值

查看当前版本：git rev-parse HEAD

push之后撤销：git revert <SHA>


比较文件：工作区和暂存区比较git diff                  filename
          暂存区和本地库比较git diff HEAD[^*]/索引值  [filename]  ---->  不添加文件名，比较所有文件差异


git分支：在版本控制过程中  1.使用多条线同时推进多个任务   2.分支之间彼此独立
	查看分支：git branch -v
	创建分支：git branch 分支名(hot_fix)
	切换分支：git checkout hot_fix
	合并分支：把hot_fix分支合并到master分支上
			  1.切换到master:git checkout master   2.合并：git merge hot_fix
			  
	分支冲突：1.git merge hot_fix --- 合并冲突，然后处于（master|MERGING）正在合并状态
			  2.到冲突的文件里，修改成最终版
			  3.git status --- git add filename
			  4.git status --- git commit -m ""   <---不带文件名
			  5.git status
			  
			  
git底层采用的是sha-1算法
	hash算法：同一数据，使用同一个hash算法，得到校验值是一样的，反之，校验值一样，数据也一样，数据不一样，校验值一定不一样
	
集中式版本控制工具的文件管理机制：增量式管理机制：保留每次修改的部分，当需要数据的时候，把历史修改拼接到一起
git分布式版本控制工具的文件管理机制：把数据看作是小型文件系统的一组快照。每次提交更新时git都会对当前的全部文件制作一个快照并保存这个快照的索引，如果文件没有修改，则不再更新存储该文件，而是指保留一个链接指向之前存储的文件，因此git的工作方式可以称之为快照流
									每个版本文件，使用的是sha-1的哈希算法，新版本会记录前一个版本的哈希值，并声成新的哈希值
git分支管理的本质是创建和移动指针，新创建分支的时候，其实只是新创建了一个指针，指向的是同一个版本文件	

查看远程库地址别名：git remote -v		fetch：取回    push：推送  fatal：致命的
创建远程库地址别名：git remote add 地址别名  地址(https://github.com/leyonglin/first-2019-4-21.git)     这个建立在之前已经签名的基础上。
					
推送(push)远程库：
01.mkdir git目录                     											创建目录                                                                   
02.git init                                                            			初始化
03.git config user.name zhigao													签名
04.git config user.email zhigao@google.com										签名
05.git add .   [或者提交资源名称]												将文件从工作区添加到暂存区
06.git commit -m "message"														将文件从暂存区提交到本地库
07.git remote add video https://github.com/leyonglin/video-public.git			设置远程库别名
08.git remote -v																查看远程库
09.git push video --all(master)													提交到远程库别名的master分支

拉取(pull)及同步操作:
01.git clone https://github.com/leyonglin/first-2019-4-21.git  			1.将远程库下载到本地  2.初始化本地库  3.常见origin远程地址别名   
02.git remote add video https://github.com/leyonglin/video-public.git
03.git pull 地址别名 分支

GITHUB操作：
邀请成员：点击仓库--setting--collaborators(协作者)--输入成员github账号--并复制链接发送给对方--对方接受即可      window10--控制面板--用户账号--凭据管理器会记住账号密码
拉取远程库修改:pull=fetch+merge
			   1.git fetch origin master(仅下载到本地，但并不合并工作区文件)   
			   2.git checkout origin/master  
			   3.cat filename  
			   4.git checkout master   
			   5.cat filename   
			   6.git merge origin/master  
			   7.cat  filename
	 1.git pull origin master    2.cat filename 
  
git冲突：1.git push origin master   ---> caused by another repository pushing  冲突
		 2.git pull origin master   --->（master|MERGING） 进入合并状态
		 3.编辑冲突文件，删除特殊符号，并改成最终版
		 4.git add filename  &&  git commit -m ""    不带文件名
		 5.git push origin master
		 
		 
跨团队协助：1.他人：以团队外的账号去fork团队git版本库，在github仓库的左上角  ---  leyonglin/first-2019-4-21   所有者/仓库
			2.他人：git clone 链接(他人/仓库)
		    3.他人：将修改提交到他人/仓库 -- git push origin master 
			4.他人：点击仓库 -- pull requests -- new pull request -- create pull request -- 发消息给fork前所有人
			5.原所有者：点击仓库 -- pull requests -- 点击消息 
			  方式1：回消息，进行对话
			  方式2：审核：commits--files changed -- conversation -- Merge pull request(合并) -- confirm merge -- 团队重新拉取就行了
			
			
ssh免密推送：1.在家目录用ssh-keygen 生成密钥，并将 id_rsa.pub 的内容复制到github上
			 2.账户 -- setting -- SSH and GPG keys -- New SSH key -- 将 id_rsa.pub 粘贴到key下面的输入框上(title随便写)
			 3.到git目录下:git remote add  ssh地址别名  ssh地址链接      
			 4.(1)查看：git remote -v       (2)推送：git push ssh别名 分支


每个项目中都可以创建issues的里程碑和问题(list)，并且可以指派给已在项目中的成员并且可以添加解决问题的模板
gitflow feature start question  = git checkout -b feature/question(feature/question是一个分支)(flow是一个插件)
请求合并：merge request 



git工作流：1.集中式工作流：即不分支，类似svn
		   2.GitFlow工作流：(master/develop/feature/hotfix/release)
		   3.Forking工作流：跨团队协作

