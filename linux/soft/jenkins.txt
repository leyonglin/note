
使用文档：https://blog.51cto.com/14234542/2426676

jenkins：
1.安装
	1.在官网下载镜像下载
	2.官网下载war包
		1.执行命令“java -jar jenkins.war”安装。注意：Jenkins 需要运行Java 5以及以上的版本。
		2.将jenkins.war文件放入tomcat下的webapps目录下，启动tomcat时，会自动在webapps目录下建立jenkins目录
2.配置文件，启动用户的家目录下的.jenkins目录中

view视图在： ~/.jenkins/config.xml 
job任务在： ~/.jenkins/jobs/job_name
密钥和主机信息： ~/.jenkins/jenkins.plugins.publish_over_ssh.BapSshPublisherPlugin.xml  

参数化构建: 1.选项/字符参数  2.Build  3.Post-build Actions(可以在后端主机进行操作)

jenkins的三种部署方式
jenkins触发式构建：用于开发环境部署，开发人员push代码或者合并代码到gitlab项目的master分支，jenkins就部署代码到对应服务器。
jenkins参数化构建：用于测试环境预上线环境部署，开发push代码或者合并代码到gitlab项目的master分支之后，并不会部署代码，而是需要登录到jenkins的web界面，点击构建按钮，传入对应的参数（比如参数需要构建的tag，需要部署的分支）然后才会部署。
jenkins定时构建：用于APP自动打包，定时构建是在参数化构建的基础上添加的，开发人员可以登录jenkins手动传入tag进行打包，如果不手动打包，那么jenkins就每天凌晨从gitlab拉取最新的APP代码打包。
Gitlab的Webhook功能，通过Webhook的相关设置，可以实现代码Push后自动去触发jenkins上的构建动作，无需要人工干预去执行发版操作了

添加slave节点

pipeline：管道能通过Groovy语言脚本进行自动化构建多个jobs

########################################################################


jenkins：
添加节点：ssh主动  jnlp被动
This project is parameterized  #参数构建
Throttle builds                #限制并发构建
在必要的时候并发构建           #并发构建
限制项目的运行节点             #label
构建                           #构建上游(通过拉动构建步骤)
构建后操作                     #参数化构建下游
Build periodically             #定时构建
Poll SCM                       #定时并且检查有修改才构建
hook                           #触发构建
文件夹：权限控制   view：多种插件形式


sonarqube代码质量平台：可以和jenkins集成

properties：性能(参数)

权限管理插件：	Role-based Authorization Strategy

Jenkins和gitlab集成自动触发：
  1.jenkins在全局配置添加gitlab的cookie认证(cookie从gitlab得到：jenkins可以连接gitlab拉取代码)
  2.jenkins在具体的job中配置代码分支和gitlab使用的cookie
		job构建触发器选项：Build when a change is pushed to GitLab. GitLab webhook URL: http://192.168.3.70:8080/jenkins/project/first-job-xiugai
  3.gitlab集成选项配置jenkin的cookie(代码有变动能够通知)	
	
	
找软件包的时候，可以先找到官网帮助文档--->install    #elk
修改配置文件就是要修改逻辑私有信息(集群名称/id/ip/hostname/port...)	
可视化添加或修改配置的时候，查看存储目录的变化	