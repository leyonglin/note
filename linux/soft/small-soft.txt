
内核编译：
1.下载内核源码包：https://www.kernel.org/
2.配置编译选项: make menuconfig    #配置完成会自动生成.config内核选项文件
	#make localmodconfig 生成仅以正在使用的内核模块为对象的.config(编译的模块少)
	#make defconfig  默认内核选项
	#make oldconfig  复用之前内核编译选项

3.编译：make -j 2   #-j cpu个数
	
insmod kernel_file.ko #装载模块
rmmod  kernel_file    #卸载模块
lsmod  #/lib/modules 中根据编译内核版本号来查看的装载模块

###############################################################################################

FTP简称文件传输协议，全称（File Transfer Protocol),FTP服务在互联网上任意两台计算机之间提供文件传输服务及共享服务
FTP服务登录模式：
匿名用户登录模式：只需要输入用户anonymous/ftp，并将自己的E-mail作为口令即可登录FTP服务器，又称为（anonymousFTP服务器）
本地账户登录模式：当进入FTP登录窗口是，需要输入正确的用户名（user）和密码（passwd）即可登录FTP服务器。
虚拟用户登录模式：将登录用户映射到指定的系统账号(/sbin/nologin)来访问FTP资源，这样就起到安全的效果

ftp指定的根目录权限为755
上传目录是1777权限

三种传输模式：
主动模式：有FTP服务器(20)向客户端发送一个用于数据传输的连接，客户端的连接端口由服务器和客户端通过协商确定，
被动模式PASV：由客户端发送PASV命令使服务器处于被动模式，FTP的数据连接和控制连接方向一致，由客户端向服务器端发送一个用于数据传输的连接，
单端口模式，由服务器端发起，使用该模式时，客户端的控制连接端口和数据连接端口一致，这种模式无法在短时间内连续输入数据并传送命令
#pasv_enable=YES  
#port_enable=YES  
    以上两个选项是FTP服务器的工作模式，两者只能出现一个，而且另一个必须注释掉。
	
#dirmessage_enable=YES           ##如果目录存在.message隐藏文件时，当进入此目录时，会显示.message里面的内容	

#白名单：
userlist_enable=YES
userlist_deny=NO
userlist_file=/etc/vsftpd/user_list

#不允许离开主目录
chroot_local_user=YES

# 增加匿名访问目录
anon_root=/var/ftp
# 打开匿名用户上传 / 删除 / 重命名权限
anon_upload_enable=YES
anon_mkdir_write_enable=YES
#anon_other_write_enable=YES
#匿名用户的掩码（如需要，需自己添加，含义：如 umask 是 022, 这时创建一个权限为 666 的文件，文件的实际权限为 666-022=644）
anon_umask=022
#匿名上传的所有者
chown_uploads=YES
chown_username=whoever
#设置匿名用户最大的传输速率为10kbps 
anon_max_rate=10k        

#虚拟用户
vim vsftpd.conf (好像不用也行)
#local_root=/data/ftp
#write_enable=YES
#anon_umask=022
#anon_world_readable_only=NO
#anon_upload_enable=YES
#anon_mkdir_write_enable=YES
#anon_other_write_enable=YES
# 创建用户密码文本，注意奇行是用户名，偶行是密码，本地用户也可以写进去
vi /etc/vsftpd/vuser_passwd.txt
test
123456
# 生成虚拟用户认证的 db 文件
db_load -T -t hash -f /etc/vsftpd/vuser_passwd.txt /etc/vsftpd/vuser_passwd.db
# 编辑认证文件，全部注释掉原来语句，再增加以下两句
vi /etc/pam.d/vsftpd
auth required pam_userdb.so db=/etc/vsftpd/vuser_passwd
account required pam_userdb.so db=/etc/vsftpd/vuser_passwd


SFTP，即SSH文件传输协议（ SSH File Transfer Protocol ），或者说是安全文件传输协议（ Secure File Transfer Protocol ）。通过安全连接以相似的方式工作。
	使用：sftp user@ip  #优势在于可以利用安全的连接传输文件，还能遍历本地和远程系统上的文件系统。
与FTP相比TFTP的功能要弱得多: TFTP能够用于那些有UDP而无TCP的环境且不用密码认证；
	使用类似ftp且可以非交互上传下载

###############################################################################################

linux本地邮件：
postfix（作为发送邮件服务器）+dovecot（作为接收邮件服务器）+mysql（作为数据库）#使用Foxmail等第三方软件来收发邮件了
服务端软件：postfix  [+sendmail]
cat /etc/postfix/main.cf
	77 myhostname = mail.lie.com					#邮件服务器完整域名
	85 mydomain = lie.com							#邮件后缀域名
	101 myorigin = $mydomain						#发送邮件后缀，可以使用变量也可以直接指定值
	116 inet_interfaces = all						#监听接口
	167 mydestination = $myhostname , $mydomain		#指定接收邮件时收件人的邮件后缀
	268 mynetworks = 192.168.80.0/24, 127.0.0.0/8	#权限
	#notify_classes 	#错误报告对象，默认是管理员 
systemctl restart postfix
mail -s 'mail test' root@lin.com,master@lin.com < /etc/fstab    #内部账号使用
客户端软件：mailx
/etc/mail.rc   #配置使用外部smtp服务器发送邮件
　　set from=xxx@126.com　　			# 发送的邮件地址
　　set smtp=smtp.126.com　　			# 发送邮件服务器
　　set smtp-auth-user=xxx@126.com　　	# 发件人账号，一般情况下为邮件地址
　　set smtp-auth-password=xxx　　		# 发件人密码
　　set smtp-auth=login 　　 			# 邮件认证方式

###############################################################################################

grafana
InfluxDB时序数据库8088(RPC calls)/8086(InfluxDB HTTP service) + Chronograf可视化web展示(基本监控)8888 + Telegraf数据收集 #+ Kapacitor警报9092
influx --help

###############################################################################################

优势：LVM最大的特点就是可以对磁盘进行动态管理,而且不会丢失现有的数据
概念：
	(1)PE(Physical Extend) 物理拓展
	(2)PV(Physical Volume) 物理卷
	(3)VG(Volume Group) 卷组
	(4)LV(Logical Volume) 逻辑卷
原理：
	(1)物理磁盘被格式化为PV，空间被划分为一个个的PE
	(2)不同的PV加入到同一个VG中，不同PV的PE全部进入到了VG的PE池内
	(3)LV基于PE创建，大小为PE的整数倍，组成LV的PE可能来自不同的物理磁盘
	(4)LV直接可以格式化后挂载使用了
	(5)LV的扩充缩减实际上就是增加或减少组成该LV的PE数量，其过程不会丢失原始数据

#自动创建2G和剩下容量的两个分区,删除为d
echo -e "m\n n\np\n1\n\n+2048M\n n\np\n2\n\n\n\n w\n"|fdisk /dev/sdb
partprobe
#echo -e "t\n1\n8e\n t\n2\n8e\n w\n" |fdisk /dev/sdb       #lvm为8e，手动改会显示"fdisk -l /dev/sda"

#创建
pvcreate /dev/sdb1 /dev/sdb2
vgcreate [-s 8M] vg1 /dev/sdb1 /dev/sdb2	
lvcreate -L 100M -n lv1 vg1         #从vg1中创建一个大小100M名为lv1的逻辑卷
mkfs.ext4 /dev/vg1/lv1
ls -l /dev/vg1/lv1 /dev/mapper/vg1-lv1
  dm是Device Mapper的缩写，个人觉得是逻辑卷LVM
  dmsetup ls[info] ---> (253:X)X就是dmX
  
#扩容不用卸载，缩容需要卸载就反过来(xfs好像不支持)，命令完全一样  
lvresize -L 200M /dev/vg1/lv1     #扩容成200M（lvs和lsblk），缩容扩容均可用该命令	
	#lvextend -L +8m /dev/vg1/lv1  #在原来的基础上增加8M
#e2fsck -f /dev/vg1/lv1    		#检查磁盘是否有错误
resize2fs /dev/vg1/lv1	[200M]    #更新逻辑卷文件系统信息,df -Th  ，xfs使用xfs_growfs命令
#扩容
pvcreate /dev/sdb3
vgextend vg1 /dev/sdb3
lvextend -L +8m /dev/vg1/lv1
#vgs 查看剩余多少容量

#删除用lvremove
umount /mnt
lvremove vg1   #这里要注意
vgremove vg1
pvremove /dev/sdb1 /dev/sdb2
echo -e "d\n\n d\n w\n" |fdisk /dev/sdb 















