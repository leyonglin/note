#如果一直报错，注意检查语法
input {
    beats {
        port => "5044"
    }
}
filter {
    grok {
      patterns_dir => ["filter.conf"]
    #  (%{USERNAME:user}|-)     #这种的话，会匹配-，但是会显示null，除非在匹配模式里有-,""[]需要用\"\[ 表示
    #  /%{NOTSPACE:request}     #最前面那一/,表示匹配的时候，开头是/并且不会赋值给字段request
	#  %{pattern:udname:type}例如(?:%{NUMBER:bytes:float}|-) 类型可省略，默认是text文本类型
	match => {"message" => "%{IPV4:remote_addr} - (%{USERNAME:user}|-) \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:method} /%{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response_code} (?:%{NUMBER:bytes:float}|-) \"%{NOTSPACE:domain}\" %{QS:referrer} %{QS:agent} \"(%{IP_LIST:x_forword_for}|-)\" \"(%{USERNAME:response_time}|-)\" \"(%{USERNAME:upstream_response_time}|-)"}
        }
		
    #增加字段		
    mutate {       
       add_field => { "finish-url" => "%{domain}%{request}" }
    #   add_field => {
    #      "[其它][tag1]" => "one"
    #      "[其它][tag2]" => "two"
    #      }
       } 
	
	#mutate {
    #  rename => {
    #    "longitude" => "[location][lon]"
    #    "latitude" => "[location][lat]"
    #  remove_field => ["[location][lon]", "[location][lat]"]
    #  }
    #}
	
	#修改字段类型，或者在匹配的时候添加type
	mutate{
     convert => ["udbytes","float"]
    }
	
    #替换原有字段   
    #mutate {
    #   replace => { 
	#       "[version][version-major]" => "%{[version][major]}.x"
	#       "message" => "%{domain}: My new message" 
	#	   }
    #   }
    
    #匹配时间戳,建立索引的时候使用日志的时间戳，但有问题。暂不知道啥问题
    #date{
    #  match => ["timestamp","dd/MMM/yyyy:HH:mm:ss Z"]
	#  match => ["body[author][data]", "ISO8601"]   #使用ISO8601格式解析author.data时间
	#  remove_field => ["[author][data]"] 
    #     }
	
	#将时间戳改为访问时间
	date{
       match => ["timestamp", "dd/MMM/yyyy:H:m:s Z"]
       target => "@timestamp"
    }

	
	#把所有字段进行urldecode（显示中文）
　　#urldecode {
    #　　　　all_fields => true
    #}	
	
    #对字段进行增删查改
    mutate {  
       remove_field => ["host","ecs","tags","@version","input","prospector","[beat][hostname]"]
    #   remove_field => ["host"]
    #   remove_field => ["agent"]

    geoip {
      source => "remote_addr"
    }

	#拆分字段，以", "为分割符，并新增字段
    mutate {
      split => ["x_forword_for",", "]
    }
    if [x_forword_for][0] {
        mutate {                
            add_field =>   {
                "proxy1" => "%{[x_forword_for][0]}"
            }
        }
    }
    if [x_forword_for][1] {
        mutate {                
            add_field =>   {
                "proxy2" => "%{[x_forword_for][1]}"
            }
        }
    }   
	
}

output {
   stdout { codec => rubydebug }
}
#output {
#    elasticsearch {
#        hosts => [ "localhost:9200" ]
#        index => "nginx-access-%{+YYYY.MM.dd}"
#    }
#}
#在输入es的时候自定义字段
#output {
#if [fields][log_source] == "nginx-access" {
#   elasticsearch{
#     hosts => [ "127.0.0.1:9200" ]
#     index => "nginx-access-%{+YYYY.MM.dd}"
#    }
#  }
#if [fields][log_source] == "nginx-error" {
#   elasticsearch{
#     hosts => [ "127.0.0.1:9200" ]
#     index => "nginx-error-%{+YYYY.MM.dd}"
#    }
#  }
#if [fields][log_source] == "tomcat" {
#   elasticsearch{
#     hosts => [ "127.0.0.1:9200" ]
#     index => "tomcat-%{+YYYY.MM.dd}"
#    }
#  }
#}



