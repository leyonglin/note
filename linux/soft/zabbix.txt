
Zabbix：

帮助文档：https://www.zabbix.com/documentation/4.2/manual/installation/install_from_packages/rhel_centos(搭建文档)
		  https://www.zabbix.com/documentation/4.2/manual/appendix(配置文档)
          https://www.zabbix.com/documentation/4.2/manual/web_interface
          https://www.zabbix.com/documentation/3.4/zh/manual/web_interface

Zabbix server:服务器执行数据轮询和捕获，计算及触发器，向用户发送通知。它是Zabbix代理和代理向其报告系统可用性和完整性数据的核心组件
			  基本三组件：Zabbix server, web frontend and database storage.  zabbix前端更改---数据库---server查询并显示在web中
Zabbix agent:部署在监控目标上，以主动监控本地资源和应用程序并传递给服务器进行处理
			 主动检查:重服务器获取检查项,获取到检查数据后向服务端报告   被动检查:响应服务器的数据请求
Zabbix proxy:分布式监控，Zabbix代理是可以从一个或多个被监控设备收集监控数据并将信息发送到Zabbix服务器的过程，本质上代表服务器工作。所有收集的数据都在本地缓冲，然后传输到代理所属的Zabbix服务器。
	zabbix proxy不需要web界面，但是需要安装mysql 存储数据，所以php环境和web服务就无需安装，只安装mysql和zabbix proxy，数据库只需要导入schema.sql 即可，剩余两个数据库不需要导入。
Zabbix Java gateway：监控JMX(Java管理扩展)是一个为应用程序、设备、系统等植入管理功能的框架
Zabbix sender：通常用于长时间运行的用户脚本检测，客户端自己通过zabbix_sender提交数据给zabbix，这个通道便是trapper
Zabbix get：测试自定义监控的时候特别有用，用于检测 agent 端的配置是否正确，可以很方便地知道 key 是否能正常获取到数据

添加用户--添加用户组--授权
添加主机组host groups
添加主机host,资产列表inventory,批量更新mass update
模板：应用集的集合
应用集：监控项的集合，可以从其它模板添加进来，也可以加入自定义监控项
 链接模板：允许您将一个或多个“嵌套”应用集链接到此模板
监控项item：即zabbix通过监控项来获取真正的数据，存储及作为其它判断的标准(可批量修改)
触发器：为一个监控项定义多个具有不同阈值的触发器,可以实现不同级别的报警(可批量修改)
触发器依赖：依赖关系设置的通知可能会被抑制，而只发送根本问题的通知
触发器的严重性：自带6种(颜色不同)，也可自定义
事件:当触发器的状态变化的时候，一个event发生了(触发器事件,发现事件,自动注册事件,内部事件)，在Zabbix中正常事件会关闭所有的问题事件
事件标签：stopped -- restarted  -->  “Application1  stopped”和“Application2  restarted”
事件关联: stopped 与 restarted 不能关闭所有问题事件，标签匹配“Application1  stopped”和“Application2  restarted”才能关闭  
事件确认：Zabbix中的问题事件可以由用户确认。
手动关闭问题:可以通过检查关闭问题选项通过确认屏幕手动关闭问题,需在触发器配置中选中了允许手动关闭选项,才可以以这种方式解决问题
动作：用来应对一个event的动作叫做action，一个action是一个操作及其结果，例如发送邮件通知。
      只有在事件与定义的条件匹配的情况下才执行操作(发送消息和执行远程命令(zabbix_agentd.conf:EnableRemoteCommands 参数设置为 1 并取消注释)) 
警报脚本：服务器配置文件中定义的目录中AlertScriptsPath.
预测触发功能：Zabbix具有基于历史数据预测受监视系统的未来行为的工具。这些工具通过预测触发功能实现。提供了2个函数timeleft和forecast用于趋势预测
Escalations:升级动作，可以创建发送通知或执行远程命令的自定义场景。
拓扑图：架构图形
图形：将数据可视化，简单图形(自带)  自定义图形(定制)  特制图形(多个监控项比较) 
聚合图形：把从各种来源的信息聚合到一起，以便在单个屏幕上快速查看
宏：是一个变量{MACRO} ，根据在上下文中，宏解析为一个特殊的值。
宏函数：提供自定义宏值的功能。{<macro>.<func>(<params>)}，需要在受宏支持的位置使用函数
用户宏：{$MACRO}  主机级别(主机上定义) > 链接模板 > 全局宏
自动发现(LLD):提供了一种在计算机上为不同实体自动创建/移除监控项,触发器和图形的方法(用户可以自己定义发现类型,只要它们遵循特定的JSON协议.)
              配置”→“模板”→“发现”列中创建一个发现规则,然后在该规则种创建“图形原型”
网络发现：无需过多管理就能在快速变化的环境中使用Zabbix，由两个阶段组成:发现(discovery)和动作(actions)(不支持加密)。
          间隔扫描---条件(存在时间/属性)---动作(操作,例如将活动的Zabbix agent可以自动注册到服务器进行监控)
服务监控(services monitoring)旨在帮助那些想要高级(业务)基础设施的监控的人。最底层的服务必须依赖触发器
web检测：监控web是否可用、是否正常工作以及响应速度
维护：可以为Zabbix中为主机和主机组定义维护周期，有两种维护类型 - 继续对目标进行监控数据的收集和停止对目标进行监控数据的收集。
加密：可以使用证书和共享密钥加密(源码编译--with-mbedtls[=DIR] --with-gnutls[=DIR] --with-openssl[=DIR])
配置的导入导出：主机组/模板/主机/网络拓扑图/聚合图形



SNMP OID(对象标识符)
ODBC 开放数据库连接
PSK是预共享密钥
PMI是智能型平台管理接口(Intelligent Platform Management Interface)独立于处理器,bios,操作系统


主机--链接模板-->模板包含应用集-->应用集包含监控项-->添加触发器(依赖监控项)


自定义监控：*/zabbix_agentd.d/*.conf
UserParameter=key,command 
UserParameter=key[*],<command>    key里的所有参数，都会传递给后面命令的位置变量 


 cadvisor(收集)+influxdb(存储)+grafana（web展示）



zabbix使用的是lamp架构 被动和主动模式可以同时存在  官方文档：https://www.zabbix.com/documentation/3.4/zh/manual(以官方为主,以下为额外参考)   
	##如果要用最新的，但是没有中文版本，可以在安装的时候使用最新版本，使用的时候参考中文版本
搭建：http://www.zsythink.net/archives/447    /    https://www.zabbix.com/cn/download?zabbix=3.0&os_distribution=centos&os_version=7&db=mysql （源码：https://www.zabbix.com/documentation/3.0/manual/installation/install#installing_frontend）
	在启动和之后配置有问题时候，可以查看日志
配置文件：server和agent中：SourceIP  =  server  =  serveractive  必须保持一致
添加主机：Host name 必须和  agent/proxy 配置文件的参数 Hostname  一致（严格区分大小写和时间同步）

Zabbix监控场景：硬件监控、系统监控，网络监控，部分应用监控（如：Oracle）,其他监控（URL监控、端口监控）
Prometheus监控场景： 业务监控、性能监控、容器监控、微服务监控、部分应用监控（能够做的应用监控）
Open-falcon监控场景：CPU、Load、内存、磁盘、IO、网络相关、内核参数、ss 统计输出、端口采集、核心服务的进程存活信息采集、关键业务进程资源消耗、NTP offset采集、DNS解析采集等监控



cacti：绘图
	服务端：https://www.jianshu.com/p/d6533f2382e1
Nagios：插件多，状态检查和报警(配置复杂)


Rails 是使用 Ruby 语言编写的 Web 应用开发框架，目的是通过解决快速开发中的共通问题，简化 Web 应用的开发。与其他编程语言和框架相比，使用 Rails 只需编写更少代码就能实现更多功能
NewRelic是一家提供Rails性能监测服务的网站, NewRelic提供了不同级别的监测功能，免费的是Lite版本，最高有Gold版本.
New Relic监控类别:
	1.浏览器端监控（Customer Experience）:  
	2.服务端监控（APM）:服务端监控是用来收集Web应用在服务器端的性能数据。该数据和客户端数据能够关联起来，使得分析完整的事物性能成为可能   
	3.基础架构监控（Infrastructure）:服务器监控（Server Monitor）的升级替代产品
		原理是利用插入到服务端程序的代理，来收集数据并汇集到New Relic位于全球各地的数据中心(访问NewRelic网站),支持多达七种编程语言，包括ruby，Java， Node.js，PHP，.NET，Python， Go等
Pingdom:第三方网站进行监控
PagerDuty是一款能够在服务器出问题时发送提醒的软件。在发生问题时，提醒的方式包括屏幕显示、电话呼叫、短信通知、电邮通知等，而且在无人应答时还会自动将提醒级别提高。该软件通过一个控制面板对问题进行监控


Telegraf/cadvisor(收集)+influxdb(存储)+grafana（web展示）



Open-falcon:最初为小米公司开发，采用多模块架构，监控功能相对完善,目前有开源社区人员维护，版本迭代无法保证
http://book.open-falcon.org/zh/
Prometheus:告警功能简单，但是开源社区异常火爆，作为CNCF第二开源项目,具有数据存储能力，还在数据指标采集能力	
	基本原理是通过 HTTP 周期性抓取被监控组件的状态，任意组件只要提供对应的 HTTP 接口并且符合 Prometheus 定义的数据格式，就可以接入 Prometheus 监控
	大部分的监控对象都需要特定类型 exporter









