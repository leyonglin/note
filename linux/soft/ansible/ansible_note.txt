


github文档：https://github.com/ansible
官网文档：https://docs.ansible.com/
Ansible：批量操作 1.自动化部署app   2.自动化管理配置项   3.自动化持续交付   4.自动化(AWS)云服务管理/
操作对象：1.hosts主机        2.networking网络设备
ansible依赖python，需要python版本2.6以上，执行ansible的主机一般称为主控端，中控，master/堡垒机，window不能作为主控端
组成部分：ansible-playbook,inventory,modules,plugins,api,ansible
管理方式:ad-hoc,ansible-playbook
命令执行来源:user -- ansible -- ansible-playbook -- CMDB(配置管理数据库)API调用 -- PUBLIC/PRIVATE CLOUD API调用 
查看主机列表：ansible web[all] --list[--list-host]      显示web组的主机
查看主机信息：ansible git -m setup [-a 'filter="ansible_hostname"']    过滤支持通配符*

相关文件：
/etc/ansible                 默认配置目录   
1.ansible.cfg                默认主配置文件，配置ansible工作特性   
2.hosts(host-pattern)        默认主机清单(Inventory)
3.roles                      默认存放角色的目录

总结：
playbook语法进阶：vars(变量)，error，handlers(notify)，when,register，with_items(迭代)，with_nested(迭代嵌套，还有其他with_*)，tags，Template模板，include and roles
                  block(块任务) 1.when(条件成立执行) 2.rescue(block执行错误触发) 2.always(无论结果如何都触发)    注意：block没有with_items属相
				  https://www.cnblogs.com/v394435982/p/5593274.html
role：一级目录: ansible-playbook.yml文件(roles任务指定执行顺序) + 'roles'目录				  
      二级目录：roles子目录(自定义名称,在一级yml文件中指定)
	  三级目录：目录：defaults , handlers , meta , tasks , templates , tests , vars ,  文件：README
	  四级目录：main.yml文件(统一)和附加的(在当前main.yml定义include *.yml)


hostvars 可以让你调用其他host的变量和facts,  即使你没有在这个机器上执行过playbook, 你仍然可以访问变量, 但是不能访问facts. 例如: {{ hostvars['test.example.com']['ansible_distribution'] }}
group_names 当前host所在的group的组名列表.   包括其父组
groups 所有组包括组中的hosts
inventory_hostname 配置在inventory文件中当前机器的hostname
play_hosts 执行当前playbook的所有机器的列表
inventory_dir inventory文件的路径
inventory_file inventory文件的路径和文件名
role_path 当前role的路径	  
	  
	  
	  
一.全局配置ansible.cfg
inventory(财产清单)=/etc/ansible/hosts
 

二.主机管理HOSTS
inventory参数：ansible_ssh_user="root"(连接用户)  ansible_ssh_pass="a"(连接密码)    ansible_ssh_port(连接端口)  
			   ansible_connection(与主机的连接类型,默认ssh)   ansible_ssh_private_key_file(私钥文件,适用于多个密钥情况)
			   ansible_shell_type(目标系统的shell类型sh/csh/fish)  ansible_python_interpreter(目标主机python路径,适用于多个Python)  
			   
[web]                              组名
web1
web1:222                               主机名
web[1:50]                          相似主机名
1.1.1.1                            ip
web1                               设置账号密码

[web0]                             组名
web2  ansible_ssh_pass="a"         带参数的组名      

[web:vars]                         为组设置变量
ansible_ssh_user="root"            参数
ansible_ssh_port="22"              参数

[all:children]                     以组名为元素
web                                组名

ansible Inventory包含静态和动态的Inventory
静态：/etc/ansible/hosts
动态：通过外部脚本(json格式)获取主机列表，按照其要求格式返回给ansible命令
注意：主机部分必须是列表格式，Hostdata行，其中的"hosts" 部分可以省略，但使用时，必须时"hosts"
例如：ansible-hoc 通过-i参数可指定自定义动态主机清单文件
cat ansible_host.py
#!/usr/bin/python
import json
hostlist={}
hostlist["git"]=["192.168.126.133"]
hostlist["192.168.126.131"] = {
        "ansible_ssh_user":"root","ansible_ssh_pass":"pwd"
        }
hostlist["ansible"]={
        "host":["192.168.126.133"],
        "vars":{
               "ansible_ssh_user":"root","ansible_ssh_pass":"pwd"
        }
}
print(json.dumps(hostlist))

  chmod 755 ansible_host.py

json语法规则：基于文本独立于语言的轻量级数据交换格式
#表示注释
数据在名称/值对中        
数据由逗号分隔     
大括号保存对象           
中括号保存数组  
         
{ "诗人":
  [{"李白":"诗仙","年代":"唐"},
   {"杜甫":"诗圣","年代":"唐"}
  ]
}


YAML基本语法：一个可读性高，用来表达数据序列的格式
#表示注释
YAML的结构通过空格来展示
数组使用"-"来表示
键值对使用":"来表示，后面必须有一个空格
固定的缩进风格来表示数据层级结构关系
一般每个缩进级别由两个以上空格组成
注意：1.只能使用空格，不能使用tab     2.同一层次缩进必须对齐

"诗人":
  -
     "李白": "诗仙"
	 "年代": "唐"
  -  
     "杜甫": "诗圣"
	 "年代": "唐"
	 

jinja2是基于python的模板引擎，包含变量和表达式两部分，两者在模板求值时会替换为值，模板还有标签，控制模板的逻辑
playbook的模板使用python的jinja2模块来处理
jinja2模板的基本语法：
模板的表达式都是包含在分隔符"{{}}"内的
控制语句都是包含在分隔符"{% %}"内的
模板支持注释，包含在分隔符"{# #}"内，支持块注释
字符串：使用单/双引号
数字：整数和浮点数(小数)
列表：[item1,item2..]
元组: (item1,item2..)
字典：{key1:value1,key2:value2..}
布尔型:true/false
算术运算：+ - * /  //(取整) %(取余)  **       --->  {{}} 
比较操作： ==  !=  >  >=  <  <=               
逻辑运算:  and  or  not  
流表达式：For  If  When

调用变量{{varname}}
计算    {{2+3}}
判断    {{1 in [1,2,3]}}

模板控制语句
{% if name == '诗仙' %}
   李白
{% elif name == '诗圣' %} 
  {% for method in [a,b,c] %}  
    {{do method}}
  {% endfor %}
{% else %}  
   李贺
{% endif %}
   
jinja2过滤器
变量可以通过过滤器修改，过滤器于变量用管道符号(|)分割，也可以用圆括号传递可选参数，多个过滤器可以链式调用，即前一个过滤器的输出会被作为后一个过滤器的输入
帮助文档：http://docs.jinkan.org/docs/jinja2/
          http://docs.jinkan.org/docs/jinja2/templates.html#builtin-filters 
   

自定义配置文件：1.创建自定义(myansible)目录    2.创建配置文件ansible.cfg --- [defaults]  inventory=myhost    
				3.配置主机文件myhost    4.进入自定义配置目录执行命令  

常用程序：
1.ansible(ad-hoc)                                                用于临时性工作
2.ansible-doc -l[-a] / ansible-doc [-s] 模块名                   查看ansible模块的文档
3.ansible-console												 交互式工具
4.ansible-galaxy                                                 管理roles的工具/上传或下载优秀代码
5.ansible-playbook												 批量管理操作，主机剧本
6.ansible-vault                                                  管理加/解密yml文件
7.ansible-pull                                                   有两种工作模式pull/push，默认使用push模式，适用于大批量机器需要配置，效率几乎无限提升，但灵活性稍有欠缺


Ansible <host-pattern> [-m module] [-a args] [-v]
--version   -vv -vvv      -T超时时间  {-u远程执行用户 -k}  {-b sudo -K(sudo)}
host-pattern支持ip ，组名 ，all ，通配符 ，'ip1/组名:ip2' ，':&(并集)' ，':!' ，综合逻辑 ， 正则
[普通用户可通过授权得到高权限，sudo，可设置nopasswd]  [echo export EDITOR=vim >> /etc/profile.d/vim.sh -- source /etc/profile  -- visudo]


ansible all -m ping  :  ping模块，回应pong,使用ssh协议
执行过程：1.加载配置文件  2.加载对应模块  3.生成临时文件并传送到远程服务器  4.加+x执行权限  5.执行并返回结果  6.删除临时文件
把ping转换成python脚本，放到~/把ping转换成python脚本，放到~/.ansible/tmp目录下面，再复制到远程~/.ansible/tmp目录下面，在远程主机上执行脚本
 
执行输出结果为JSON格式
执行结果状态：在配置文件里面有定义，每个版本默认的可能不一样
绿色代表执行成功并且无改变操作
黄色代表执行成功且系统状态发生改变/执行结果错误
红色代表执行失败             

ansible  all  -m  model_name  -a  "argument"
查看模块名：ansible-doc [-s] 模块名
模块：默认是command                         命令行执行命令，对特殊符号支持性差
      shell模块                           类似command，但对特殊符号支持性强
      script模块                          自动复制本机脚本到运程运行脚本
	  cron                                计划任务
	  fetch                               从远程拉取单文件到本机服务器，多文件需要打包
		   copy                             复制文件到远程，加参数可自定义权限和备份/创建文件并写入内容		   
		   archive/unarchive                压缩/解压
		   file                             设置文件属性，创建d/f/l 
		   hostname                         修改主机名
		   yum                              管理软件包
		   service                          管理服务
		   user                             管理用户
		   group                            管理组


Ansible-galaxy:管理roles的工具/上传或下载优秀代码(下载默认存放在/etc/ansible/roles目录下)        参考文档:https://galaxy.ansible.com
查看：ansible-galaxy list    [geerlingguy.docker]
下载：ansible-galaxy install geerlingguy.docker
删除：ansible-galaxy remove  geerlingguy.docker

Ansible-vault：管理加/解密yml文件
ansible-vault [encrypt|decrypt|view|edit|rekey|create] playbook.yml

Ansible-console:交互式工具
执行ansible-console --- root@all (3)[f:5] --- 当前用户@所有主机 (主机数量)[并发进程]
1.进入对应hosts：cd 组名/ip   2.修改并发：forks 10     3.查看用法：？  4.查看受影响主机：list  5.执行命令： 模块 参数  



Ansible-playbook
ansible-playbook [options] playbook.yml [playbook2 ...]
查看命令：
ansible-playbook --syntax-check playbook.yml                   检查playbook语法
ansible-playbook playbook.yml --list-hosts                     显示受影响的主机
ansible-playbook playbook.yml --limit ip/组名                  限制受影响的主机
ansible-playbook playbook.yml --list-tasks                     显示工作的task
ansible-playbook playbook.yml --list-tags                      显示将要运行的tag
ansible-playbook -C/--check  playbook.yml                      测试运行


编写playbook，使用ansible，调用有一个/多个play，一个play之间有一个/多个任务tasks，有顺序，调用1个模块/插件，查看主机清单，通过ssh连接主机
一个tasks里面相同字段只能有一个，不然会提示重复，仅执行最新的字段。


playbook构成：
Target：定义将要执行playbook的远程主机组
Variable：定义playbook运行时需要使用的变量
Tasks：定义将要在远程主机上执行的主机列表
Handler：定义task执行完成以后需要调用的任务

playbook语法格式：
由YAML语言编写，遵循YAML标准
一个playbook有一到多个play组成
play中hosts,variables,roles,tasks等对象的表示方法都是键值中间以": "分隔表示
文件开始都是 ---

cat user.yml
---
- hosts: all/组名/ip
  remote_user: root
  tasks:
   - name: create user debang                              一个name只能调用一个模块    
     user: group=wheel uid=1000 name=debang	 
   - name: modify user passwd
     shell: echo debang | passwd --stdin debang 
 
ansible-playbook user.yml  -f 5 

   
1.hosts行，如果是多个主机的patterns，以逗号为分隔符  2.并发进程数量为5(默认为5)   3.remote_user帐户名  
4.每一个play包含了一个task列表，多个task列表顺序执行                                      

playbook语法进阶：vars(变量)，error，handlers(notify)，when,register，with_items(迭代)，with_nested(迭代嵌套，还有其他with_*)，tags，Template模板，include and roles
                  block(块任务) 1.when(条件成立执行) 2.rescue(block执行错误触发) 2.always(无论结果如何都出发)    注意：block没有with_items属相
				  https://www.cnblogs.com/v394435982/p/5593274.html

魔法变量：
groups 所有组包括组中的hosts
hostvars  调用其他host的变量和facts
group_names 当前host所在的group的组名列表.   包括其父组
inventory_hostname 配置在inventory文件中当前机器的hostname
play_hosts 执行当前playbook的所有机器的列表
inventory_dir inventory文件的路径
inventory_file inventory文件的路径和文件名
role_path 当前role的路径

---
- hosts: all/组名/ip
  remote_user: root
  vars:
   username: debang
  tasks:
   - shell: chage -d 0 {{username}}        执行命令行命令

设置用户密码：password={{'passwd'|password_hash('sha512')}}      因为shadow保存的密码都是经过加密的

error错误模块跳过处理(默认$?不为0则报错停止)：
1.  - shell: setenfore 0
      shell: /usr/bin/somecommand || /bin/true         跳过错误
2.  - name: run some command
      shell: setenfore 0
	  ignore_errors: True                              error模块跳过错误

handlers和notify结合使用触发条件,handlers与tasks是同一级别缩进的,notify与模块是同一级别的
handlers：是tasks任务列表，用于当关注资源发生变化时，才会采取一定的操作
Notify，相当于是一个模块缩进，可用于每个play的最后出发，避免多次有改变发生时执行同样操作，同一服务只会触发一次，在notify中列出的操作称作handler，即notify中调用handler中定义的操作

register变量注册:使用register模块来保存前一个命令的返回状态，在后面进行调用

tags:给tasks起一个标签，在执行playbook的时候，添加参数-t可仅执行对应tasks任务
参数：[-t TAGS, --tags=TAGS]  [--skip-tags=SKIP_TAGS]  [--start-at-task=START_AT]

cat test.yml
---
- hosts: git
  remote_user: root

  tasks:
    - name: install
      yum: name=httpd
	  tags: httpd                                               为tasks添加一个tags标签，一个标签可定义多个动作
    - shell: uptime |awk '{print($(NF-2))}'| sed 's/,//'
      register: result                                          保存命令的执行结果/返回状态，在后面可以调用	
    - name: copy
      copy: src=/etc/ansible/httpd.conf dest=/etc/httpd/conf 
	  tags: httpd                                               一个标签可定义多个动作
      notify:                                                   可触发多个handlers，以name区分
       - restart service     
       - check service 
    - name: start service
      service: name=httpd state=started enabled=yes
	  tags: rehttpd
      when: result.stdout|float > 0.5                             调用上面的执行结果,并超过一定值的时候进行特殊处理                                            
	  
  handlers:                                                       定义handlers
    - name: restart service
      service: name=httpd state=restarted
    - name: check service
      shell: kill -0 httpd


ansible-playbook test.yml               修改httpd配置文件，重新执行ansible-playbook,copy任务的执行(修改)会触发服务的重启

ansible git -m server -a "name=httpd state=stopped"
ansible git -m shell -a "ss -antlup"
ansible git -m yum -a "name=httpd state=absent"
ansible git -m shell -a "rpm -q httpd"
ansible-playbook -t installhttpd,rehttpd   test.yml           仅执行tags标签对应的tasks任务，多个标签以逗号隔开

优先级：命令行 > 当前playbook定义的变量普通变量 > 当前playbook定义的变量全局变量 > 主机清单(由近及远)
1.变量名：由字母开头，仅能由字母，数字，下划线组成
  来源：ansible setup facts 远程主机的变量都可直接调用
  ansible git -m setup [-a 'filter="ansible_hostname"'] --- 过滤支持通配符*，这些变量可直接调用
2.在/etc/ansible/hosts中定义：
  普通变量，主机组中主机单独定义，优先级高于公共变量
  公共变量，针对主机组中所有主机定义统一变量
3.通过命令行指定变量，优先级最高
  ansible-playbook -e varname=value
4.在playbook中定义
  vars:
    - var1: value1
    - var2: value2
5.在role中定义

	
cat playbook.yml
...
  vars:
    - pkname1: httpd
	- pkname2: vsftpd
  tasks:
    - name: install
      yum: name={{ pkname1 }}                                 
    - name: start service
      service: name={{ pkname2 }} state=started enabled=yes

ansible-playbook -e 'pkname=vsftpd' playbook.yml              命令行指定变量值，多个变量空格隔开
ansible-playbook  playbook.yml                                playbook已经指定变量值

在/etc/ansible/hosts中定义：
[test1]
1.1.1.1 http_port=81       端口不一样，同时在playbook上就可以调用{{http_port}}
[test1:vars]               针对整个主机组设置变量
domainname=lly.com         在playbook上就可以调用{{domainname}}

另起文件存放变量：         
cat vars.yml
var1: httpd
var2: vsftpd
playbook调用变量：
cat test.yml
...
  vars_files:  
    - vars.yml
  ...

Template模板(是一个仅用于playbook的模块)：用法参看上面jinja2模板引擎
mkdir templates
mv /etc/nginx/nginx.conf  templates/nginx.conf.j2

cat nginx.conf.j2
worker_processes  {{ ansible_processor_vcpus*2 }}

cat template.yml
...
  tasks:
  - name: copy template
    template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf            类似copy用法，使用ansible-doc template了解更多

template for it:模板控制语句
cat temnginx.yml
...
  vars:
    ports:
      - 80                                  这里可以是键值对,如listen_port: 80 对应模板也需要改(键值对是可以嵌套的)
      - 81                                                     listen_port: 81
  tasks:
    - name: copy conf
      template: src=for1.conf.j2 dest=/data/for1.conf

cat templates/for1.conf.j2
  {% for port in ports %}                    取上面的一组字符串或一组键值对
  server {
     listen {{ port }}                       1.如果变量是键值对，port改成：port.listen_port  2.嵌套的时候不一定键值对数量一致，使用{% if p.name is defined %} content {% endif %} 进行差异生成
  }
  {% endfor %}

生成结果
server{
   listen 80
}
server{
   listen 80
}


When判断：根据变量/任务执行结果作为前提条件，判断某个name是否执行(判断系统/软件版本，cpu...)
在task后添加when子句即可使用条件测试，支持jinja2表达式语法
...
  tasks:
    - name: "shutdown"
      shell: /sbin/shutdown -h now
      when: ansible_os_family == "RedHat"             判断条件是否成立，成立则执行name模块，双引号一定要加

with_items:迭代，执行重复性执行的任务
对迭代项的引用，固定变量名为"item"
要在task中使用with_items给定要迭代的元素列表，列表格式：1.字符串  2.字典
...
  tasks:
    - name: create some file
      file: name=/root/{{ item }} state=touch
      with_items: ["file1", "file2"]                   

    - name: install package
      yum: name={{ item }}
      with_items:
        - httpd

迭代嵌套自变量：
...
  tasks:
    - name: create some user
	  user: name={{ item.name }} group={{ item.group }} state=present
	  with_items: 
	    - { name: 'user1', group: 'group1' }
        - { name: 'user2', group: 'group2' }


with_items是playbook标准循环，可以用于迭代一个列表或字典(结果有点问题)
---
  vars:
    un: [a, b, c]
    id: [1, 2, 3]
  tasks:
    - name: echo
      shell: echo {{ item }} >> id.txt
      with_nested:
        - "{{ un }}"
        - "{{ id }}"


Roles：模块化。用于层次性，结构化的组织playbook。roles能够根据层次型结构自动装载变量文件，tasks以及handlers等，使用roles只需在playbook中使用include指令即可
       通过将变量,文件,任务,模板及处理器放置于单独的目录中，并通过include加载的一种机制。
场景：复制场景，建议使用roles，代码复用度高

roles目录结构：1.playbook.yml   2.roles  2.1project   2.2tasks  2.3files 2.4vars  2.5 default  2.6templates  2.7handlers  2.8meta
根据需要，创建响应的目录与playbook.yml文件
可以借助ansible-galaxy,下载他人的roles进行学习

执行playbook.yml文件
cat nginx_role.yml
--- 
- hosts: git
  remote_user: root
  vars:
    git_install_from_source: false
    git_install_path: /usr/local

  pre_tasks:
    - name: Update apt cache.
      apt: update_cache=true cache_valid_time=600
      when: ansible_os_family == 'Debian'
      changed_when: false

  roles:
    - role: nginx                                                                              可执行多个roles
	- { role: nginx, tags: "web" }                                                             添加标签
    - { role: nginx, tags: ['web','nginx'] }                                                   为httpd添加两个标签
    - { role: nginx, tags: ['web','nginx'],when: ansible_distribution_major_version == "7" }   条件


tasks/main.yml：include指令定义顺序加载
cat main.yml
- name: Ensure git is installed (RedHat).
  package:
    name: "{{ git_packages }}"
    state: present
    enablerepo: "{{ git_enablerepo | default(omit, true) }}"
	
1.
- include: playbook.yml user=w                              在这里也可以指定变量值,其它的也一样include进来
  	
2.	
- import_tasks: install-from-source.yml                     调用，相对路径，跨项目调用也可以(从roles目录写起，例:roles/httpd/tasks/copyfile.yml)
  when: git_install_from_source

     
 
优化：关闭ssh的DNS查询
      打开ansible配置文件的 1.host_key_checking = False 2.log日志
      使用通用的ssh协议，优点是简单省事，缺点是不是针对ansible开发优化过的，效率慢。需要提高效率，可以装专用的服务端与客户端，走特有协议，可以自动化安装。
	  关闭获取gather_facts，在 playbook的(remote_user: liheng下一行)文件中加上“gather_facts: no”即可
	  如果不使用 sudo，建议在配置文件中开启pipelining。 修改 ssh 客户端就行，ControlPersist即持久化 socket，需高版本openssh
图形化：ansible tower 



