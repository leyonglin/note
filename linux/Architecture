
https://www.bilibili.com/video/BV1L4411K7hW?p=12

原理---业务流程：

框架的选择：1.可拓展性  2.稳定性
    拓展：1.功能模块拓展   2.节点拓展

机器配置：1.物理机或云主机   2.资源需求(存储量*副本*预留比例)
    机器规划：1.集群规模  2.软件部署

技术选型
  数据采集传输：
  	flume+kafka：采集日志+削峰
  	sqoop：导出mysql数据
  	elk：
  	datax：
  数据存储：
  	mysql：查询快，存储少，存储分析完指标用于可视化
  	hdfs：查询慢，存储量大，存储所有数据
  	hbase：非关系型分布式的、面向列的开源数据库
  	redis：
  	mongodb：爬虫数据
  数据计算：
  	hive：速度慢，存储在hdfs，但能得出结果
  	tez：内存中运算，受限于内存
  	spark：内存中运算
  	flink
  	storm
  数据查询：
  	presto：即时查询
  	druid
  	impala
  	kylin
	
用户业务数据：一般存储在db数据库中，存储量小
用户行为数据：一般存储在文件中，存储量大(使用产品过程行为)

即席查询（Ad Hoc）是用户根据自己的需求，灵活的选择查询条件，系统能够根据用户的选择生成相应的统计报表
普通应用查询的应用查询是定制开发的

埋点数据基本格式：
	公共字段
	业务字段
	拓展字段：备用
	
	
基测和压测	
	
参数调优
	
	
	
腾讯白皮书
公有云文档	
	
linux内核缓存架构

scp rsync p2p（Murder 在生产环境中分发大软件包的应用）	
	
redis leveldb ssdb

ceph：http://docs.ceph.org.cn/
将元数据和block数据分开，如果元数据丢失，数据就无法找回	
glusterfs(分布式程序，使用感觉是模拟raid)	
	
	
#########################################################################################

自动化：
  标准化  规范化 流程化  文档化 
  工具化
  web平台化
  智能化：自动扩缩容，服务降级，故障自愈


安裝：二进制安装  编译安装
配置：网络  路径  容量  性能  安全  功能  日志
启动：systemctl  ./cmd  nohup  screen
管理
优化


缓存：用户层（浏览器缓存+dns缓存）--- 代理层 --- web层（opcache+组件缓存） --- 应用层 （本地缓存+页面定期生产静态页面） --- 数据层（redis+mysql） --- 系统层（系统调优） -- 硬件（cpu缓存+内存+磁盘）
cache 读缓存     buffer 写缓存


ls -d [a-z]*
mkdir type{1,2}/exd{1,2}


lsof -n -i:4505	
	
	
##################################################################################### 
	
	
time_wait调优

socket

监听一个端口
nc -l -4 -k -p 9999
nc ip port
echo haha > /dev/tcp/ip/port

内核调优：/proc/sys/*
echo "1" > /proc/sys/net/ipv4/tcp_tw_re
cat /proc/sys/net/ipv4/ip_local_port_range


echo "This is Test" | socat - /tmp/hello.html
与socket交互
echo "help" | socat stdio /var/lib/haproxy.socket

	
	
########################################################################


iaas：操作系统部署好的  
paas：应用程序部署好，自定义代码和管理数据  
saas：账号级别---只要邮件账号就可以使用，不用管理代码和数据

桌面虚拟化：瘦客户机
应用程序虚拟化	
	
kvm是一个内核模块
qemu是一个虚拟化软件，虚拟化出除cpu和内存之外的资源,有一个xml配置文件描述虚拟机配置给libvirt用	
libvirt是管理kvm的工具(xen,vmware...)	
	

创建虚拟机：
镜像	
qemu-img命令：创建硬盘
virt-install命令：  安装虚拟机

管理虚拟机：
tightvns工具：可以连接virt-install启动的虚拟机
virsh命令：管理虚拟机

openstask：
keystone:用户认证和服务注册
glance：镜像服务(镜像可以根据官网制作一个)
nova：计算(调度)服务，分控制和计算节点
neutron：网络，分控制和计算节点

openstask给新创建虚拟机传输秘钥：通过url下载下来的。url路径不是虚拟机绑定的网卡，那么需要路由(命名空间)。

超配

consul
ambari

	
	
###############################################################################

https://github.com/liquanzhou/ops_doc	

###############################################################################

https://www.bilibili.com/video/BV15J411T7WQ?p=110	



死锁：两把锁，A有B锁需要A锁。B有A锁需要B锁
解决方法：1.重构  2.设置超时释放锁

观察者模型，广播，发布订阅(警察抓小偷，小偷行动时主动通知警察)
生产者与消费者：即两个线程之间的通信

进程：系统资源分配的最小单位，涉及到了状态的保存，分配CPU去执行进程称之为调度，进程状态的记录，恢复，切换称之为上下文切换
#一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程，cpu分配给线程，即真正在cpu上运行的是线程，线程是最小的执行单元，进程是最小的资源管理单元
线程的出现是为了降低上下文切换的消耗，有共同都需要拥有的东西
协程是一种用户态的轻量级线程
#一个线程，协程看上去也是子程序，但执行过程中，在子程序内部可中断，然后转而执行别的子程序，在适当的时候再返回来接着执行

属性/方法在运行时的动态替换，叫做猴子补丁（Monkey Patch）。



###################################################################################

django

https://www.bilibili.com/video/BV1rx411X717?p=23

MVC是软甲架构风格，不是标准(非必须)


错误查看：
    调试模式/看日志
	   看第一部分和最后部分

orm：orm代码--生成中间文件--执行中间文件创建数据库

级联（cascade）在计算机科学里指多个对象之间的映射关系
数据级联：
    1对1   两个表的两个主键
    1对多  两个表一个主键一个外键
    多对多 三个表，主键+临时表(购物车)+主键
声明关系(外键)的一方是从表(主表删数据默认从表会一起删cascade，可以设置属性protect,set_null等)


可以根据model生成表，也可以根据表生成模型

crud：增加(Create)、读取(Read)、更新(Update)和删除(Delete)

重量级：内置多种功能
兼容性强：多种条件都适用

python虚拟环境

如何让django知道自己写的类：继承

nested：嵌套
throttle：节流
decorate：装饰器

重写
增量super：
封装wrapper：将相同的东西封装(成父类)
继承inherit：子类继承,自动获得父类的属性和方法
模型继承：继承父类的字段

分页器：https://www.bilibili.com/video/BV15J411T7WQ?p=258

中间件其中一个作用：将两端输出输入数据进行格式化
懒查询：转化成sql语句，待获取结果是才会查询

最优匹配和匹配即停止

处理未知事件：目标--结果 推测条件(pycharm条件有提示) 
grades=Grade.objects.filter(student_s_name='jack')  #结果是班级，条件是学生

反向解析：namespace + name   #{ % url namespace:name 参数 参数 ... % }

双R：request和response
获取客户端输入数据：
    post：form
    get：
    meta

cookie：客户端存储用户信息
cookie+session：客户端存储sessionID+服务端存储sessionID映射的用户信息
token：唯一。客户端存储token(不一定通过cookie存储)+服务端存储token映射的用户信息

缓存：
	内存数据库
	数据库缓存---缓存级联少的表
	

aop中间件：在request到response过程中，嵌入功能处理模块
调用顺序：没有返回会依次执行
切点：何处。
切面：数据，在何时何处完成其功能。
#装饰器

富文本：网页的文本编辑器(就像word文档一样)，原理是自动渲染成html格式传递给服务器

文件拓展名：是一种标记而已

网站流量统计工具	

程序调试：
   打印日志
     print 
	 log--logging
   debug
     断点调试
   统计工具
   djangodebugtoolbar

同步：依赖，单个任务按顺序执行，执行完成才进行下一个任务执行
异步：多个任务一起执行，不一定哪个任务先执行完成

购物车：https://www.bilibili.com/video/BV1rx411X717?p=92


生成器，迭代器，装饰器，描述器

nginx部署django项目：nginx进程(静态资源) 反向代理到 uwsgi进程(非静态资源)    #uwsgi和php是一样的
# 常用的WSGI容器有Gunicorn和uWSGI，django自带wsgi.py配置文件
	

#视图一般是用函数实现	
类视图：视图用类实现    #类视图和restful搭配很好		
	
导入python packet可以做成可插拔式的   #在__init__.py中注册	

序列化：基于通讯的需求，将数据转化成另一种格式
反序列化：

restful：写一个满足下列条件的接口
    直观简短的资源地址：URI，比如：http://example.com/api/resources。
    传输的资源：Web服务接受request与返回response的互联网媒体类型，比如：JSON，XML，YAML等(可以自己写或使用序列化工具)。
    对资源的操作：Web服务在该资源上所支持的一系列请求方法/函数（比如：POST，GET，PUT或DELETE）

https://www.django-rest-framework.org/
restframework(前后端分离)：1.正常创建model.py  2.创建view(UserAPIview)  3.创建serializers.py   4.创建路由	

https://docs.celeryproject.org/en/stable/	
celery：使用消息队列  1.异步任务  2.定时任务	


##################################################


https://www.djangoproject.com/download/
https://docs.djangoproject.com/en/2.2/



命令：
pip install virtualenvwrapper
pip install virtualenv

source /usr/local/bin/virtualenvwrapper.sh 
mkvirtualenv GP1 -p /usr/bin/python3
python
deactivate 
workon GP1

pip install Django==1.11.7
pip freeze

django-admin startproject HelloDjango
cd HelloDjango/
django-admin startapp App
#python manage.py startapp App
tree .
cat App/apps.py 
python manage.py runserver



快捷键：
html：
    h3
	ul>li
	ul*5
	ul>li*5
	li.id*4 
	img
py：
    alt + enter      自动导包
	Ctrl + p         提醒
	Ctrl + /         注释
	shift + f6       重命名
	Ctrl + N         快速查找
	Ctrl + 鼠标左键  定位
	.re              快捷生成return
  返回：
	HttpResponse
	render
	
	
	
model：生成迁移文件---执行迁移文件
python manage.py makemigrations
python manage.py migrate
  创建库：create database Model2 charset=utf8;	
  查询：Class.objects.filter(p_age__in=)   


model.py
from django.db import models

class AnimalManager(models.Manager):
    def get_queryset(self):
        return super(AnimalManager, self).get_queryset().filter(is_delete=False)

class Person(models.Model):
    p_name = models.CharField(max_length=16, unique=True)
    p_age = models.IntegerField(default=18, db_column='age')
    p_sex =models.BooleanField(default=False, db_column='sex')
    #新添加一个字段需要重新生产迁移文件并执行迁移文件
    p_hobby = models.CharField(max_length=32,null=True,blank=True)

    objects = AnimalManager()
	
    @classmethod
    def create(cls,p_name,p_age=100,p_sex=True,p_hobby='gaming'):
        return cls(p_name=p_name,p_age=p_age,p_sex=p_sex,p_hobby=p_hobby)
		
    class Meta:
        db_table = 'People'




#############################################################################################


https://www.bilibili.com/video/BV1i7411G7vm?p=49



NTFS权限：使用不同用户访问不同权限，配额 ，大文件
Windows Preinstallation Environment（Windows PE），Windows预安装环境，是带有有限服务的最小Win32子系统

域：domain
内网环境：
    工作组：人人平等
	域：人人不平等，集中管理
组成：
    域控制器
    成员机	
	
pki：加密技术	

远程爆破：	
https://www.bilibili.com/video/BV1i7411G7vm?p=46
真空密码字典生成器	/  亦思社会工程学字典生成器
nmap扫描 + hydra爆破	
灰鸽子远程控制(后门)

本地爆破：
漏洞是利用系统执行过程的数据篡改
   例如异常是执行某个程序(提前修改)	
进入pe系统 替换密码文件(原系统变成普通盘)   

ettercap：



收集信息：
资产：nmap
域名：whois
子域名爆破
  dig axfr @8.8.8.8 baidu.com
  dnsrecon
  dnsenum
web服务器信息
  netcraft
  wappalyzer
扫描漏洞
  openVAS
  AWVS


	
	
	