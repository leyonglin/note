 
  案例：http://tldp.org/LDP/abs/html/
  调试器：https://www.runoob.com/try/runcode.php?filename=helloworld&type=bash
  
  shell是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务
      为使用者提供操作界面”的软件（命令解析器）用于接收用户命令，然后调用相应的应用程序
      分两类：
	      图形界面shell（Graphical User Interface shell 即 GUI shell） 
		  命令行式shell（Command Line Interface shell ，即CLI shell）
	  交互式shell和非交互式shell	  
  shell脚本（shell script），是一种为shell编写的脚本程序
  shell环境：sh bash csh ksh
  解释型的，一边解释一边执行，连PHP那种预编译都不是，如果你的脚本包含错误(例如调用了不存在的函数)，只要没执行到这一行，就不会报错
  在CentOS里，/bin/sh是一个指向/bin/bash的符号链接，sh和bash是脚本解释器
 
  全局变量的作用范围是当前的Shell会话，每个Shell会话都是独立的进程，拥有不同的进程ID
  在调试脚本的时候，使用source会更好点，因为有些如进程完成状态才会显示
 echo参考：https://blog.csdn.net/xinquanv1/article/details/100111880
 ANSI控制码表:https://blog.csdn.net/sb___itfk/article/details/46534723
 echo  -e  "\\abc$1bb\vTecmint\vis""\n##########\n""abc$1bb\\vTecmint\vis""\n##########\n""\n\vTecmint \n\vis""\n##########\n""Tecmint \ris""\n##########\n""community \cof""\n##########\n""\\\n"
			    #\b  \n  \f  \t  \r  \\  \e(Esc键) \a(输出警告音) \v(\n+单词结尾位置开始) \c(把后面的删了)
		   "\033[x;x;..mtest\033[x;x;..m"
				#ANSI控制码开始的标志都为ESC[，ESC对应ASCII码表的033(换码(溢出))
				#三种类型：40-47背景 30-37字体   0/1/4/5/7/8下划线等特殊效果(一二部分可叠加)
				#在第一部分则表示作用于内容，在第二部分则表示作用于PS1
				#每一部分依赖于该部分最后一个值，即靠近m的那个值
				#第二部分使用个位数和40-47，3系类类型没有效果
				#当出现类型冲突，以最后一个为主
		   "\040" "\0101"   
				#8进制，数字对应ascii表，只有033能用于颜色定义(ANSI控制码)
		   "\x3D"
				#16进制，数字对应ascii表
  echo $((2#11010))   	    #其它进制转换成10进制
  echo "obase=16;15"|bc     #十进制转换成其它进制
  echo -e "\033[?25l"  #隐藏光标
  echo -e "\033[?25h"  #显示光标
  stty -echo    #擦除回显
  stty echo     #打开回显
  
 对于管道组合的多个命令，它们都会放进同一个进程组中，会进入子shell执行相关操作。当执行完毕后，进程组结束，子shell退出。而子shell中设置的环境是不会粘滞到父shell中的(即不会影响父shell)				
 
 seq [-s +] [-w] 1 [2 10]  		 #for i in `seq 1 2 10`; do echo $i; done
 seq -f "dir%g" ["%03g"]  5
 
 printf '\x45\n'
 printf "%s [%s...]\n" a 1 b 2 c 3  # %-3.2f\n
 #printf "|%-5s|%-5s|%-5s|\n","id","name","ip" 和 printf "|%-5s|%-5s|%-5s|\n" id name ip 是不一样的  #要注意shell终端(空格为分隔符)和awk(,为分隔符)不一样
 grep -i(忽略大小写) -v(取反) -n(显示行数) -c(统计) -o(仅输出匹配关键词) -ABC(上下文) -w(匹配单词) -e(支持正则) -q(静默)   (grep(基本正则) egrep(正则) fgrep(速度快不支持正则))
 grep -n '[^[:lower:]]oo' regular_express.txt
 egrep -n 'o\{2\}' regular_express.txt
 
 批量注释： :<<'#'  command  #
 ！！！脚本是重复改变但有规律的事情，例：pool${i}/config/.git
 man bash 如果写shell脚本一定要提前阅读该说明
 
 debug模式：
 1.
 #!/bin/bash   或者 #!/usr/bin/env bash
 set -n		   判断执行脚本是否有错误(实际不执行)
 set -e        执行错误即退出(man bash查看该命令错误的定义)
 set -x        输出执行代码(变量会被替换)与执行结果（按命令执行顺序逐条输出+）
 set -v        输出执行的命令（输出即将要执行的代码块）
               shellcheck,不写进代码行中,代码检测网站https://www.shellcheck.net/，也可以下载命令行，并且可以集成到编辑器中(但是效果并不是很好)
 			  变量操作(man bash  全文查找Parameter Expansion)
               函数中，局部变量加local
               trap信号(trap sighandler INT)
 			  https://explainshell.com/执行过程
 2. 
 sh [-nvxe] scripts.sh

 exit和return的区别: 1. exit用于结束正在运行的整个程序，它将参数返回给OS，把控制权交给操作系统；而return 是退出当前函数，返回函数值，把控制权交给调用函数。 2. exit是系统调用级别，它表示一个进程的结束；而return 是语言级别的，它表示调用堆栈的返回

 
 exec 3<>hello.txt	        hello.txt以读写方式绑定到文件描述符"3"
 echo "hello exec"  >&3      写进文件描述符3(第一次覆盖，后面追加)，相当于写进hello.txt
 exec 3>&-  关闭写    exec 3<&- 关闭读
 
 exec 100>&1    将文件描述符100连接到标准输出    exec 1>hello.txt # 将输出重定向到文件hello.txt
 exec 1>&100 100>&- # 将标准输出连接到100    将描述符100关了
 a<b   表示从b重定向输入到a			  
			  
			  
 add_db_master_ip () {
 # add master db ip address, run in slave database server
     while true;do
         read -p "请输入主库所有IP地址:" db_master_ip
         read -p "主库IP地址为:$db_master_ip 确定吗(y/n)" db_master_ip_yn
         case $db_master_ip_yn in
         y|Y)
         dbmasterip=$db_master_ip
         break;;
         n|N)
         continue;;
         esac
     done
 }	
 
 
 for i in $ip;do
 expect << EOF
         spawn /opt/apps/mysql/bin/mysql -uroot -p -S /opt/data/data_16303/mysql.sock -e "    
         grant all privileges on gameplat_analysis.* TO 'gameplat_analysis_dev'@'$i' identified by 'xjVXkB>Q6JpB61r${rand_pass}';
         flush privileges;"
         expect "Enter password:" {send "9tN6GFGK60Jk8BNkBJM611GwA66uDFeG\r"}
         expect eof
 EOF
 done

#!/bin/bash
ip=192.168.3.67
mypassword=admin
mycommand=ls
# 向远程服务器请求打开一个telnet会话，并等待服务器询问用户名
expect << EOF
    spawn ssh $ip "touch expect"
    expect "password:" {send "$mypassword\r"} {send "exit\r"}     #这种有可能出现延迟
    
    spawn ssh $ip 
    expect "password:"     
      send "$mypassword\r"
    expect "#" #{ls"\r"}
      send "$mycommand\r"
      send "exit\r"
    expect eof
EOF

 
 #!/bin/bash
 file="/tmp/pack1.txt"
 while read -r pack
 do apt -y remove $pack
 done<"$file"             # 重定向stdin到文件$Filename
 		
read：-t 超时 -a用户的输入赋值给一个数组  -p提示语  -e支持文件自动补全
	#ps -ef|grep -v grep|grep nginx | while read u p o; do echo $p; done
	#export PROMPT_COMMAND=\
	 '{ msg=$(history 1 | { read x y ; echo $y ;});\
	 logger \"[$(who am i)]\":"[euid=$(whoami)]":[`pwd`]" $msg";}'
IFS：变量  ---  定义read的分隔符

		
		
 for i in "1 2"; do echo ${i}; echo ok; done		  #非关键字后面需要加;相当于执行多个命令
 
 1 2 == {1,2} == {1..2}#不支持变量
 
 
 基本教程：
 shell是指在Linux内核和用户之间的解释器程序，负责向内核翻译及传达用户/程序指令   cat /etc/shells
 
 bash特性：快捷键、tab补齐、命令历史、别名、标准输入输出、重定向、管道     (C+r)
 
 shell脚本:提前写好可执行语句，特定时候完成特定任务，顺序，批量处理，解释型程序
 
 查看变量：$变量名/${变量名}    失效unset
 
 变量类型：环境变量(大写)env/set  /etc/profile // ~/.bash_profile    
           位置变量$1..$n    
		   预定义变量$0 $$ $? $# $*("$1 $2 $3 $4") $@( "$1" "$2" "$3" "$4" ) $!(上一个进程的进程号) $-(是否交互) $_(在shell启动时，设置为用于调用的绝对路径名引起在环境或参数列表中传递时执行的shell或shell脚本。随后，扩展到上一个命令的最后一个参数)    
		   自定义变量
 shell变量的值默认视为文本，当进行数学运算，自动转换称整数
 
 ""  ''   ``==$()     ${数组/截取}
 
 read [-p提示语] 变量             stty -echo：
 
 local     export [-n取消]  
 eval即对结果多执行一遍（主要用在对参数的特殊处理上面的，例如转义和变量转变）
 #例1
 #name=woodie
 #cmd="echo Helllo $name\! "
 #echo $cmd && eval $cmd  
 #例2
 #aabbcc=alibaba a=aa b=bb c=cc  alibaba="hello world"
 #eval echo \$\$$a$b$c   &&   echo \\$\$$a$b$c   &&   eval echo \\$\$$a$b$c   &&   eval eval echo \\$\$$a$b$c
 
 计算：1.$[算式]或$((算式))   
	   2. let i++;echo $i 自增   
	   3.expr 算式(\*) 运算符两边需要空格，支持变量    
       4.小数：echo "scale=4;$a*56.56;5/3" |bc  --运算符也可换成比较符 
	let C=A+B
	let A++ #let 时 变量前不需要再加$
	echo $(($A+$B))
	echo $[$A+$B]
	expr $A + $B
	echo $A+$B | bc
 自增	
   1. i=`expr $i + 1`;
   2. let i+=1;
   3. ((i++)) 或者 ((i=i+1));
   4. i=$[$i+1];
   5. i=$((i+1))
	 
	 
 test 选项 参数 == [ 选项 参数 ]      查看帮助：help test
 
 测试的标志	代表意义
1. 关於某个档名的『文件类型』判断，如 test -e filename 表示存在否	
	-e	该『档名』是否存在？(常用)
	-f	该『档名』是否存在且为文件(file)？(常用)
	-d	该『档名』是否存在且为目录(directory)？(常用)
	-b	该『档名』是否存在且为一个 block device 装置？
	-c	该『档名』是否存在且为一个 character device 装置？
	-S	该『档名』是否存在且为一个 Socket 文件？
	-p	该『档名』是否存在且为一个 FIFO (pipe) 文件？
	-L	该『档名』是否存在且为一个链接
2. 关於文件的权限侦测，如 test -r filename 表示可读否 (但 root 权限常有例外)	
	-r	侦测该档名是否存在且具有『可读』的权限？
	-w	侦测该档名是否存在且具有『可写』的权限？
	-x	侦测该档名是否存在且具有『可运行』的权限？
	-u	侦测该档名是否存在且具有『SUID』的属性？
	-g	侦测该档名是否存在且具有『SGID』的属性？
	-k	侦测该档名是否存在且具有『Sticky bit』的属性？
	-s	侦测该档名是否存在且为『非空白文件』？
3. 两个文件之间的比较，如： test file1 -nt file2	
	-nt	(newer than)判断 file1 是否比 file2 新
	-ot	(older than)判断 file1 是否比 file2 旧
	-ef	判断 file1 与 file2 是否为同一文件，可用在判断 hard link 的判定上。 主要意义在判定，两个文件是否均指向同一个 inode 哩！
4. 关於两个整数之间的判定，例如 test n1 -eq n2	
	-eq	两数值相等 (equal)
	-ne	两数值不等 (not equal)
	-gt	n1 大於 n2 (greater than)
	-lt	n1 小於 n2 (less than)
	-ge	n1 大於等於 n2 (greater than or equal)
	-le	n1 小於等於 n2 (less than or equal)
5. 判定字串的数据	
	test -z string	判定字串是否为 0 ？若 string 为空字串，则为 true
	test -n string	判定字串是否非为 0 ？若 string 为空字串，则为 false。注： -n 亦可省略
	test str1 = str2	判定 str1 是否等於 str2 ，若相等，则回传 true
	test str1 != str2	判定 str1 是否不等於 str2 ，若相等，则回传 false
	==  !=
6. 多重条件判定，例如： test -r filename -a -x filename	（[ "$yn" == "Y" -o "$yn" == "y" ] && echo "OK）#-o在[]里面，&&和||在[]外面									
	-a	(and)两状况同时成立！例如 test -r file -a -x file，则 file 同时具有 r 与 x 权限时，才回传 true。
	-o	(or)两状况任何一个成立！例如 test -r file -o -x file，则 file 具有 r 或 x 权限时，就可回传 true。
	!	反相状态，如 test ! -x file ，当 file 不具有 x 时，回传 true
	&&  ||

 #Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试
 if true/false;then
 if [ ]; then CMD; fi                 #关键字换行就不用; 不换行需要在关键词前加；   
 if [ ]; then CMD; else CMD; fi
 if [ 条件判断式一 ]; then
 	当条件判断式一成立时，可以进行的命令工作内容；
 elif [ 条件判断式二 ]; then
 	当条件判断式二成立时，可以进行的命令工作内容；
 else
 	当条件判断式一与二均不成立时，可以进行的命令工作内容；
 fi
 
 for var in val; do CMD; done         #关键字换行就不用; 不换行需要在 关键词前 加； 
 c语言风格的for循环： for ((初值;条件;步长控制))       for ((i=1;i<=${#arr[@]};i++ )); do CMD; done
 
 while循环{
     # while true  等同   while :
     # 读文件为整行读入
     num=1
     while [ $num -lt 10 ]
     do
     echo $num
     ((num=$num+2))
     done
     ###########################
     grep a  a.txt | while read a
     do
         echo $a
     done
     ###########################
     while read a
     do
         echo $a
     done < a.txt
 }
 
 case $1 in 
 var1)
    CMD;;
 var2)
    CMD;;
 *)
    CMD[;;]
 esac  
 
 函数：
 1. function 函数名{
     CMD...
    }
 2.函数名() {
     CMD...
    }
 
 中断与退出：break n(默认为1，跳出当前循环(for、while、until))  continue终止本次循环，进行下一次，exit跳出脚本
 
 shift：造成参数变量号码偏移， shift 后面可以接数字，代表拿掉最前面的几个参数的意思（格式：shift n  #就当是命令执行）
 
 字符串截取：
 1.${var:起始位:长度}                    # 起始从0开始，0可省略 
 2.expr substrate "$var" 起始位 长度     # 起始从1开始
 3.echo $var | cut -b 起始位-结束位      # 起始从1开始，起始位-结束位 1可省略
 替换：
 一个：${var/old/new}  全部：${var//old/new}
 掐头(从左往右)：最短匹配：${var#*关键词}      最长匹配：${var##*关键词}        #/var/log/message
 去尾(从右往左)：最短匹配：${var%关键词*}      最长匹配：${var%%关键词*}
 ${var}	              变量，界定范围
 ${var:-word}	      如果var为空或者未设定，返回word，var不变
 ${var:=word}	      如果var为空或者未设定，返回word，且var=word
 ${var:+word}	      如果var有值，返回word，var不变
 ${var:?word}	      如果变量var为空或者未设定，返回word并退出shell，word没有值则输出：parameter null or not set，用于检测var是否被正常赋值
 ${var-word}	      如果var未设定，返回word，如果var未空或者有值，返回var
 ${var:num}	          字符串截取，返回var中第num个字符到末尾的所有字符，正从左往右，负从右往左，有空格：${var: -2}，没有空格：${var:1-3}或${var:(-2)}

bash变量配置方式			说明
${变量#关键词} 				若变量内容从左往右的数据符合『关键词』，则将符合的最短数据删除  echo ${PATH##*:}
${变量##关键词}				若变量内容从左往右的数据符合『关键词』，则将符合的最长数据删除
${变量%关键词} 				若变量内容从尾向前的数据符合『关键词』，则将符合的最短数据删除  echo ${PATH%%:*}
${变量%%关键词}				若变量内容从尾向前的数据符合『关键词』，则将符合的最长数据删除
${变量/旧字符串/新字符串} 	若变量内容符合『旧字符串』则『第一个旧字符串会被新字符串取代
${变量//旧字符串/新字符串}	若变量内容符合『旧字符串』则『全部的旧字符串会被新字符串取代    echo ${PATH//sbin/bin}

 
 
 数组：整体赋值：数组名=(值1 值2 ...)     单个元素赋值：数组名[下标]=值  #下标从0开始
 获取：单个：${数组名[下标]}   所有：${数组名[@]}   值个数：${#数组名[@]}     多个：${数组名[@]:起始:个数}
 添加：a+=(6) 或者 a[1]=6   删除：unset a[1]  修改：覆盖
 多行合并成一行：tr '\n' ' ' 
 
 预期交互：expect 为交互式过程自动输送预先准备的文本或指令
 
 正则：基本元字符：^ $ . + ? * {n} {n,m} {n,}
       其它：[]范围内单字匹配 ()整体  |或者 \b单词边界	   
	特殊符号	代表意义
	[:alnum:]	代表英文大小写字节及数字，亦即 0-9, A-Z, a-z
	[:alpha:]	代表任何英文大小写字节，亦即 A-Z, a-z
	[:blank:]	代表空白键与 [Tab] 按键两者
	[:cntrl:]	代表键盘上面的控制按键，亦即包括 CR, LF, Tab, Del.. 等等
	[:digit:]	代表数字而已，亦即 0-9
	[:graph:]	除了空白字节 (空白键与 [Tab] 按键) 外的其他所有按键
	[:lower:]	代表小写字节，亦即 a-z
	[:print:]	代表任何可以被列印出来的字节
	[:punct:]	代表标点符号 (punctuation symbol)，亦即：" ' ? ! ; : # $...
	[:upper:]	代表大写字节，亦即 A-Z
	[:space:]	任何会产生空白的字节，包括空白键, [Tab], CR 等等
	[:xdigit:]	代表 16 进位的数字类型，因此包括： 0-9, A-F, a-f 的数字与字节
	元字符使用：
	元字符：
		a  						单个字符，包括汉字    
		|  						或(已匹配过的字符，就不会再匹配)
		.  						匹配除换行外的任意字符
		^  						匹配字符串的开始位置
		$  						匹配字符串的结束位置
		*  						匹配前一个字符出现0次或多次
		+  						匹配前一个字符出现1次或多次
		？ 						匹配前一个字符出现0次或1次
		{n}						匹配n次重复次数
		{m,n}       			匹配m到n次重复次数(包含mn)
		.+/.*       			匹配全部
		[字符集]    			匹配字符集中任意一个字符([_a-zA-Z0-9])
		[^字符集]   			过滤，即除字符集外的任意字符
		\d == [0-9]				匹配任意数字字符
		\D == [^0-9]			匹配任意非数字字符
		\w                      普通字符(字母数字下划线及汉字)
		\W						非普通字符
		\s						匹配任意空字符[\r\t\n\v\f ]
		\S                      匹配任意非空字符
		\A == ^                 匹配字符串的开始位置
		\Z == $                 匹配字符串的结束位置
		\b						匹配单词边界位置(普通字符和非普通字符交界认为是单词边界)
		\B						匹配非单词边界位置
		\cx						匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一
	匹配单个字符： a . \d \D \w \W \s \S [..] [^..] 	
	匹配重复：*  +  ?  {n}	 {m,n}
	匹配位置:  ^  $  \A  \Z  \b  \B
	其它： |  ()  \
		
	绝对匹配：
		正则表达式要完全匹配目标字符串内容(\d+  --- "123"(完全匹配)  "as123df"(不是))
		"^正则表达式$"    在正则表达式开始和结束位置加上^$
		
	正则表达式转义：		
	raw字串：原始字符串对内容不解释转义，就表达内容原本意义
		
	贪婪与非贪婪：	
		贪婪模式：#一次性吃掉它所能够吃掉的所有字符且可以回退
			*  +  ?  {3,5}
				re.findall(r"ab{3,5}","abbbbbb")   --->  结果：['abbbbb']
		非贪婪模式(懒惰模式)：贪婪模式 + ？
			*?  +?  ??  {3,5}?
				re.findall(r"ab*?","abbbbbb")   --->  结果：['a']
	    侵占模式：贪婪模式 + "+"   #一次性吃掉它所能够吃掉的所有字符且不回退
	  例子：232hjdhfd7474$
        贪婪模式：\w+[a-z]     #会一次性吃掉它所能吃掉的所有的字符，也就是子串232hjdhfd7474,但会一个字符挨个回退，直到匹配或者子串为空
		侵占模式：\w++[a-z]	   #会一次性吃掉它所能吃掉的所有的字符，也就是子串232hjdhfd7474,但不会回退，所以[a-z]无法匹配到内容
		非贪婪模式：\w+?[a-z]  #尽可能少的匹配  共找到3处匹配：232h，jd，hf
		
    子组：使用(pattern)
		<(title)>.*</\1>
		子组注意事项：
			1.子组一般由外到内，由左到右称之为第一组，第二组...    # "(A)(B(C))" 从外到内有四个子组
			2.子组向后引用（back-reference）：只能用分组匹配后的内容(文本),不能引用正则
			#(\d{1,3})(.\1){3}这个表达式实际上匹配的是四个数都相同的IP地址
	
        捕获组和非捕获组
            捕获组格式：(?P<name>pattern)
        		作用：可以通过组名更方便获取某组内容
        			re.search(r"(?P<dog>ab)cdef",'abcdef').group('dog')
            非捕获组：(?:pattern)  #不要当做分组，不能使用
        
        断言只是条件，本身并不会匹配
        	1.pattern(?=pattern) 	正，先行			
        		industr(?=y|ies) ---> industr industr（12）
        	2.pattern(?!pattern)    负，先行
        		industr(?!y|ies) ---> industr（3）	
            1.(?<=pattern)pattern   正，后发
            	(?<=NT|2000)Windows“能匹配”2000Windows“中的”Windows“，但不能匹配”3.1Windows“中的” Windows
            2.(?<!pattern)pattern   负，后发
        			(?<!NT|2000)Windows“能匹配”3.1Windows“中的”Windows“，但不能匹配”2000Windows“中的” Windows“	        
        就用先行断言（?=或?!）：目标字符串在前
        就用后发断言（?<=或?<!）：目标字符串在后
        假如指定满足某个条件，就是正（=）。
        假如指定不满足某个条件，就是负（!）。	

	#正则表达式的子组：
	#	可以使用()为正则表达式建立子组，子组可以看作是正则表达式内部操作的一个整体，即先匹配整体，在内部子组匹配
	#		子组是在正则表达式整体匹配到内容的前提下才会发挥作用，不影响正则表达式整体去匹配目标内容这一原则
	#	re.findall(r"(ab)*","ababab")    #()会将ab当作一个整体
	#
	#	子组所用：
	#		1.作为内部整体可以改变某些元字符的行为(正则)
	#			re.search(r"\w+@\w+\.(com|cn)","abc@123.com").group()   ---  'abc@123.com'
	#			re.search(r"\w+@\w+\.(com|cn)","abc@123.cn").group()	---  'abc@123.cn'
	#			re.search(r"\w+@\w+\.com|cn","abc@123.com").group()		---  'abc@123.com'
	#			re.search(r"\w+@\w+\.com|cn","abc@123.cn").group()		---  'cn'
	#		2.子组在某些操作中可以单独提取出匹配内容(编程)
	#			re.search(r"(https|http|ftp)://\S+","https://www.baidu.com").group()   ---  'https://www.baidu.com'
	#			re.search(r"(https|http|ftp)://\S+","https://www.baidu.com").group(1)  ---  'https'
		
 
 #sed流式编辑器：
 #1. 前置命令 | sed [选项] '条件+指令'
 #2. sed [选项] '条件+指令'  文件.. ..
 #选项：-n屏蔽默认输出   -i实际修改   -r支持正则但应作为首个选项
 #条件：行号或者/正则/                                                #2,4p输出234行  2p;4p输出24行  4,+10p输出4及后面10行  $=输出文件的行数 
 #动作指令：p打印  d删除   s替换                                      # ！取反  s/old/new/ 3g  替换第一个，第三个，全部      $d删除文件最后一行
 #          i行前插入  a行后插入 c替换
		   
SED：sed -h
	'2,5d'   '2a drink tea'  '2,5c No 2-5 number'   's/#.*$//g'  '$a # This is a test' regular_express.txt  '2,5!p'  '2!p;6!p'     '/hello/aworld\nwestos'   '/^#/d' 
	s/my/**&**/  #符号&代表查找串。my将被替换为**my**
-n：使用安静(silent)模式。在一般 sed 的用法中，只有经过sed 特殊处理的那一行(或者动作)才会被列出来。
-e：直接在命令列模式上进行 sed 的动作编辑；
-f：直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的sed 动作；
-r：sed 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法)
-i：直接修改读取的文件内容，而不是由萤幕输出。


动作说明：  [n1[,n2]]function
n1, n2 ：不见得会存在，一般代表『选择进行动作的行数』，举例来说，如果我的动作
		是需要在 10 到 20 行之间进行的，则『 10,20[动作行为] 』
function 
a   ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～
c   ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！
d   ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚；
i   ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；
p   ：列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～
s   ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配
sed -n '/8002/p'  test     					 #过滤8002行并整行输出
sed -nr 's/80/nishizhu/p'  /etc/services	 #将替换结果显示出来
sed -n '/\b80/{/tcp[ ]/p}'  /etc/services    #双条件 \b表示边界
sed 's/^/添加的头部&/g;s/$/&添加的尾部/g' /etc/services    #符号&代表查找串，可以先使用p输出，同时执行两个替换规则
sed -n 's/asd$/123/gp' test     #同一行多个匹配的情况下只匹配并替换asd结尾的哪一个
 
 #awk编程语言/数据处理引擎
 #1.前置命令 | awk [选项] '[条件]{指令}'
 #2.awk [选项] '[条件]{指令}' 文件.. ..
 #选项：-F[] 指定分隔符
 #内置变量：FS=":" 与-F一样    $n第n个字段    $0整行文本内容   NF最后一个字段,列数   NR行数
 #过滤时机: BEGIN{} {} END{}          #每个段都可以添加条件，每个段都一样一个{}  即awk -F[:] 'BEGIN{} {} END{}' filename
 #过滤时机：awk [选项] 'BEGIN{指令} {指令} END{指令} ' 文件
 #条件：/正则/  $7!~/bash$/ 
 #      数值/字符串比较 > < == != >= <=
 #      逻辑比较&&  ||   
 #	  运算符+-*/%  ++ -- += -= *= /=
 #流程控制：单分支：if(条件){编辑指令}    双分支：if(条件){编辑指令1}else{编辑指令2}   
 #          多分支(else连接多个if条件)：if(条件){编辑指令1}else if(条件){编辑指令}
 #  awk -F[:] 'BEGIN{i=0;j=0}{if($3>=500){i++}else{j++}}END{print i,j}' /etc/passwd 
 #  awk -F: 'BEGIN{i=0;j=0;k=0} {if($3<500){i++} else if($3>=500&&$3<=1000){j++} else{k++}} END{print i,j,k}' /etc/passwd   
 #  ##“else if”这个是必须有空格的  最后的else是不需要条件    BEGIN多个初始值用;分开     END{print }用,分开
 #  
 #  awk  '{ip[$1]++} END{for(i in ip) {print ip[i],i}}' ip.txt | sort -nr               #{print ip[i],i}  逗号表示空一格
 #  netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'
   
AWK:
	awk匹配模式有两种: 
		1. /正则/  
		2. 关系运算匹配  > < <= >= == != ~ !~    #注意，这是不用//
			'$3<50'  
			'$7!="/bin/bash"'   
			'$3 ~ /[0-9]{3,}/'  
			'$1=="ftp" || $1=="mail"{print $0}'
		3.行范围匹配	
	df -Ph | awk ' NR != 1 && $5 >= 90 '
	awk '{ip[$1]++}END{for(i in ip){print i,ip[i]}}' access.log-20190801 | column -t								 #统计ip	
	awk -F[:] 'BEGIN{i=0;j=0} {if($3<500){i++}else if($3>=500&&$3<1000){j++} else{k++}} END{print i,j,k}' passwd     #自定义变量：i=0;j=0,这是有逻辑的(将其中一个500改成100)
	awk 'BEGIN {max = 0} {if ($1>max) max=$1 fi} END {print "Max=", max}' data  #求最大值  最值：awk '{if($1>max){max=$1}else if($1<3){min=$1}}END{print "MAX =",max"\n""MIN =",min}' data
	awk 'BEGIN{sum=0}/^$/{++sum}END{print sum}' /etc/services                        #统计空行
	awk 'BEGIN{printf "%-20s%-20s%-20s%-20s%-20s%-20s\n","Name","Chinese","English","Math","Physical","Average"}{sum=$2+$3+$4+$5;avg=sum/4}{printf "%-20s%-20d%-20d%-20d%-20d%-0.2f\n",$1,$2,$3,$4,$5,avg}' student.txt #统计平均值,逗号表示字符串分隔符，分号表示命令分隔符(因为是在awk中，如果是在bash命令行则是空格为分隔符)
	awk占位符%[modifier]control-letter  -减号是左对齐,+加号是右对齐,#显示8进制在前面加0,显示16进制在前面加0x 
三元运算：	
	awk -F: '{usertype=$3<500?"系统用户":"普通用户" ; print $1,usertype}' passwd   #等同于awk -F: '{usertype=$3<500?"系统用户":"普通用户"}{ print $1,usertype}' passwd
	awk -F: '{uid=$3>500?a++:b++}END{print "普通用户总数:" a "\n" "系统用户总数 :",b}' passwd
	awk 'i=!i' test（打印奇数行）  /   awk '{i=!i;print i}' test
	 
	c	将一个数作为ASCII字符显示
	d	显示一个整数值
	i	显示一个整数值（和d一样）
	e	用科学计数法显示一个数
	f	显示一个浮点值
	g	用科学计数法或浮点数显示（选择一个较短的格式）
	o	显示一个八进制值
	s	显示一个文本字符串
	x	显示一个十六进制值
	X	显示一个十六进制值，但用大写字母A～F
	
	内置变量：
		$0                    打印行所有信息
		$1~$n                    打印行的第1到n个字段信息
		NF Number Field                处理行的字段个数
		NR Number Row                处理行的行号
		FNR File Number Row            多文件处理时，每个文件单独记录行号
		FS Field Separator            字段分隔符，不指定时默认以空格或tab键分割,指定\n被当作空格
		RS Row Separator            行分隔符，不指定时以回车换行分割,指定\n被当作空格
		OFS Output Filed Separator        输出字段分隔符
		ORS Output Row Separator        输出行分隔符
		FILENAME                处理文件的文件名
		ARGC                    命令行参数个数
		ARGV                    命令行参数数组	
awk [-v FS="#" -v OFS='---' -v RS=" " -v ORS="++"] '{print $1 $2}/{print FILENAME,$1,$2}'  test		
awk '{print NR/FNR/NF,$0,ARGV[0],ARGV[1],ARGV[2],ARGC}' test test1
abc=666  awk -v myvar=$abc 'BEGIN{print myvar}'	
awk [--re-interval] '/ro{1,2}t/{print $0}' passwd   #--re-interval 匹配指定次数,但自己试的时候不用加也可以
awk '/shutdown/,/operator/{print NR,$0}' passwd			#范围性输出，输出第一个匹配/root/和/operator/之间(包括)的行
awk 'NR>=3&&NR<=6{print NR,$0}' passwd					#3-6行	
cat -n passwd|awk -F: '{print $1}{print NR}'		#对于一行，输出$1再输出$2 等同于cat -n passwd|awk -F: '{print $1;print NR}'	
awk '{sum+=$2}END{print sum}' date  // cat data|awk '{sum+=$1} END {print "Average = ", sum/NR}'  //  cat data|awk 'BEGIN {max = 0} {if ($1>max) max=$1 fi} END {print "Max=", max}'  //   
awk '($1~/[0-9]/&&$2~/[0-9]/)||($3~/[a-zA-Z]/){print $0}' awk.txt  #与或	
awk '{a[$1]++;b[$1]+=$2}END{for(i in a){print i,a[i],b[i]}}'  #将第一列过滤重复列出每一项，每一项的出现次数，每一项的大小总和
                
	内置函数
		rand，srand，int
		gsub  sub  length  index
		awk 'BEGIN{srand();print rand()}'   	 	awk 'BEGIN{srand();print int(100*rand())}'	  #随机数
		awk '{gsub("a","A");print $0}' passwd    	awk '{gsub("[a-z]","6");print $0}' passwd     #替换
		awk '{sub("[a-z]","6");print $0}' passwd	#替换	awk '{print $0,length()}' passwd	#字符串长度
		awk '{print index($0,"root")}' passwd   #root所在位置  
  
  
  

cat << EOF > /root/test.txt 或 cat > /root/test.txt <<EOF     #覆盖 PATH=\$PATH:\$HOME/bin 涉及到变量操作时是需要进行转义(原始覆盖，不转义则会变量替换才覆盖)
cat << EOF >> /root/test.txt 或  cat >> /root/test.txt <<EOF  #追加
read -n 4 >file            # 只读取4个字符到文件file
command < file1 > file2    #命令参数从file1读入，输入到file2中

shell script : fork出一个子进程，再执行命令   -- bash /root/sh.sh ---   bash(88820)───bash(88932)───sleep(88933)
source : 在当前bash环境下执行命令			  --   source  sh.sh  ---   bash(88485)───sleep(88594)
exec：将当前bash替换成命令执行，执行完成退出  --    exec ./sh.sh  ---   sh.sh(88701)───sleep(88733)    #exec在对文件描述符进行操作的时候，也只有在这时，exec不会覆盖你当前的 shell 环境
exec命令：&n代表文件描述符  重定向左边数字/&也代表文件描述符  重定向右边&-代表关闭文件描述符(据说是读写)  重定向代表的是数据的流向
    exec <test               #会从test逐行读出并执行           
	exec 1>test				 #只接受命令执行后的标准输出到test  &/2会把输入也输出到test
	
	n>&-/&n>&-               #关闭输出文件描述符n(读写都关闭？).
    n<&-/&n<&-               #关闭输入文件描述符n(读写都关闭？).
	exec 3</tmp/1.txt     	 #以“只读方式”打开/tmp/1.txt，文件描述符对应为3
	exec 3>/tmp/1.txt    	 #以“只写方式”打开/tmp/1.txt，文件描述符对应为3
	exec 3<>/tmp/1.txt   	 #以“读写方式”打开/tmp/1.txt，文件描述符对应为3
	command < filename >filename2        #把command命令以filename文件作为标准输入，以filename2文件作为标准输出
      
	  exec 1&-           # 关闭 FD1  默认对文件描述符1进行操作
      exec 5>&-          # 关闭 FD5
  exec 4<&1          # 备份当前stdout至FD4
  exec 1>1.txt       # stdout重定向至1.txt
  exec 1<&4          # 恢复stdout
  exec 4>&-          # 关闭 FD4
    [j]<>filename     # 为了读写"filename", 把文件"filename"打开, 并且将文件描述符"j"分配给它.
  exec <filename命令会将stdin重定向到文件中. 从这句开始, 所有的stdin就都来自于这个文件了
  exec >filename命令将会把stdout重定向到一个指定的文件中. 这样所有命令的输出就都会发送到那个指定的文件
	
    exec <file	file中的内容作为标准输入（替代STDIN）
    exec >file	将标准输出写入file（替代STDOUT）
    exec 3<file	将file读入到文件描述符3中（此时，创建了文件描述符3）
    sort <&3	将文件描述符3作为临时输入，用于sort排序
    exec 4>file	将写入文件描述符4中的内容写入file中（此时，创建了文件描述符4）
    ls >&4	Ls将不会有显示，直接写入文件描述符4中了，即上面的file中
    exec 5<&4	创建文件描述符4的拷贝文件描述符5
    exec &- 关闭标准输出
    exec 3<&-	关闭文件描述符3


伪终端：1.键盘输入给master马上回显，2.看通道是否阻塞，如果不是则回显并在回车键后执行，如果是则回显并以命令队列形式存储到buffer中
        #前台程序(一些命令特殊用法之外，如cat)运行的时候，终端会被阻塞
		#exec 0</dev/pts/1   或者exec 0<>/dev/pts/1   或者exec 1<>/proc/pid/fd/0(要是个终端设备)
		#exec 0>/dev/pts/1   这样远程终端会断开，因为没 输入了


三目运算：
[ -z "$a" ] && echo yes || echo no    #使用-z或-n判断字符串长度时，变量要加双引号。或者是用[[]]
     #第一种：当判断为fasle时候，会执行第一个||开始加上后面所有的&&后面的语句(无论何种情况，只会执行第一个||)   第二种：当判断结果为true时候，会执行所有的&&之后的语句
echo $((1>0?1:2))      #输出指定数字
echo $((1<0))          #输出0/1
echo "1.2 < 2" |bc     #支持浮点数echo "1.2 != 2.2" |bc

expr substr "$str" 2 5  # 从第二个位置开始取5个字符，echo ${str:(-6):5}
expr length "string"   #获取字符串长度    ${#var}
expr index "string" str   #获取字符在字符串中出现的位置


bash模式扩展：~家目录  ？单个字符  *任意数量的字符  */*.txt  (命令列表)#zishell { 命令列表; }#当前shell执行
              [ab]任意一个 [!ab]非    [a-c]范围  [[:digit:]]*以数字开头 [![:digit:]]*不以数字开头
              {1,2,3}  {j{p,pe}g,png} {cat,d*}  {a..c}范围 {001..5} {0..8..2}  ${!S*}  
              `` $(...)变量引用  $((...))算术  (ab)整体
			  <(命令列表)  >(命令列表)    #进程替换，可以看做是命令列表的执行结果的临时文件，但这个临时文件是fd文件描述符
( )	     用途1：在运算中，先计算小括号里面的内容   用途2：数组    用途3：匹配分组
(( ))	 用途1：表达式，不支持-eq这类的运算符。不支持-a和-o，支持<=、>=、<、>这类比较符和&&、||      用途2：C语言风格的for(())表达式
$(( ))	 用途1：简单算数运算   用途2：支持三目运算符 $(( 表达式?数字:数字 ))   用途3：进制转换
$( )	 执行Shell命令，与反撇号等效，但移植性不如``
` `	     条件表达式，里面不支持布尔运算符(! -a和-o)，不支持<=和>=比较符，支持-eq、<、>这类比较符。支持=~模式匹配，也可以不用双引号也不会影响原意，比[]更加通用
[ ]	     条件表达式，支持布尔运算符(! -a和-o),里面不支持逻辑判断符( &&  || )
$[ ]	 简单算数运算
[[]]     支持=~操作符 [[ hello == hell? ]]  支持逻辑判断符(！ &&  || )
{ }		 对逗号,和点点...起作用，比如touch {1,2}创建1和2文件，touch {1..3}创建1、2和3文件
${ }	 用途1：引用变量  用途2：字符串处理及默认值


队列的特点是先进先出
管道文件   1:无名管道（ps aux | grep nginx）   2:有名管道（mkfifo /tmp/fd1）#如果管道内容为空，则阻塞
创建文件描述符3关联管道文件exec 3<>/tmp/fd1，这时候3这个文件描述符就拥有了管道的所有特性，还具有一个管道不具有的特性：无限存不阻塞，无限取不阻塞


#############################################################################################

自动创建100M和1G两个分区
echo -e "n\np\n1\n\n+100M\nn\np\n2\n\n+1024M\nw\n"|fdisk /dev/sdb&> /dev/null || return 68

进程间通信：
	A: kill -Signal B_pid		  #A进程发信息给B进程,signal是数字
	B: trap "command" Signal    #捕获信号Signal并进行处理command[command;command;...]，command为动作(命令或者表达式或者函数)

#############################################################################################

命令的优先级：alias ==> Compound Commands ==> function ==> build_in ==> hash ==> $PATH ==> error: command not found


命令：
help
stat -c format

#############################################################################################

shell是命令解释器，bash是shell的一种

子shell不代表进程号不一样，但是变量赋值域不一样
    子shell：echo qian${b} ; ( b=6 ) ; echo hou${6}
    当前shell：echo qian${e} ; { e=6; } ; echo hou${e}

引用：转义字符\ 和 '' 和 ""

元字符：|  & ; ( ) < > space tab

控制操作符：&& || &  ; ;; ( ) | |& 换行符

简单命令：一条命令+参数
管道：！command1 |或|& command2...
命令队列：多个命令或管道通过|| & && ; 组合而成
复合命令：判断+循环语句 ( 表达式 )  ！表达式  && ||  (命令队列)  { 命令队列; }

函数

###################################################################################################




help
pwd  exec  exit logout unset printf source unalias 
let 表达式  #计算
set 用来显示本地变量 -v -x -n -e -h(将执行命令记录到hash中，默认打开)  -B(大括号拓展,默认打开) -C(防止重定向覆盖已存在文件)
env 用来显示环境变量
builtin alias(内置命令)：在内置命令与函数名冲突的时候有用

enable: 
	-a       #查看
    builtin  #开启
    -n [builtin]  #关闭
local 函数级别变量
export：导出变量，用户变量级别(当前用户即该用户的子shell)
	-p (可省略)：显示环境变量
	-n 变量实际上并未删除，只是不会输出到后续指令的执行环境中。
	-f [函数名]  添加函数
readonly：
    readonly [-p]      #查看只读变量
	readonly   var=value  #声明只读变量。
	readonly  -a array=(val1 val2 val3)  #声明只读数组，每个名称都是下标数组变量
	readonly  -A arrayC=([1]=va1 [3]=va2 [2]=va3)  #每个名称都是键值数组变量，相当于定义了在-a基础上定义了下标
	readonly  -f f1  #声明只读函数
declare：[+/-][Aafrxi][变量名称＝设置值]
       declare [-p] 查看
	   r只读   x(用户)全局变量  i数字类型
shopt命令是set命令的一种替代,很多方面都和set命令一样,但它增加了很多选项。可以使用
    #-p:选项来查看shopt选项的设置   
    -u:表示关闭一个选项
    -s:表示开启一个选项	
	extglob:打开扩展的模式匹配特性
getopts：getopts OPTSTRING VARNAME [ARGS...]
    VARNAME:告诉getopts哪个变量用于选项报告
    *ARGS:告诉getopts解析这些可选的参数，而不是参数位置
  Example：getopts :fA:x VARNAME   #告诉getopts查找-f,-A,-x选项，-A选项后面会有一个参数
	#最前面的冒号“：”用于指定getopts工作于silent mode，在silent模式下，当用户输入的参数不满足OPTSTRING时，不会讲illegal option这样的错误信息打印出来，使代码看起来更加专业
	#OPTSTRING:告诉getopts会有哪些选项和哪会有参数(用选项后加”:”表示)即OPTSTRING： ":fA:x"  
	#OPTARG：保存参数值，即选项后面带参数的值
	#OPTIND：getopts使用OPTIND作为索引，来处理下一个需要处理的参数，记录当前的状态。
hash命令：显示、添加或清除哈希表	
    linux系统下会有一个hash表，当你刚开机时这个hash表为空，每当你执行过一条命令时，hash表会记录下这条命令的路径，就相当于缓存一样。第一次执行命令shell解释器默认的会从PATH路径下寻找该命令的路径，当你第二次使用该命令时，shell解释器首先会查看hash表，没有该命令才会去PATH路径下寻找。
    -l  显示hash表内容
    -r 清除hash表
    -d openssl 删除openssl记录
    -t openssl 查看openssl命令路径（hash表中没有的话，可以调用which命令）
    -p /usr/bin/openssl aliesopenssl 往hash表中添加一条，执行aliesopenssl即执行openssl命令（起别名）
eval：
	eval 执行以下两个步骤：
	第一步，执行变量替换         --->第一遍扫描
	第二步，执行替换后的命令串。 --->第一遍扫描
shift(n):每执行一次，参数减n
test和[]:  表达式为：-n  -f >/-lt 和 -a
    ! 表达式：返回值取反
    (表达式):改变优先级
    表达式1 -a/-o 表达式2
trap:
    -l: 查看内置捕获信号
	-p：输出
    1	SIGHP	挂起进程
    2	SIGINT	终止进程
    3	SIGQUIT	停止进程
    9	SIGKILL	无条件终止进程
    15	SIGTERM	尽可能终止进程
    17	SIGSTOP	无条件停止进程，但不是终止进程
    18	SIGTSTP	停止或暂停进程，但不终止进程
    19	SIGCONT	继续运行停止的进程
    trap "echo 'Sorry! I have trapped Ctrl-C'" SIGINT
    删除捕获，命令形式为：trap -- ***，例如trap -- SIGINT
unset：-v删除变量 -f删除函数
bind:
    -l 列出所有的功能
	-q <功能>  列出指定功能的按键和按键组合
	-v 显示按键组合的设置
    -x '"\C-l":echo 111'   设置组合按键，Ctrl+l，就可以显示111	 
showkey -a: 获取键盘值	
mapfile：与readarray同义
    mapfile myarr <alpha.log
    echo ${myarr[@]}	
read: history 1 | { read x y;echo $y; }
    -p:提示信息	
	-d：分隔符
	-n num:限制字符数
	-t time：超时时间
	-s ：关闭回显
	-u fd:从文件描述符读入
type -a	cmd    #用来显示指定命令的类型，判断给出的指令是内部指令还是外部指令。
ulimit:  /etc/security/limits.conf
    -H:硬限制一旦设定后非root用户不能修改
	-S:软限制设定了可以增加到硬限制
	-a:显示当前系统所有的limit资源信息（其它选项可以参考该选项输出）
fc：命令自动掉用vi编辑器修改已有历史命令
	
	
######################################################################################

bash:
    -c
	  sudo bash  ./test.sh a          #./test.sh为可执行文件名，a为参数
	  sudo bash  './test.sh a'        #./test.sh a 为可执行文件名
	  sudo bash -c './test.sh a'      #bash环境下执行./test.sh a ，sudo的时候有用
	  sudo bash -c 'echo "kettle" >> nohup.log1'   #生成root用户的nohup.log1文件，即整条命令是使用root执行的
	  sudo echo "kettle" >> nohup.log              #生成master用户的nohup.log，echo命令是使用root身份执行，重定向是使用master用户执行的 
	-i #PS1  $-
	-l
	  exec -l bash
	  exec bash --login
	--posix  #bash --postx(posix mode)类似于 sh , sh的搜索路径为PATH(source 或者.)，bash搜索路径为PATH和当前目录

bash条件表达式(man bash  /CONDITIONAL EXPRESSIONS)
算术运算：(man bash  /ARITHMETIC EVALUATION)
	
[root@localhost ~]# if ! ls &>/dev/null; then echo no; else echo yes; fi
yes
[root@localhost ~]# if (! ls &>/dev/null); then echo no; else echo yes; fi
yes
[root@localhost ~]# if { ! ls &>/dev/null; }; then echo no; else echo yes; fi
yes
[root@localhost ~]# if [ ! ls &>/dev/null ]; then echo no; else echo yes; fi
yes
[root@localhost ~]# if ! cd /ttt &>/dev/null; then echo no; else echo yes; fi
no
[root@localhost ~]# if [ ! cd /ttt &>/dev/null ]; then echo no; else echo yes; fi
yes
[root@localhost ~]# if { ! cd /ttt &>/dev/null; }; then echo no; else echo yes; fi
no
[root@localhost ~]# if (! cd /ttt &>/dev/null); then echo no; else echo yes; fi
no
	
目录栈：
dirs：功能是显示当前目录栈中的所有记录
	语法格式：dirs [-clpv] [+n] [-n]
	-c 删除目录栈中的所有记录
	-l 以完整格式显示  -p 一个目录一行的方式显示  
	-v 每行一个目录来显示目录栈的内容，每个目录前加上的编号
	   +N 显示从左到右的第n个目录，数字从0开始
	   -N 显示从右到左的第n个日录，数字从0开始
	-r 受限shell(不能cd或者tab，重定向等等)
	--posix   posix模式
pushd：将目录加入到栈中并cd到该目录	
	语法格式：pushd [目录 | -N | +N] [-n]
	-n 目录名  #将目录入栈时，不切换目录
	+N 		   #将第N个目录移至栈顶（从左边数起，数字从0开始）
    -N 		   #将第N个目录移至栈顶（从右边数起，数字从0开始）
popd：用于删除目录栈中的记录	
	+N 将第N个目录删除（从左边数起，数字从0开始）
    -N 将第N个目录删除（从右边数起，数字从0开始）
	
作业控制命令：
bg : 继续执行后台暂停的作业   
fg ：在前台继续执行暂停的作业
jobs 列出作业
   -l：列出所有后台作业 
   -s：列出后台暂停作业
kill：向进程发送信号	
wait：等待进程退出	
suspend [-f] #暂停执行shell
	
当用户注销（logout）或者网络断开时，终端会收到 HUP（hangup）信号从而关闭其所有子进程	
	让进程运行在新的会话里从而成为不属于此终端的子进程
	    nohup command
		setsid command
		(command &)   #将一个或多个命名包含在“()”中就能让这些命令在子 shell 中运行中
	    disown 选项 pid   #事后补救
	        -h 使指定作业忽略hup信号
	        -r 运行中作业
	        -a 所有作业
		大量这种命令需要在稳定的后台里运行
		screen    #systemd(1)───screen(40552)───bash(40553)───sleep(40579)
		


横竖转换：-n的间隔符是空格符或者换行符
    cat a.txt | xargs -n1         # 列转行
    cat a.txt | xargs -n2       # 行转列


















	
		
		
		