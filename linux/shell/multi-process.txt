
案例1
#!/bin/bash
start_time=`date +%s`              #定义脚本运行的开始时间
[ -e /tmp/fd1 ] || mkfifo /tmp/fd1 #创建有名管道
exec 3<>/tmp/fd1                   #创建文件描述符，以可读（<）可写（>）的方式关联管道文件，这时候文件描述符3就有了有名管道文件的所有特性
rm -rf /tmp/fd1                    #关联后的文件描述符拥有管道文件的所有特性,所以这时候管道文件可以删除，我们留下文件描述符来用就可以了
for ((i=1;i<=10;i++))
do
        echo >&3                   #&3代表引用文件描述符3，这条命令代表往管道里面放入了一个"令牌"
done
for ((i=1;i<=1000;i++))
do
read -u3                           #代表从管道中读取一个令牌
{
        sleep 0.1                    #sleep 1用来模仿执行一条命令需要花费的时间（可以用真实命令来代替）
        echo 'success'$i       
        echo >&3                   #代表我这一次命令执行到最后，把令牌放回管道
}&                                 #用{}把循环体括起来，后加一个&符号，代表每次循环都把命令放入后台运行
                                   #一旦放入后台，就意味着{}里面的命令交给操作系统的一个线程处理了
done
wait
stop_time=`date +%s`              #定义脚本运行的结束时间
echo "TIME:`expr $stop_time - $start_time`"
exec 3<&-                         #关闭文件描述符的读
exec 3>&-                         #关闭文件描述符的写

案例2 : bash启动一个主进程运行脚本，该主进程会fork出需要数量的进程并发执行脚本，再由每个脚本进程fork出对应一个进程执行每一个脚本块(当前bash-fork-一个bash scripct-fork-多个bash script-fork-对应sleep 20)
#!/bin/bash
start=`date +%s` #定义脚本运行的开始时间
for ((i=1;i<=1000;i++))
do
{
        sleep 1  #sleep 1用来模仿执行一条命令需要花费的时间（可以用真实命令来代替）
        echo 'success'$i; 
 }&              #用{}把循环体括起来，后加一个&符号，代表每次循环都把命令放入后台运行
                 #一旦放入后台，就意味着{}里面的命令交给操作系统的一个线程处理了
                 #循环了1000次，就有1000个&把任务放入后台，操作系统会并发1000个线程来处理
                 #这些任务         
done    
wait             #wait命令的意思是，等待（wait命令）上面的命令（放入后台的）都执行完毕了再
                 #往下执行。
                 #在这里写wait是因为，一条命令一旦被放入后台后，这条任务就交给了操作系统
                 #shell脚本会继续往下运行（也就是说：shell脚本里面一旦碰到&符号就只管把它
                 #前面的命令放入后台就算完成任务了，具体执行交给操作系统去做，脚本会继续
                 #往下执行），所以要在这个位置加上wait命令，等待操作系统执行完所有后台命令
end=`date +%s`  #定义脚本运行的结束时间
echo "TIME:`expr $end - $start`"

