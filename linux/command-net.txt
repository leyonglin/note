
用户使用 --net=none 后，可以自行配置网络，让容器达到跟平常一样具有访问网络的权限。通过这个过程，可以了解 Docker 配置网络的细节。
首先，启动一个 /bin/bash 容器，指定 --net=none 参数。
docker run -i -t --rm --net=none busybox /bin/bash
	root@63f36fc01b5f:/#
	
在本地主机查找容器的进程 id，并为它创建网络命名空间。
docker inspect -f '{{.State.Pid}}' 63f36fc01b5f
	2778
pid=2778
sudo mkdir -p /var/run/netns
sudo ln -s /proc/$pid/ns/net /var/run/netns/$pid

检查桥接网卡的 IP 和子网掩码信息。
ip addr show docker0
	21: docker0: ...
	inet 172.17.42.1/16 scope global docker0
	...
	
创建一对 “veth pair” 接口 A 和 B，绑定 A 到网桥 docker0，并启用它
sudo ip link add A type veth peer name B
sudo brctl addif docker0 A
sudo ip link set A up

将B放到容器的网络命名空间，命名为 eth0，启动它并配置一个可用 IP（桥接网段）和默认网关（如果是两个不同网段的网卡需要通讯，可以使用iptables的nat功能）。
sudo ip link set B netns $pid
sudo ip netns exec $pid ip link set dev B name eth0
sudo ip netns exec $pid ip link set eth0 up
sudo ip netns exec $pid ip addr add 172.17.42.99/16 dev eth0
sudo ip netns exec $pid ip route add default via 172.17.42.1



#（网桥间通讯可以使用iptables进行nat配置）
ip route
ip route get 192.168.17.130  						   #远端ip如何到达本机，显示本机网关+本地网卡设备
ip route add default via 192.168.17.3				   #默认路由,不同网段需要网关(via)。
ip route add 1.1.1.0/24 dev ens33 [src 192.168.3.63]   #普通路由，同网段添加，Destination与本主机同属一个网络，无需网关(via)，src部分加不加效果一样

ip -s link									 #统计网卡数据	
ip neighbour								 #arp地址解析协议







TC：流量控制，模拟传输丢包，延迟，乱序等情况
步骤:
为网卡配置一个队列;
在该队列上建立分类;
根据需要建立子队列和子分类;
为每个分类建立过滤器。

流量控制的一个基本概念是队列(Qdisc)
复杂的队列需要使用不同的过滤器(Filter)来把报文分组分成不同的类别(Class)。这里把这些复杂的队列称为可分类(ClassfuI)的队列
HTB(HierarchicaIToken Bucket)是一个可分类的队列
minor总是为0，在一个网卡的所有队列中必须是惟一的，对于类别来说，其major必须和它的父类别或父队列的major相同，内部则必须是惟一的
如果队列2:包含两个类别，则这两个类别的句柄必须是2:x这样的形式，并且它们的x不能相同， 比如2:1和2:2
为网卡eth0配置一个HTB队列：
tc qdisc add dev eth0 root handle 1:htb default 11
命令中的”add 表示要添加，”dev eth0 表示要操作的网卡为eth0。”root 表示为网卡eth0添加的是一个根队列。”handle 1: 表示队列的句柄为1:。”htb 表示要添加的队列为HTB队列。命令最后的”default 11 是htb特有的队列参数，意思是所有未分类的流量都将分配给类别1:11

可以利用下面这三个命令为根队列1创建三个类别，分别是1:1 1、1:12和1:13，它们分别占用40、40和20mb[t的带宽。
tc class add dev eth0 parent 1: classid 1:1 htb rate 40mbit ceil 40mbit
tc class add dev eth0 parent 1: classid 1:12 htb rate 40mbit ceil 40mbit
tc class add dev eth0 parent 1: cllassid 1:13 htb rate 20mbit ceil 20mbit
命令中，”parent 1:”表示类别的父亲为根队列1:。”classid1:11″表示创建一个标识为1:11的类别，”rate 40mbit”表示系统将为该类别确保带宽40mbit，”ceil 40mbit”，表示该类别的最高可占用带宽为40mbit。

需要将WWW、E-mail、Telnet三种流量分配到三个类别，即上述1:11、1:12和1:13，因此，需要创建三个过滤器，如下面的三个命令:
tc filter add dev eth0 protocol ip parent 1:0 prio 1 u32 match ip dport 80 0xffff flowid 1:11
tc filter add dev eth0 prtocol ip parent 1:0 prio 1 u32 match ip dport 25 0xffff flowid 1:12
tc filter add dev eth0 protocol ip parent 1:0 prio 1 u32 match ip dport 23 oxffff flowid 1:13
这里，”protocol ip”表示该过滤器应该检查报文分组的协议字段。”pr[o 1″ 表示它们对报文处理的优先级是相同的，对于不同优先级的过滤器， 系统将按照从小到大的优先级。
顺序来执行过滤器， 对于相同的优先级，系统将按照命令的先后顺序执行。这几个过滤器还用到了u32选择器(命令中u32后面的部分)来匹配不同的数据流。以第一个命令为例，判断的是dport字段，如果该字段与Oxffff进行与操作的结果是8O，则”flowid 1:11″ 表示将把该数据流分配给类别1:1 1

tc qdisc add dev eth0 root handle 1: htb default 21
tc class add dev eth0 partent 1: classid 1:1 htb rate 20mbit ceil 20mbit
tc class add dev eth0 parent 1: classid 1:2 htb rate 80mbit ceil 80mbit
tc class add dev eth0 parent 1:2 classid 1:21 htb rate 40mbit ceil 80mbit    
tc class add dev eth0 parent 1:2 classid 1:22 htb rate 40mbit ceil 80mbit
tc filter add dev eth0 protocol parent 10 prio 1 u32 match ip dport 80 0xffff flowid 1:21
tc filter add dev eth0 protocol parent 1:0 prio 1 u32 match ip dport 25 0xffff flowid 1:22
tc filter add dev eth0 protocol parent 1:0 prio 1 u32 match ip dport 23 0xffff flowid 1:1
这里为根队列1创建两个根类别，即1:1和1:2,其中1:1对应Telnet数据流，1:2对应80Mbit的数据流。然后，在1:2中，创建两个子类别1:21和1:22，分别对应WWW和E-mail数据流。由于类别1:21和1:22是类别1:2的子类别，因此他们可以共享分配的80Mbit带宽。同时，又确保当需要时，自己的带宽至少有40Mbit。


流量的处理由三种对象控制，它们是：qdisc(排队规则)、class(类别)和filter(过滤器)。
流量控制包括以下几种方式：
SHAPING(限制)
当流量被限制，它的传输速率就被控制在某个值以下。限制值可以大大小于有效带宽，这样可以平滑突发数据流量，使网络更为稳定。shaping（限制）只适用于向外的流量
SCHEDULING(调度)
通过调度数据包的传输，可以在带宽范围内，按照优先级分配带宽。SCHEDULING(调度)也只适于向外的流量
POLICING(策略)  
SHAPING用于处理向外的流量，而POLICIING(策略)用于处理接收到的数据
DROPPING(丢弃)  
如果流量超过某个设定的带宽，就丢弃数据包，不管是向内还是向外

查看：tc -s -d qdisc show dev eth0
删除tc规则：tc qdisc del dev eth0 root


CENTOS7采用 dmidecode 采集命名方案，以此来得到主板信息；它可以实现网卡名字永久唯一化（dmidecode 这个命令可以采集有关硬件方面的信息管，终端输入此命令可以看到硬件相关信息内容相当于window的鲁大师）
en表示：ethernet以太网，就是平时使用的双绞线方式。
enX(X常见有下面3种类型):
o: 主板板载网卡，集成设备的设备索引号。
p: 独立网卡：PCI网卡。
s：热插拨网卡，USB之类的，扩展槽的索引号（虚拟机里面的linux也看到基本是ens33，因为是可以随时添加与删除的）。
nnn(数字)表示： MAC地址+主板信息计算得出唯一的序列（如上面的ens33 里面的33数字）。

对网络设备的命名方式：
1)如果Firmware（固件) 或 BIOS为主板上集成的设备提供的索引信息可用，且可预测则根据此索引进行命名，如:ifcfg-ens33
2)如果Firmware（固件) 或 BIOS 为 PCI-E 扩展槽所提供的索引信息可用，且可预测则根据此索引进行命名，如：ifcfg-enp33
3)如果硬件接口的物理位置信息可用，则根据此信息进行命名，例如：enp2s0
如果上述都不可用时，则使用传统命名机制，如 eth0,eth1等。

