

01： 僵尸进程 聊天室项目实践

如何避免僵尸进程产生
	1.处理子进程退出状态 os.wait()   os.waitpid
		pid,status = os.wait()
		功能：在父进程中阻塞等待处理子进程退出
		返回值：pid退出的子进程的pid号，status获取子进程退出状态
		示例：
			#处理僵尸进程os.wait()
			# import os
			# from time import sleep
			# pid = os.fork()
			# if pid < 0:
			# 	print("error")
			# elif pid == 0:
			# 	sleep(3)
			# 	print("child process pid",os.getpid())
			# 	os._exit(2)
			# else:
			# 	pid,status = os.wait()         #阻塞函数，对退出进程进行处理
			# 	print(pid,status)
			# 	print(os.WEXITSTATUS(status))  #获取子进程退出状态
			# 	while True:
			# 		pass		
		pid,status = os.waitpid(pid, option)
		功能：在父进程中阻塞等待处理子进程退出
		参数：pid  -1表示等待任意子进程退出   >0 表示等待对应PID号的子进程退出
			  option  0表示阻塞等待         WNOHANG表示非阻塞
		返回值：pid退出的子进程的pid号，status获取子进程退出状态			
		示例：
			#处理僵尸进程os.waitpid()
			import os
			from time import sleep
			pid = os.fork()
			if pid < 0:
				print("error")
			elif pid == 0:
				sleep(3)
				print("child process pid",os.getpid())
				os._exit(2)
			else:
				while True:                                 #持续监测
					sleep(1)
					pid,status = os.waitpid(-1,os.WNOHANG)  #通过非阻塞的形式捕获子进程退出      
					if status != 0:                         #判断是否还有子进程，不然后面获取子进程退出状态会报错
						break
					else:
						print(pid,status)
						print(os.WEXITSTATUS(status))  #获取子进程退出状态

	2.让父进程先退出(父进程(初始执行进程)先退出，会暂时丧失对终端的控制)
		1.父进程创建子进程等待子进程退出
		2.父进程创建二级子进程后立即退出
		3.二级子进程变成孤儿进程，和原来的父进程各自执行事件
		示例：
			#创建二级子进程
			import os
			from time import sleep
			def f1():
				sleep(3)
				print("one thing")
			def f2():
				sleep(4)
				print("second thing")
			pid = os.fork()
			if pid<0:
				print("error")
			elif pid == 0:
				#创建二级子进程,二级进程的代码从这里os.fork开始执行
				p = os.fork()          
				if p ==0:
					f2()
				else:
					os._exit(0)
			else:
				os.wait() #等一级子进程退出
				f1()



功能：类似qq群聊
1.进入聊天室需要输入姓名及密码
2.有人进入及退出聊天室会通知其他人
3.一个发送，其他人都能收到


multiprocessing 模块创建进程
	1.需要将要执行的事件封装为函数
	2.使用multiprocessing模块中process类创建进程对象
	3.通过对象属性设置和process的初始化函数对进程进行设置，绑定要执行的函数
	4.启动进程，会自动执行进程绑定的函数
	5.完成进程的回收
	#创建子进程流程：
	process()          #功能：创建进程对象   参数：name 进程名称  target(必须) 绑定参数   args 元组给target函数按照位置传参   kwargs字典给target函数按照键值对传参 
	p.start()          #功能：启动进程（target函数会自动进行，此时进程真正被创建）
	p.join([timeout])  #功能：阻塞等待回收子进程     参数 超时时间

	使用multiprocessing创建子进程，同样子进程复制父进程的全部代码段，子进程只执行传入函数(target = fun)的语句，父子进程各自执行互不影响，父子进程有各自的运行空间
	如果join没回收到子进程，子进程退出后也会变成僵尸进程
	示例：
		import multiprocessing as mp
		from time import sleep
		def fun():
			sleep(3)
			print('子进程事件')
		#创建进程对象
		p = mp.Process(target = fun)
		#启动进程
		p.start()
		#语句会继续执行
		sleep(2)
		print('这是父进程')
		#阻塞/超时回收进程
		p.join()
	使用multiprocessing创建子进程往往父进程只是用来进程回收进程的，子进程只执行传入函数(target = fun)的语句
		示例：
		import multiprocessing as mp
		from time import sleep
		import os
		def fun1():
			sleep(3)
			print('子进程事件1',os.getpid())
		def fun2():
			sleep(2)
			print('子进程事件2',os.getpid())
		#创建进程对象
		thing = [fun1,fun2]
		L = []
		for i in thing:
			p = mp.Process(target = i)
			L.append(p)
			#启动进程
			p.start()
		for j in L:
			#阻塞/超时回收进程，虽然2号进程先退出，会短暂阻塞在1号进程，但是系统在2号进程退出时会记录状态，回收完1号进程，会再回收2号进程
			j.join()               





02： multiprocessing 进程池技术，进程间通信

os.path.getsize():获取文件大小
1.如果子进程从父进程拷贝对象，对象和网络或者文件相关联，那么父子进程会使用同一套对象属性，相互有一定的关联性
2.如果在子进程中单独创建对象，则和父进程完全没有关联
multiprocessing方法：进程对象属性
p.is_alive()   #判断进程生命周期状态，处于生命周期返回True，否则返回False
p.name         #进程名称 默认为process-1
p.pid          #进程的pid号
p.daemon       #默认状态False 主进程退出不会影响子进程执行，设置为True，则子进程会随着主进程结束而结束
			   # 要在start之前设置，一般不会join一起使用

创建自定义进程类
	1.继承Process
	2.编写自己的__init__，同时加载父类init方法
	3.重写run方法，可以通过生成的对象调用start自动运行
	示例：
		#自定义进程类
		from multiprocessing import Process
		import time
		class ClockProcess(Process):
			def __init__(self,value):
				self.value = value
				super(ClockProcess,self).__init__()
			def run(self):
				for i in range(3):
					print('the time is {}'.format(time.ctime()))
					time.sleep(self.value)
		
		#创建自定义进程类的对象
		p = ClockProcess(2)
		#自动调用run
		p.start()
		p.join()
		
多进程优缺点：
	优点：1.可以使用计算机多核，进行任务的并发执行，提高执行效率    2.空间独立，数据安全    3.运行不受其他进程影响，创建方便
	缺点：进程的创建和删除消耗的系统资源较多
		
进程池技术：
	产生原因：如果有大量任务需要多进程完成，则可能需要频繁的创建删除进程，给计算机带来较多的资源消耗
	原理：创建适当的进程放入进程池，用来处理待处理事件，处理完毕后进程不销毁，仍然在进程池中等待处理其它事件，进程的复用降低了资源的消耗
	使用方法：
		1.创建进程池，在池内放入适当的进程(与核数一致)
		2.将事件加入到进程池等待队列
		3.不断取进程执行事件，直到所有事件执行完毕
		4.关闭进程池，回收进程
	from multiprocessing import Pool
		Pool(processes)                    #功能：创建进程池对象                参数：表示进程池中有多少进程processes = n
		pool.apply_async(fun,args,kwds)    #功能：将事件放入到进程池队列(异步，多进程执行速度/输出顺序不一定)        参数：func 事件函数(要先于进程池对象之前创建)    args 以元组形式给func传参   kwds 以字典形式给func传参
										   #返回值：返回一个代表进程池事件的对象   通过调用 "返回对象.get()" 可以获得事件函数的返回值
	    #pool.apply(fun,args,kwds)   	   #功能：将事件放入到进程池队列(同步)        参数：func 事件函数(要先于进程池对象之前创建)    args 以元组形式给func传参   kwds 以字典形式给func传参
		pool.close()                       #功能：关闭进程池，不能新增事件，但仍可以执行原有事件 
		pool.join()                        #功能：回收进程池
		pool.map(func,iter)                #功能：将要做的事件放到进程池   参数：func 执行函数  iter迭代对象          返回值：返回事件函数的返回值列表    r = pool.map(fun,range(10))是一个返回值列表

	示例：
		#进程池
		# from multiprocessing import Pool
		# from time import sleep,ctime
		# def worker(msg):
		# 	sleep(2)
		# 	print(msg)
		# 	return msg
		# result = []
		# #创建进程池
		# # pool = Pool(4)
		# pool = Pool(processes = 4)
		# for i in range(10):
		# 	msg = 'hello %d' % i
		# 	#将事件放入进程池队列，等待执行
		# 	# pool.apply(func = worker,args = (msg,))  #同步
		# 	# pool.apply_async(func = worker,args = (msg,))
		# 	r = pool.apply_async(func = worker,args = (msg,))
		# 	result.append(r)
		# #关闭进程池
		# pool.close()
		# #回收
		# pool.join()
		# for i in result:	
		# 	print(i.get())

进程间通信(IPC)
原因：进程空间相对独立，资源无法相互获取，此时在不同进程间通信需要专门方法

python中有地址，没有指针，使用内存不方便	
进程间通信方法：
	1.管道通信(pipe):
		通信原理： 在内存中开辟管道空间，生成管道操作对象，多个进程使用"同一个"管道对象进行操作即可实现通信(父进程创建，子进程继承)   
		from multiprocessing import Pipe
		fd1,fd2 = Pipe(duplex = True)    #功能：创建管道   参数：默认表示双向管道，如果设置为False则为单向管道    返回值：表示管道的两端，如果是双向管道，都可以读写，如果是单向管道，则fd1只读  fd2只写
		fd.recv()     #功能：从管道读取信息   返回值：读取到的内容。如果管道为空则阻塞
		fd.send(data) #功能：向管道写入内容   参数：要写入的内容  可以发送python数据类型	
	2.消息队列(Queue)：先进先出
		通信原理：在内存中建立队列数据结构模型，多个进程都可以通过队列存入内容，取出内容的顺序和存入顺序保持一致
		q = Queue(maxsize = 0)   #功能：创建消息队列    参数：表示最多存放多少消息，默认表示根据内存分配存储    返回值：队列对象
		q.put(data,[block,timeout])   #功能：向队列存储信息   参数：data要存的内容   block默认队列满时会阻塞，设置为False则非阻塞   timeout超时时间   返回值：返回取出的内容
		q.full()                 #判断队列是否为满
		q.empty()                #判断队列是否为空
		q.qsize()				 #判断队列消息数量
		q.close()                #关闭队列
	3.共享内存(Shared memory)：
		通信原理：在内存中开辟一块空间，对多个进程可见，进程可以写入输出，但是每次写入的内容会覆盖之前的内容
		obj = Value(ctype,obj)   #功能：开辟共享内存空间     参数：ctype要存储的数据类型  obj共享内存的初始化数据      返回值：共享内存对象  
		obj.value #存取单个数据类型，即为共享内存值，对其修改即修改共享内存
		obj = Array(ctype,obj)   #功能：开辟共享内存空间   参数：ctype 要存储的数据格式   obj初始化存入的内容，比如列表，字符串，如果是整数则表示开辟空间的个数    返回值：返回共享内存对象  可以通过遍历/下表获取每个元素的值   如果存入的是字符串 obj.value 表示字符串的首地址
	4.信号通信(内核发出的)：信号通信中唯一一种异步通信方法
		一个进程向另一个进程发送一个信号来传递某种讯息，接受者根据收到的信号进行相应的行为
			kill -l   查看系统信号
			sighup:终端关闭    sigint:ctrl-C终止   sigquit:ctrl-\终止    sigill/sigfpe:执行指令/算术运算错误终止  sigalrm:时钟信号
			sigkill:立即结束   sigstop:暂停       sigtstp:ctrl-z暂停    sigchld:子进程改变状态发信号给父进程   sigabort:结束进程
		os.kill(pid,sig)   #功能：发送信号   参数:pid目标进程  sig要发送的信号
		signal.alarm(sec)  #功能：终止进程   参数:sec 时间sec  进程中只能有一个时钟，第二个会覆盖第一个时间
		signal.pause()     #功能：阻塞等待接收一个信号，先让进程阻塞，直至有信号发送过来直接结束
		signal.signal(signum,handler)  #功能：处理(修改)信号    参数：signum 要处理的信号   handler 信号的处理方法(SIG_DFL表示使用默认的方法处理 SIG_IGM表示忽略这个信号 func传入一个函数表示用指定函数处理(格式：def func(sig,frame) sig:捕获到的信号 frame：信号对象))      
	5.信号量:   
	6.套接字：本地套接字	


                 管道         		 消息队列        		 共享内存
开辟空间         内存         		   内存          		    内存
读写方式   两端读写/双向/单向 		  先进先出       		覆盖之前内容
效率             一般         		    一般         		    较高
应用          多用于父子进程  		 广泛灵活/第三方 		 注意互斥操作
		






03： 进程通信 进程同步互斥


同步执行：按照顺序逐句执行，一步完成再做下一步
异步执行：在执行过程中利用内核记录延迟发生或者准备处理的事件。这样不影响应用层的持续执行，当事件发生时再由内核告知应用层处理

进程间通信方法：
	信号量(信号灯)：
		给定一个数量，对多个进程可见，且多个进程都可以操作，进程通过对数量多少的判断执行各自的行为
		sem = multiprocessing.Semaphore()   #功能：创建信号量   参数：信号量初始值   返回：信号量对象
		sem.get_value()                     #获取信号量
		sem.acquire()                       #将信号量减1，当信号量为0会阻塞
		sem.release() 						#将信号量加1
	
进程的同步和互斥：
	临界资源：多个进程或线程都能够操作的共享资源
	临界区：操作临界资源的代码段
	同步：同步是一种合作关系，为完成某个任务，多进程或者多线程之间形成一种协调，按照约定或条件执行操作临界资源(读<-->写/收<-->发)(Event)
	互斥：互斥是一种制约关系，当一个进程或者线程使用临界资源时进行上锁处理，当一个进程使用时会阻塞等待，直到解锁后才能继续使用(Lock)
	multiprocessing.Event：事件
	e = Event()          #创建事件对象
	e.wait([timeout])    #设置事件阻塞,在这之后的内容不许运行
	e.set()              #事件设置，当事件被设置后,e.wait()不再阻塞
	e.clear()            #清除设置，当事件设置被clear后，e.wait又会阻塞
	e.is_set()           #事件状态判断
	示例：
		#共同操作一个临界区，人为控制操作顺序
		from multiprocessing import Event,Process
		from time import sleep
		def wait_event():
			print('想操作临界区')
			e.wait()
			print('开始操作临界区资源',e.is_set())
			with open('file') as f:
				print(f.read())
		#事件对象
		e = Event()
		p1 = Process(target = wait_event)
		p1.start()
		print('主进程操作')
		with open('file','w') as f:
			f.write('I love China')
		e.set()
		print('释放临界区')
		p1.join()

	Lock 锁
	lock = Lock()       #创建对象
	#第一种上锁解锁方式
	lock.acquire()      #上锁，如果锁已经是上锁状态调用此函数会阻塞
	lock.release()      #解锁
	#第二种上锁解锁方式
	with lock:          #上锁
		语句块
		...             #解锁

线程：单进程也叫单线程   主线程/分支线程
	线程也是一种多任务编程方法,可以利用计算机多核资源完成程序的并发执行，线程又被称为轻量级的进程
	线程特征：
		1.线程计算机多核分配的最小单位   2.一个进程可以包含多个线程   3.线程也是一个运行的过程，消耗计算机资源，多个线程共享进程的资源和空间  4.线程的创建删除消耗的资源都要远远小于进程   
		5.多个线程之间执行互不干扰       6.线程也有自己的特有属性，比如指令集  id
threading 模块创建线程
	threading.Thread()     #功能：创建线程对象  参数：name 线程名称(默认Thread-1)  target：线程函数   args：元组 给线程函数位置传参   kwargs：字典 给线程函数键值传参
	t.start()               #启动线程，自动运行线程函数
	t.join([timeout])      #回收线程
	示例：
		#创建线程
		import threading
		from time import sleep
		import os
		a = 1
		#线程函数
		def music():
			global a                          #修改全局变量，不加会报错
			print('分支线程a = ', a)
			for i in range(2):
				sleep(1)
				print('listen music')
			a = 100
		#创建线程对象
		t = threading.Thread(target = music)
		t.start()
		t.join()
		print('主线程a =',a)                  #主线程和分支线程使用的是同一个进程的资源和空间
	线程对象属性：
		t.is_alive()        		  	#查看线程状态
		t.name()						#线程名称
		t.setName()						#设置线程名称
		t.getName()                     #获取线程名称
		threading.currentThread()		#获取当前线程对象   threading.currentThread().getName()
		t.daemon =False                 #默认情况主线程退出不会影响分支线程执行,等同t.setdaemon(False),如果设置为True 则分支线程随主线程退出
		t.isDaemon()
创建自定义的线程类：
	1.继承Thread    2.加载Thread中的__init__方法     3.重写run方法，该方法可以通过生成的对象调用start自动运行

线程通信：
	通信方法：多个线程共享进程的空间，所以线程间通信使用全局变量完成
	注意：线程间使用全局变量往往要同步互斥机制，保证通信安全
	线程同步互斥方法
	线程的event
		e = threading.Event()
		e.wait([timeout])
		e.set()
		e.clear()

	线程锁：
		lock = Lock()       #创建对象
		#第一种上锁解锁方式
		lock.acquire()      #上锁，如果锁已经是上锁状态调用此函数会阻塞
		lock.release()      #解锁
		#第二种上锁解锁方式
		with lock:          #上锁
			语句块
			...             #解锁		
	示例：
		import threading
		a = b = 0
		lock = threading.Lock()
		def value():
			while True:
				lock.acquire()     #可以上锁，如果有锁存在则阻塞
				if a != b:
					print('no equel')
				lock.release()     #解锁
		t = threading.Thread(target = value)
		t.start()
		while True:
			with lock:           #可以上锁，如果有锁存在则阻塞
			a += 1
			b += 1
		t.join()

python线程的GIL问题(全局解释器锁)
	超级锁：给解释器加锁，解释器同一时刻只能解释一个线程
	后果：一个解释器同一时间只能解释执行一个线程，所以导致python线程效率低下。但是当遇到io阻塞时线程会主动让出解释器，因此python线程更加适合高延迟的io程序并发
	解决方法：
		1.尽量用进程完成并发  
		2.不适合c解释器(即python解释器)
		3.尽量使用多种方案组合的方式进行并发操作，线程用作高延迟io




04： threading线程 线程同步互斥 GIL

进程和线程的区别和联系：
	1.两者都是多任务编程方式，都能够使用计算机的多核
	2.进程的创建和删除消耗的计算机资源比线程要多
	3.进程空间独立，数据互不干扰，有专门的通信方法，而线程使用全局变量进行通信
	4.一个进程可以创建多个线程分支，两者之间存在包含关系
	5.多个线程共用进程的资源，在共享资源操作时往往需要同步互斥操作
	6.进程线程都在系统中有自己的特有属性标志，如id，代码段，命令集等
	7.python线程有GIL问题，线程效率低下
	8.进程是计算机分配资源的最小单位，线程是多核分配的最小单位
使用场景：
	某个任务中并发比较多，此时多线程消耗资源较少(python除外)
	不同的独立的任务模块，用多进程相对好管理
	在通信上考虑可行性，如果数据逻辑复杂需要的同步互斥较多，使用多线程容易出错
问题：
	进程线程的区别
	进程间通信有哪些，有什么特点
	什么是同步互斥，分别在什么情况下使用
	僵尸进程，进程状态  线程效率...


网络通信模型
	服务器：
		硬件服务器：主机  集群
		软件服务器：编写的服务端应用程序，在硬件服务端上运行，提供一定的完成的后端服务
			httpserver --> 处理http请求
			webserver --> 网站的后端服务程序

	前端(浏览器)   用户端   客户端(移动端)   前台应用
		特征：与用户直接交流，提供给用户使用
		要求：良好的用户体验
	后端   服务器   后台应用
		特征：提供逻辑处理，数据处理
		要求：更高的并发量，更快的处理速度，更强的安全性

	服务器模型：
		服务端的基本结构：
			c/s  客户端服务器模型
			b/s  浏览器服务端模型
	
	循环服务器模型：循环接收客户端请求，处理请求，同一时刻只能处理一个请求，处理完毕后再处理下一个
		优点：实现简单，占用资源少
		缺点：无法同时处理多个客户端请求
		适应情况：处理的任务可以很快完成，不需要建立并发，udp比tcp更适合循环模型
	
	并发服务器模型：能够同时处理多个客户端的请求
		io并发：io多路复用
			优点：资源消耗少，能同时处理多个io
			缺点：只能监控io时间，当多个任务都是cpu计算时无法同时处理	
		多进程多线程并发：为每个客户端创建单独的进程或者线程处理客户端请求
			优点：每个客户端都可以长期占有服务器，能使用多核资源处理io或者cpu计算
			缺点：资源消耗较高


多进程并发：
	基于fork完成多进程网络并发
		1.创建套接字，绑定，监听
		2.等待接收客户端连接请求
		3.当有新的客户端连接时，创建新的进程处理客户端请求
		4.原有进程继续等待其它客户端连接，新的进程处理客户端具体请求
		5.如果客户端退出，则销毁对应的进程

ftp文件服务器：
	功能：
		1.使用print打印一定的格式，作为命令的输入提示界面
		2.服务端和客户端两部分，要求启动服务器后可以有多个客户端同时操作
		3.客户端可以查看服务器文件库中有什么文件
		4.客户端可以选择文件库的文件进行下载到本地
		5.客户端可以上传本地文件
		
	os.listdir(path)     #获取目录下文件列表
	os.path.isfile()     #判断是否为普通文件
	os.path.isdir()      #判断是否为目录

多线程并发：
	基于threading模块
		1.创建套接字，绑定监听
		2.接收客户端请求
		3.创建新的线程处理客户端请求
		4.主线程继续等待其它客户端连接，分支线程处理具体请求
		5.当客户端退出则线程退出





05： 并发编程 tftp文件服务器

多线程并发：threading的多线程并发
	对比多进程并发：
		1.消耗资源较少
		2.线程应该更注意共享资源的操作
		3.注意GIL问题，网络延迟较高，线程并发是可行方案
	实现步骤：
		1.创建套接字，绑定监听
		2.接收客户端请求，创建新的线程处理客户端请求
		3.主线程继续接收其它客户端连接
		4.分支线程启动对应的函数处理客户端请求
		5.当客户端断开，则分支线程结束

	import traceback  
	traceback.print_exc()    #更详细的打印异常信息
	示例:
		import traceback
		a = 10
		try:
			b = a / 0
		except Exception as e:
			# print(e)
			traceback.print_exc()
		print('程序打印完毕')


集成模块的使用
		socketserver   #功能：通过模块的不同类的组合完成多进程/多线程的tcp/udp的组合
			StreamRequestHandler
			StreamRequestHandler
			TCPServer
			UDPServer
			ForkingMixIn            #创建多进程
			ForkingTCPServer		#ForkingMixIn + TCPServer 即创建多进程又创建tcp 
			ForkingUDPServer
			ThreadingMixIn          #创建多线程
			ThreadingTCPServer
			ThreadingUDPServer

使用集成模块编写http服务器
	函数内部普通变量作用域为函数内部本身
	但是类内的方法，如果self.argv，这个就变成变量属性，属于类内变量，而不是方法内变量，相当于扩大了作用范围



协程基础：
	定义：纤程，微线程。协程本质是一个单线程程序，所以协程不能够使用计算机多核资源。
	作用：能够高效的完成并发任务，占有较少的资源，因此协程的并发量较高
	原理：通过记录应用层的上下文栈区(函数/类空间)，实现再运行中进行上下文跳转，达到可以选择性的运行想要运行的部分，以此提高程序的运行效率
	优点：消耗资源少，无需切换开销，无需同步互斥，io并发性好(io多路复用通过内核，协程是记录栈，更加节省资源，进程是进程切换，协程不需要切换，更加节省资源)
	缺点：无法利用计算机多核
	yield  --->  协程实现的基本关键字

第三方库：
	greenlet：
		greenlet.greenlet()          #生成协程对象
		gr.switch()					 #选择要执行的协程事件
	gevent
		1.将协程事件封装为函数
		2.生成协程对象
			gevent.spawn(func,argv)   #功能：生成协程对象     参数：func协程函数   argv给协程函数传参(不定参)    返回值:返回协程对象
		3.回收协程
			gevent.joinall()          #功能：回收协程         参数：列表   将要回收的协程放入列表
			gevent.sleep(n)           #功能：设置协程阻塞，让协程跳转/触发协程特有阻塞执行    参数:n 阻塞时间
		
		from gevent import monkey
		monkey.patch_all()             #功能：修改套接字的io阻塞行为，必须在socket导入之前使用
	示例：
		#gevent协程服务器，协程通过加载多次handler(加载成多个协程空间)
		import gevent
		from gevent import monkey
		monkey.patch_all()
		from socket import *
		from time import ctime
		def server(port):
			s=socket()
			s.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)
			s.bind(('0.0.0.0',port))
			s.listen(3)
			while True:
				c,addr = s.accept()
				print('connect from',addr)
				# handler(c)              #循环服务器
				gevent.spawn(handler,c)   #协程服务器
		def handler(c):
			while True:
				data = c.recv(1024)
				if not	data:
					break
				print(data.decode())
				c.send(ctime().encode())
			c.close()
		if __name__ == '__main__':
			server(8888)		




























