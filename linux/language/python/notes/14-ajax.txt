

01： Ajax JSON
 
AJAX - 阿贾克斯
“Asynchronous Javascript And XML”（异步 JavaScript 和 XML）
同步访问：当客户端向服务器发送请求时，服务器在处理过程中，浏览器只能等待，效率偏低
异步访问：当客户端向服务器发送请求时，服务器在处理过程中，客户端可以做其它的操作，不需要一直等待，效率偏高

HTML超文本标记语言（英語：HyperText Markup Language）：数据显示
XML：可扩展标记语言（eXtensible Markup Language）：数据存储

AJAX优点：
	1.异步访问
	2.局部刷新
AJAX使用场合：
	1.搜索建议
	2.表单验证
	3.前后端完全分离
AJAX的核心对象-异步对象(XMLHttpRequest,简称"xhr")
	1.xhr：代替浏览器向服务器发送请求并接收响应，由JS提供
	2.创建异步对象(xhr)
		主流的异步对象是XMLHttpRequest类型的，并且主流浏览器都支持(IE7+,Chrome,Firefox,Safari,Opera)
			IE低版本需要使用ActiveXObject()来创建异步对象
		判断：
			<script>
				if(window.XMLHttpRequest){
					alert('支持')
				}
				else{
					alert('请支持ActiveXObject')
				}
			</script>

		支持XMLHttpRequest: new  XMLHttpRequest()
		不支持:new  ActiveXObject("Microsoft.XMLHTTP")
	3.xhr的成员
		1.方法 - open()
			作用：创建请求
			语法：open(method,url,async)
				method:请求方法
				url:请求地址
				async: True使用异步方式发送请求   False使用同步方式发送请求
		2.属性 - readyState
			作用：请求状态，通过不同的请求状态值来表示xhr与服务器的交互情况
			由0-4共5个值表示5个不同的状态	
			0: 请求未初始化
			1: 与服务器已建立连接
			2: 服务器已接收请求
			3: 请求处理中
			4: 请求已完成，且响应已就绪
		3.属性 - status
			作用：表示服务器端的响应状态码
				200   404    500
				
		4.属性 - responseText
			作用：服务器端的响应数据
		5.事件 - onreadystatechange
			作用：每当xhr的readyState属性值发生改变的时候要触发的操作/回调函数
				在该函数中，只有当readyState的值为4并且status的值为200的时候，就可以正常的接收responseText了
		6.方法 - send()
			作用：通知xhr向服务器端发送请求
			语法：send(body)
				body:表示请求的主体(post push)
				get请求：是没有请求主体的，所以body的值为null.（传参只是url传参，并不是请求主体传参）
					xhr.send(null)
				post请求：有请求主体
					xhr.send("请求数据")
					xhr.send("参数=值&参数值=值&...")
	4.AJAX的操作步骤
		1.GET请求
			<script>
				1.创建xhr对象
					var xhr = getXhr();
				2.创建请求 - open()
					xhr.open('get','/02-server',true);
				3.设置回调函数 - onreadystatechange
					判断状态并且接收数据
						xhr.onreadystatechange = function(){
							//监听xhr的状态码，readyState的值为4并且status的值是否为200
							if(xhr.readyState == 4 && xhr.status == 200){
								//接收服务器端的响应数据
								var resText=xhr.responseText;
								//业务处理
								document.getElementById('show').innerHTML = resText;
							}
	
						}
				4.发送请求 - send()
				xhr.send(null)
				}
			</script>

			

	5.post请求
		1.请求提交的数据要作为send()的参数进行提交xhr.send("参数=值&参数=值");
		2.ajax的content-type默认为"text/plain"，这个默认是只能传递ASCII   （multipart/form-data为传输文件使用）
			xhr.setRequestHeader("Content-Type","application/x-www-form-urlencoded")
 



02： 使用JSON进行数据交换 Jquery对Ajax的支持 跨域访问

JSON
	JavaScript Object Notation(JS对象表现形式) 是一种轻量级的数据交换格式，将复杂结构的字符串转换成JS对象的表现形式，方便前端解析
	JSON的语法
		1.使用{}表示一个对象
		2.在{}中使用key:value的形式来表现属性(数据)
		3.key必须使用""引起来，value是字符串，也必须用""引起来
		4.多对key:value之间用,隔开
		5.使用数组[]保存多个对象
	使用jq循环遍历数组
		1.$arr.each();
			$arr:jquery中的数组
			语法：
				$arr.each(function(i,obj){
					arr:jq的数组
					i:遍历出来的元素的下标
					obj：遍历出来的元素
				});
			示例：
				<script>
					var arr=[JSON]
					$(arr).each(function(i,obj){
						console.log("第"+(i+1)+"个元素");
						console.log("姓名:"+obj.name)
					})
		2.$.each()
			$ -> jquery
			语法：$.each(arr,function(i,obj){
				arr:原生的js数组
			}),
		
	后台处理json
		1.前后台json的处理流程
			1.在后端先查询出/得到复杂结构的数据
			2.在后端将负载结构的数据转换成复合json格式的字符串
			3.在后端将json格式的字符串响应给前端
			4.在前端将json格式的字符串再转换成js对象/数组
			5.在前端对js对象/数组进行循环遍历/取值操作
		2.Python中的Json处理
			在python中可以使用json类完成json的转换
			import json
			jsonStr = json.dumps(元组|列表|字典)
			resp = make_response(jsonStr)
			return jsonStr
		3.前端中的JSON处理
			由于服务器端响应回来的数据是String，所以在前端对复杂结构的数据必须转换成JS对象或数组，然后再取值或遍历
			在JS中：
				var js对象 = JSON.parse(JSON字符串)
				

视频2有省份和城市的下拉菜单项目
视频3：jquery的ajax请求封装


跨域(cross domain)
	1.非同源的网页，相互发送请求的操作就是跨域操作
		http协议中有一种"同源策略"
		同源：在多个地址中，相同协议，相同域名，相同端口被视为"同源"
		在http中，必须是同源地址才能互相发送(异步)请求，非同源的请求会被拒绝(例外：<script>和<img>)
			localhost 和 127.0.0.1 是非同源的
	2.通过<script>向服务器发送请求
		由服务器资源指定前端页面的那个方法来执行响应的数据
		1.前端中想实现跨域操作时，动态创建script标记
			var script=document.createElement("script")
		2.为script元素设置相应的属性
			1.设置type的值为text/javascript
			2.设置src的值为请求地址
		3.发送请求	
			将创建好的script元素追加到网页中
				var body = document.getElementsByTagName("body")[0]
		4.在前端，创建处理数据的响应方法
			function process(data){
				...
			}
		5.在服务端响应数据
			特点:指定调用前端的哪个处理方法
				def xxx():
					return "process('xxxx')"
		#动态接收前端方法，用callback

jquery的跨域
	jsonp
		方案一
		$.axaj({
			url:'xxx',
			type:'get/post',
			dataType:'jsonp',  指定为跨域访问
			success:function(data){
				响应内容
			}
		});
		方案二




