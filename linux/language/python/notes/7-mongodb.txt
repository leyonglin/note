
01： MongoDB基本概念 常用数据类型
02： MongoDB Shell 文档 
03： 索引 聚合
04： Python操作MongoDB 增删改查

游标：cursor
	通过获取操作数据库的返回结果，得到返回结果对象。通过游标可以进一步获取操作结果数据(类似for遍历和迭代器，游标效率更高，防止大量操作阻塞)
	将返回结果赋给一个js变量，作为查找结果游标
		var cursor = db.class.find()
	查看是否有下一个结果
		cursor.hasNext()
	获取下一个结果
		cursor.next()

操作步骤：
	1.创建mongodb的数据库连接对象
		conn = pymongo.MongoClient('localhost',27017)
	2.生成数据库对象
		db = conn.stu  或 db = conn['stu']
	3.生成集合对象
		myset = db.class  或 myset = db['class']
	4.集合操作(增删改查索引聚合)
		print(dir(myset))  #查看提供的方法		
	5.关闭集合对象
		conn.close()
	示例：
		from pymongo import MongoClient
		#创建数据库连接
		conn = MongoClient('localhost',27017)
		#创建数据库对象
		db = conn.stu
		#创建集合对象
		myset = db.class1
		#数据库操作
		# print(dir(myset))  #查看提供的方法
		
		
		#插入数据
		# myset.insert({'name':'林','king':'皇帝'})
		# myset.insert_many([{'name':'wang','juese':'baobao'},{'name':'wang','juese':'laopo'}])   #插入多条记录(列表)
		
		#查找操作find(),返回一个结果游标对象
		# dic = myset.find_one({},{'_id':0})       #返回一个字典{'name': '林', 'king': '皇帝'}
		# print(dic)
		# cursor = myset.find({},{'_id':0})        #返回对象，类似迭代器一样<pymongo.cursor.Cursor object at 0x7f0b3ebc7ba8>
		# print(cursor)      
		# for i in cursor:
		# 	print(i)
		# 	print(i['name'],i['king'])
		
		#操作符使用
		# myset1 = db.class1
		# cursor = db.class1.find({'a':{$gt:'5',$lt:'8'}},{_id:0})
		
		#总结：在pymongo中所有操作符的用法同mongo shell相同,只是操作时加引号
		#cursor对象属性。next()  limit()  skip()  count()  sort()
		#for 或者 next 使游标位置不再指向原来的位置，调用limit skip  sort等会报错
		
		
		#关闭连接
		conn.close()


	#存储小文件，直接转换为二进制格式插入到数据库
	import bson
	bson.binary.Binary()  #功能：将bytes格式子串转换成mongodb的二进制存储格式





















