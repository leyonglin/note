
01： WEB与Internet HTML 文本标记 列表标记 图像和链接 表格标记 

web：页面，基于b/s模式的应用程序

服务器：接收用户请求并相应
通信协议：规范数据传输及打包方式
服务器：接收用户请求并相应	
	1.接收用户请求并响应
	2.存储数据
	3.具有安全性功能
浏览器：
	1.代替用户向服务器发送请求
	1.作为响应数据的解释引擎，呈现图形化界面
浏览器引擎：
	1.渲染引擎  -  解析HTML CSS控制页面渲染
	2.js引擎   -  解析js脚本
前端技术
	1.HTML  书写页面结构和内容
	2.CSS    设置网页中元素的样式
	3.js     实现网页的交互
	4.工具库，框架

HTML：超文本标记语言HyperText  Markup Language
	作用：书写页面结构
	超文本：具有特殊功能的文本
		普通文本a        超文本a   表示超链接   超文本b  表示加粗
	标记：标签、元素
		主要用来标记网页中的内容，可以实现网页布局及js交互
	运行工具：以Chrome浏览器为准

标签分类：
	双标签：成对出现：<html></html>
	单标签:<hr>或<hr/>
	标签嵌套：
		1.成对的标签中出现其它标签
		2.嵌套结构中，外层标签称为"父标签"，内层元素称为“子元素”，多层嵌套时：内部元素称为后代元素

	标签属性：
		用来修饰当前标签的显示效果，对当前标签或者网页的补充设置
			1.书写位置：标签属性都书写在开始标签中，与标签名之间使用空格隔开
			2.属性是由属性名和属性值组成的。属性名=“属性值”
			3.多个属性时，属性之间使用空格隔开
		规范：
			1.不区分大小写，推荐使用小写
			2.保持适当缩进，保证代码可读性
			3.保持适当注释,不能以属性的形式嵌套在标签内部
				<!-- 
					注释内容
				-->
			4.html中的换行与空格
				html会忽略多余的空格，只显示为一个，代码中的换行也会转换成一个空格
		html文档组成
			1.文档类型声明：<!doctype html>
				作用：
					1.告诉浏览器文档为html文档  2.按照h5的渲染方式解析网页		
					
				<html lang="en"> 						#显示是否翻译改网站，文档开始
					<head>						#一般用户不可见内容
						<meta charset="UTF-8">					#浏览器翻译引擎
						<meta name="Keywords" content="">		#关键字，排名匹配
						<meta name="Description" content="">	#网站描述
					</head>
					<body>
					我的第一个网页，网页的主体信息，所有需要呈现给用户的，需要显示在窗口中的内容，都在body中书写
					</body>
				</html>		
				
			2.标题标签
				作用：以标题的形式显示文本(加粗，字号不同)
				<h1></h1>     							#1-6级标题
			3.段落标签<p></p>
				<p align='left'>这是一段文本</p>        #段落，左对齐  center中   right右
			4.其它的文本标签
				1.文本加粗：<b></b>     <strong></strong>
				2.文本斜体：<i></i>
				3.添加下划线：<u></u>
				4.添加删除线：<s></s>
					以上四种，不常用
				5.上标：<sup></sup>
				6.下标：<sub></sub>
				7.行内分区标签<span></span>   #一般嵌套在其它标签中，用来为特殊文本添加样式
				8.<label></label>             #添加普通文本标签
			5.格式标签
				1.换行标签
					<br>
				2.水平线标签
					<hr>
				3.字符实体
					&lt;   <
					&gt;   >
					&nbsp; 表示一个空格
					&copy; 版权符号
					&yen;  人民币符号
				4.块级分区标签
					<div></div>
					作用：容器标签，常用于页面模块划分
				5.标签嵌套规范：
					1.标签类型划分：
						1.块级元素：
						独占一行，不与其它元素共行
							h1-h6   p   div
						2.行内元素：
							可以与其它元素共行显示
					1.块级元素中可以嵌套任意类型的类型
					2.行内元素中尽量只嵌套行内元素
					3.段落标签<p>不能嵌套其它块元素
				
				


02： 表单 CSS介绍及使用方法 CSS样式表特征 CSS选择器 

url(Uniform Resource Locator统一资源定位符)：
	作用：标识网络或本地资源的位置，俗称路径
	组成：协议  域名  文件目录  文件名
	分类：
		1.绝对路径：从计算机的根目录开始查找，构成的目录就叫绝对路径
			根目录都以 / 或者是盘符 c:/ d:/盘 标识
				适用于网络路径，不适用于项目开发过程中访问本地文件
		2.相对路径：
			从当前所在的文件夹(目录)开始查找资源，构成的路径就叫相对路径
	注意：
		1.url严格区分大小写
		2.网络url中避免出现中文

图片：
	作用：在网页中插入一张图片
	语法：<img src="url">
	属性：
		src:必填图片路径   width:设置图片狂顶，取值为像素200px   height:设置图片高度，像素单位可以省略
		title:图片的描述信息，在鼠标悬停在图片上方时出现   alt:设置图片加载失败之后的提示文本
		
超链接标签：
	1.提供了从当前文件跳转到其它文件的功能
	2.语法：<a href="url">超链接内容</a>
	3.属性：
		href:必填属性，指定连接地址。""表示跳转至当前页包含网络请求，相当于刷新。
									 "#"表示当前页，不包含网络请求
		target:设置目标文件的打开方式，指的是否新建窗口打开，默认在当前窗口打开目标文件
				_self 默认值，在当前窗口打开
				_blank 新建窗口打开
	4.锚点链接：
		作用：在指定文件的指定位置进行跳转
		语法：<a href="#6">内容描述</a>
			  <a name="6"></a>
		 
	5.表格标签
		1.标签介绍：
			表格标签：<table></table>
			行标签：<tr></tr>
			单元格标签：<td></td>
		2.创建顺序：
			1.创建表格标签<table></table>
			2.表格中创建行，每一行就是一个tr
			3.在行中创建单元格存放数据，每一个单元格对应一个td
		3.标签属性
			1.table的标签属性
				1.border：设置表格边框，取值为像素值
				2.bgcolor：设置表格背景颜色，取值颜色的英文单词
				3.width：设置表格宽度
				4.height：设置表格高度
				5.align：表格的水平对齐方式，取值left  center  right
				6.cellspacing：设置单元格的外边距(单元格与单元格之间或者单元格与表格边框之间的距离)
				7.cellpadding：表示单元格的内边距(单元格内容与单元格边框之间的距离)
			2.tr标签属性
				1.bgcolor：设置行背景颜色
				2.align：设置内容水平对齐方式left/center/right
				3.valign：设置内容垂直对齐方式top/middle/bottom（默认水平居左，垂直居中）
			3.td标签属性
				1.bgcolor：设置单元格的背景颜色
				2.width：设置单元格的宽度
				3.height：设置单元格的高度
				4.align：单元格的水平对齐方式，取值left
				5.valign：设置单元格垂直对齐方式top/middle/bottom（默认水平居左，垂直居中）
			4.单元格合并：重要
				涉及单元格跨行或跨列合并的属性rowspan  colspan 是单元格独有的属性
					1.单元格的跨行合并：从当前单元格(包含)开始，向下合并几行
						<td rowspan="3"></td>
					2.单元格的跨列合并：从当前单元格(包含)开始，向右合并几个单元格<td colspan="3"></td>
				注意：一旦发生单元格合并，要时时调整表格结构，保证表格结构的完整
					跨行，要删除后续行中多余的单元格
					跨列，当前行中多余的单元格
				表格结构:
					行分组：允许将表格中的若干行划分为一组，便于管理
					语法：1.表头行/主体/尾部分组 
					<thead>/<tbody>/<tfoot>
						<tr>
							<td></td>
						</tr>
					</thead>/</tbody>/</tfoot>	 
				表格的结构化标签<thead>/<tbody>/<tfoot>可以省略，省略时，所有行和单元格会被自动添加到tbody中，作为表格主体信息
				表单：用于接收用户输入的数据，并提交给服务器
					表单二要素：
						1.表单标签 <form></form>
							收集用户信息，并且提交给服务器
						2.表单控件：
							提供一组可以跟用户交互的可视化组件
							form元素：重要
								1.form本身不可见的，但是不能省略，因为数据的提交功能要由form实现
								2.语法：	
									<form>
										表单控件
									</form>
								3.标签属性：<form action="" method=""><form>
									1.action:设置数据的提交地址
									2.method：数据提交的方式get(默认)  post
										1.get请求：向服务器获取数据
										2.特点：
											1.如果是提交数据，数据会以参数的形式拼接在url后面
											2.安全性较低，数据的最大限制为2K
										3.post请求：向服务器发送数据
											1.隐式提交，数据会被打包存在请求体中发送
											2.安全性较高，没有数据的最大限制
										4.表单控件：
											1.文本框和密码框
												<input type="text">       普通文本输入框
												<input type="password">	  密码框
												属性：
													1.name属性：必填项，定义控件名称，缺少则无法提交当前的数据
													2.placeholder：设置提示文本
													3.maxlength：设置最大输入长度
													4.value：设置当前输入框的值，不常用

											2.单选按钮与复选框
												<input type="redio" name="" value="">       单选框
												<input type="checkbox" name="" value="">    复选框
												属性：	
													1.name：定义控件名称和分组作用，一组按钮中的name属性值必须保持一致
													2.value：必填，设置按钮对应的值
													3.checked：默认选中
											3.隐藏域与文件选择框	
												隐藏域本身不可见，用于隐式传递用户相关的信息(用户id等)
												<input type="hidden" name="" value=""> 
												文件选择框：
												<input type="file" name="">


													





03： 尺寸与边框 框模型 背景属性 

		5.下拉选项框
			<select name="province">
			<option value="hebei">内容</option>
			</select>
		6.文本域
			支持用户多行输入
				<textarea name="uinfo" cols="" rows=""><textarea>
			属性：
				1.name  控件名称
				2.cols指定文本域默认显示的列数，一行能显示的英文字符数量，中文字符减半
				3.row 指定文本域默认显示的行数
				注意：文本域是可以由用户调整大小的
		7.提交按钮：提交到form action="login.php"
			<input type="submit" name="submit" value="">
			属性：type = "submit" 设置按钮类型为提交
				  value 用来设置按钮的显示文本
			作用：将表单中的数据提交给服务器
		8.重置按钮：
			<input type="reset" value="">
			作用：将表单控件的值，重置为初始状态
		9.普通按钮：
			<input type="button" value="">
			可以绑定自定义事件
		10特殊按钮
			<button>登陆</button>
			注意：
				如果放在form中使用，作用跟提交按钮一致
				不局限于form中使用，如果放在form外部，需要绑定自定义事件
		11.label for id:扩大选项框作用范围

CSS：cascading style sheet 层叠样式表
		1.作用：实现页面布局，美化页面元素
			特点：
				1.层叠行
				2.继承性：父元素中设置的样式，子元素可以集成下来，大部分文本相关的属性，都可以被继承，块级元素的宽度与父元素保持一致
				3.样式优先级：
					继承样式 < 浏览器的缺省设置 < 文档内嵌方式/外链方式(文档内嵌方式和外链方式冲突，以最后样式为准)  < 行内样式
		2.CSS使用：在HTML文档中使用CSS，主要有三种方式
			1.行内样式/内联样式
				特点：在具体的HTML标签中引入CSS代码
				语法：所有的HTML标签都具有一个style属性，属性值就可以使用CSS样式规则
					<标签 style="CSS样式规则"></标签>
					CSS样式规则由CSS属性与值组成(字典)	每一条CSS语句以分号结束
				创建CSS属性
					1.font-size:设置字体大小，取值为像素值
					2.color：设置文本颜色，取值颜色的英文单词
					3.background-color:设置背景颜色
			2.文档内嵌
				将CSS代码从标签中抽离出来，单独写在一起
				1.在HTML文档中使用<style></style>引入样式表
					<style>标签可以在文档的任意地方使用
				2.样式表语法：
					<style>
						CSS选择器{
							属性 ：值；
							...
					</style>
					选择器：用来匹配文档中元素，并且为其设置样式，{}中要给元素添加的样式声明
						标签选择器：根据给定的标签名，匹配文档中所有的该元素，并应用样式
						<style>
							/*CSS注释，标签选择器*/
							h2{
							color:green;
							}
						</style>					
				3.外部样式表/外链方式
					创建外部的CSS文件，在HTML文档中只需引入外部样式表
					优点：
						1.真正实现样式与结构的分离，便于维护
						2.可以实现样式的复用
					使用：
						1.创建外部的CSS文件 .css
						2.在HTML文档中使用
							<link rel="stylesheet" herf="url">引入样式表
						3.在样式表中添加样式，通过选择器书写样式
		3.CSS选择器：
			作用：根据指定的选择模式匹配文档中元素，并为其设置样式
			选择模式(选择符):指匹配元素的依据
			分类：
				1.标签选择器/元素选择器
					根据标签名，匹配文档中所有的该元素，并为其设置样式
						设置某个元素的值为None，则是用于清除页面默认样式，以及设置基础样式
						
				2.类选择器：
					类名规则：字母字符-，但不能用数字开头
					根据元素的class属性值进行匹配
					语法：以英文.开头，后面跟上class属性名
						.c1{
						属性名:属性值;
						   }
						<p class="类名(可多个,空格隔开)"></p>
										
				标签选择器和类选择器可以组合,两个类名可以组合
					标签名.类名/.类名1.类名2{
						}
				
				3.ID选择器
					根据元素的id属性值匹配元素
					每个元素都具有id属性，并且id属性具有唯一性
					语法：	
						以#开头，跟上id属性值。如：#id属性值{}
					使用：	
						通常页面中具有唯一性的元素，都可以使用id进行表示，并使用id选择器添加样式
						页面中具有唯一性的元素：外围结构标签，搜索框
					注意：
						1.id属性具有唯一性，不能重复(会影响js取值)	
						2.id选择性和class选择器的区别：
							id具有唯一性，定义的样式不能被复用。类选择器可以被复用
							id是先加载元素，class是先加载样式
						3.外部的结构标签使用id标识，内部的标签使用class标识
				4.群组选择器
					为一组元素统一设置样式
					语法：
						选择器1，选择器2，...{
							}
				5.后代选择器
					依托元素的层级关系匹配后代元素（包含直接子元素）
					语法：选择器1 选择器2{
						样式规则
						}
					选择器1和选择器2之间是父元素和后代元素的关系
					作用：在选择器1匹配到的元素中，查找满足选择器2的后代元素
				6.子代选择器
					依托元素的层级关系，匹配直接子元素
					语法：
						选择器1>选择器2{}
						表示在选择器1对应的元素中，匹配满足选择器2的直接子元素
				7.伪类选择器：
					1.作用：针对元素的不同状态设置样式
					2.分类：
						1.超链接伪类选择器
							主要针对超链接的不同状态设置样式
							:link 超链接访问前的状态
							:visited 超链接访问后的状态
						2.动态伪类选择器
							1.:hover 表示鼠标悬停时的状态
							2.:active表示鼠标点按时的状态
							3.:focus 表示获取焦点时的状态，常见于输入框接收用户输入时，就表示获取到焦点
						3.使用：
							1.伪类选择器必须与其他选择器使用，伪类选择器是给元素不同的状态设置样式
							2.设置超链接四种状态下的样式
								a:link{}
								a:visited{}
								a:hover{}
								a:active{}
								书写顺序：LoVe/HAte 爱恨原则
							3.表单元素获取焦点(针对输入框)
								input:focus{}
						




04： 文本格式化属性 表格属性 过渡属性 浮动属性 

1.选择器的优先级
	选择器的优先级主要考虑选择器的权重
		可以将各种选择器的权重以数值来表示，数值越大，优先级越高
	选择器              权重
	标签selector		1
	类/伪类选择器		10
	id选择器			100
	行内样式			1000
	各种选择器权重值相加得到最终的优先级
2.尺寸单位与颜色取值
	1.尺寸单位
		1.px ：像素单位，浏览器默认单位
		2. % : 参照父元素对应的属性的值计算
		3. in: inch 英寸  1 inch = 2.54cm
		4. pt: 磅 1 pt=1/72 in
		5.cm 与 mm
		6. em： 默认情况下，字体大小为16px，1 em = 16 px
	2.颜色取值
		1.rgb(r,g,b)表示法
			根据红绿蓝三原色组合呈现不同的颜色
			每种取值范围0~255，值越大，颜色越饱和
			eg:
				红色：rgb(255,0,0)
				绿色：rgb(0,255,0)
				蓝色：rgb(0,0,255)
				黑色：rgb(0,0,0)
				白色：rgb(255,255,255)
		2.rgba(r,g,b,alpha)表示法
			rgb三原色取值范围0~255
			alpha:透明度取值范围0(透明) - 1(不透明)
			16进制的表示方法：#十六进制
	3.HTML标签分类：
		1.块级元素：
			特点：
				1.独占一行，不与其它元素共行
				2.可以手动调整宽高
				3.默认情况下，块元素的宽度与父元素保持一致
常见块元素：body   h1-h6  div  ul  li  table form
		2.行内元素：
			特点：
				1.可以与其它元素共行显示
				2.不可以手动调整宽高大小
				3.实际大小由元素的内容多少决定
常见元素：span  label  i b s u sup sub strong 
		3.行内块
			特点：
				1.可以共行显示
				2.可以手动调整宽高
常见元素：img  input
溢出处理：
	内容超出元素尺寸范围，称为内容溢出，默认情况下，溢出部分仍然可见
	属性：overflow 可以处理内容溢出
		取值：
			1.visible：默认，溢出部分仍然可见
			2.scroll: 添加滚动条，包含水平和垂直方向，没溢出也会显示滚动条
			3.auto：自动添加滚动条，溢出才会出现滚动条
			4.hidden：隐藏溢出部分
	边框：
		边框实现：
			属性：border
			取值：border-width边框宽度   border-style样式   border-color颜色
				border-width：取像素值   
				border-style：同时设置上右下左
					solid 实现边框
					dashed虚线边框
					dotted点线边框
					double双色边框
				取消默认边框：border：none(常用于按钮) 
			单边边框设置：
				属性：
					1.border-top ：设置顶部边框
					2.border-right ：设置右边边框
					3..border-buttom：设置底部边框
					4..border-left：设置左边边框
			3.网页三角标制作：
				1.设置空的块元素，宽度为0
				2.为元素设置等宽的边框
				3.调整边框颜色，显示一个方向的边框，其余边框设置为透明边框色transprent。
				注意：四个方向的边框缺一不可，缺少的话，边框会恢复成矩形边框，不再是三角形
			4.轮廓线
				属性：outline
				取值：width style color
				注意：轮廓线围绕在元素内容区域四周，与边框类似，但是有区别，轮廓现在网页中不占位，边框在网页中是实际占位的。
			5.圆角边框
				1.属性：border-radius
				2.取值：像素值或百分比
					1.border-radius:20px(可以给最多四个值)
						一个值表示四个角都以20px做圆周
					2.百分比取值实现元素形状改变
						border-radius:50%
						注意：使用百分比设置圆角边框时，是参照当前元素的尺寸进行计算的
			6.盒阴影：
				属性：box-shadow
				取值：offset-x  offset-y  blur  spread  color
					1.offset-x : 阴影的水平偏移距离，取像素值
					2.offset-y : 阴影的垂直偏移距离，取像素值
					3.blur：阴影的模糊程度，取像素值，值越大越模糊
					4.spread：阴影的延伸距离(可选)，取像素值，可以扩大阴影的范围
					5.color ： 设置阴影颜色(默认为黑色)
					注意：不管是浏览器窗口还是元素本身，都存在坐标系，都以左上角为(0,0)点，向右，向下代表x轴和y轴的正方向
			7.盒模型(框模型)：
				1.在css中，认为一切元素都是框，都是矩形区域
					盒模型：计算元素在文档中的实际占位情况
					盒模型组成：
						margin(外边距)border
						padding(内边距) content(元素的宽高尺寸)	
					元素在文档中的实际尺寸的计算：
						默认情况下：
最终宽度=2*(左右外边距margin+左右的边框宽度border+左右内边距padding)+width
最终高度=2*(上下外边距margin+上下的边框宽度border+上下内边距padding)+height
					1.margin：外边距：元素边框与其它元素边框之间的距离
						取值：像素值   margin:10px(最多给四个值)
				2.单方向外边距的设置：
					1.属性：
						1.margin-top:上方外边距
						2.margin-right:右方外边距
						3.margin-bottom:底部外边距
						4.margin-left:左边外边距
					2.取值：像素值
						只给当前方向设置外边距，即给一个值
					3.特殊取值：
						1.margin：0;设置元素外边距为0，常用于初始化页面样式，取消一些元素的默认外边距
						2.margin：0 auto; 设置左右外边距自动，用来实现元素的居中效果，auto指对左右外边距起作用
					4.取负值
						会移动元素的位置，负值表示向上向左移动元素，常用于页面元素位置的微调
5.自带默认外边距的元素：
	body  h1-h6  p  ul  ol
	
	
	
	
	
05： 其他定位方式 显示效果 列表属性 转换属性

1.外边距：元素与元素之间
	1.垂直方向上的外边距，会发生合并，取最大的值
	2.水平方向上的外边距，会发生叠加
	3.为子元素添加距上的外边距，作用于父元素上
		解决方法：
			1.为父元素添加上边框(可以使用透明色)
			2.为父元素添加顶部的内边距padding-top:0.1px;
2.内边距
		1.元素内容与元素边框之间的距离，称为内边距
		2.属性：padding
			取值：像素值或百分比
			1.padding:10px;(设置上右下左四个方向的内边距，最多给四个值)
3.单方向外边距的设置：				
	1.属性：				
		1.margin-top:内容与元素顶部边框之间的距离		
		2.margin-right:				
		3.margin-bottom:			
		4.margin-left:			
4.默认带有内边距的元素
	ol ul  input  td ...
5.清楚浏览器默认内外边距
	body,h1-h6,p,ul,ol{
	margin:0;
	padding:0}
3.设置盒模型的计算方式
	属性：box-sizing
	作用：指定盒模型的计算方式
	取值：添加该属性，盒模型计算方式不一样
		1.content-box:默认值
			元素的width height属性只用来规定内容的尺寸，如果元素设置内外边距和边框
				最终在文档中占据的尺寸由各种值相加得到
		2.border-box：
			元素的width height属性，规定的是包含边框，内边距和内容在内的尺寸
4.元素的显示设置
	1.设置元素的可见性
		属性值：visibility
		取值：
			1.visible 默认值，元素可见
			2.hidden 设置元素隐藏，元素在原档中仍然占位
	2.转换元素类型
		属性：display
		取值：
			1.block：转换为块元素
			2.inline：转换为行内元素
			3.inline-block：转换行内块元素(可实现块元素共行)
		特殊取值：
			4.none 实现元素隐藏，元素在文档中不占位，其它元素会相应的移动
				实现元素隐藏与显示：
				display:none；隐藏
				display:block；显示
5.背景相关的属性
	1.background-color
		设置背景颜色，取颜色值
		注意：
			1.所有元素默认的背景颜色都是透明色，新建窗口的白色不是body的背景色，是浏览器渲染的结果
			2.背景颜色是从元素的边框位置开始绘制的，如果元素添加内边距，都会被渲染成相应的背景颜色
	2.背景图片：
		设置背景图片：
			1.设置背景图片
				属性：background-image
				取值：url()
				注意：
					1.背景图片的尺寸如果大于元素尺寸，图片仍然按照原始尺寸显示，超出元素的部分不可见
					2.背景图片的尺寸如果小于元素尺寸，浏览器会自动对背景图片平铺，直到铺满元素
					3.背景图片与背景颜色一样，不影响元素正常内容的显示
			2.设置背景图片的重复方式：
				1.背景图片的尺寸如果小于元素尺寸，浏览器会自动对背景图片平铺，直到铺满元素
				background-repeat
				取值：
					1.repeat：默认值，沿水平和垂直方向平铺
					2.repeat-x：沿水平方向平铺
					3.repeat-y：垂直方向平铺
					4.no-repeat：不重复平铺
			3.设置背景图片的位置：
				1.属性：background-position
				2.取值：x y
					1.取像素值：
						x ：表示背景图片水平方向的偏移距离：
							正值表示图片向右偏移
							负值表示图片向左偏移
						y ：表示背景图片垂直方向的偏移距离
							正值表示图片向下偏移
							负值表示图片向上偏移
				2.取百分比：
					参照元素尺寸计算水平和垂直偏移距离
					1.0% 0%
						显示在元素左上角
					2. 50%  50%
						显示在元素中间
					3.100% 100%
						显示在元素右上角
				3.方位值确定背景图片的位置
					x ：left/center/right 默认为center
					y : top/center/bottom 默认为center
			4.设置背景图片的大小
				1.属性background-size
				2.取值：x y
					x y分别表示背景图片的宽高
					1.像素值
					2.百分比
					3.cover：表示将图片等比放大至完全覆盖元素，超出部分不可见
					4.contain：将图片等比拉伸至刚好被容纳，不能超出元素尺寸，可能无法完全覆盖
			5.背景属性简写
				1.属性：background
				2.取值：color  url()  repeat  position
				注意：
					1.背景属性按照一定顺序设置
					2.background-size单独设置
					3.可以省略属性值，单独设置颜色或者背景图片
			6.文本相关的属性(font)
				1.字体相关的属性
					1.字体大小
						属性：font-size
						取值：像素值或em  
					2.字体粗细程度
						属性：font-weight
						取值：
							1.关键字  light /normal 正常/bold 加粗
							2.整百数值 100-900
								100/lighter -- 400/nomal -- 700/bold --900/bolder
					3.字体名称
						1.属性：font-family
						2.取值：字体名称
							注意：
								1.字体名称是中文或由多个英文单词组成，需要用引号引起来
								2.同时指定多个字体名称，之间使用英文逗号间隔，浏览器不兼容时，则会跳过
					4.字体样式
						1.属性：font-style
						2.取值：
							1.normal 正常显示
							2.italic 斜体显示
							3.oblique 倾斜显示
							注意：oblique可以将字体倾斜一定角度，默认倾斜效果与italic斜体没有差别
					5.字体属性简写：
						1.属性：font
						2.取值：style weight size family；
							注意：
								1.font-family是必填的
					6.文本(text)
						1.文本颜色：
							1.属性：color
							2.取值：颜色值
						2.文本装饰线：
							1.属性：text-decoration
							2.取值：
								1.underline:下划线
								2.overline：上划线
								3.line-through：删除线
								4.none：取消文本装饰线
						3.文本水平对齐方式
							1.属性：text-align
							2.取值：
								1.left(默认值)/center/right
								2.justify 两端对齐
						4.设置行高
							行高指一行文本所占的高度
								1.属性：line-height
								2.取值：像素值或em
								用法：
									1.设置行高和元素高度相同，实现一行文本的垂直居中
									2.line-height > height   文本会下移，反之会上移
								注意：
									文本内容在当前行中始终是垂直居中的
								特殊取值：无单位的数值，表示当前字体大小的背书
					7.表格相关的属性(border)
						1.基础样式是通用的
						2.独有的CSS属性：
							1.边框合并
								属性：border-collapse
								取值：
									1.seperate：默认值，单元格边框与表格边框相分离
									2.collapse：设置表格边框与单元格边框合并
								注意：
									1.td不支持margin
									2.border-collapse只能在table中使用
							2.设置边框边距：
								属性：border-spacing
								取值：h-value  v-value
									h-value：水平方向边框之间的距离
									v-value：垂直方向
									两个值之间使用空格隔开
								注意：边框边距只能在边框分离状态下设置，合并时无法使用




	
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				

































