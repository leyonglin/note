

1，2 基本概念
计算机的硬件系统通常由五大部件构成，包括：运算器、控制器、存储器、输入设备和输出设备。其中，运算器和控制器放在一起就是我们通常所说的中央处理器，它的功能是执行各种运算和控制指令以及处理计算机软件中的数据。我们通常所说的程序实际上就是指令的集合，我们程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。
代码块是程序的一个最小的基本执行单位，一个模块文件、一个函数体、一个类、交互式命令中的单行代码都叫做一个代码块
冯·诺依曼结构：有两个关键点，一是指出要将存储设备与中央处理器分开，二是提出了将数据以二进制方式编码
变量：在程序设计中，变量是一种存储数据的载体。计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。
变量类型：
    整型：任意大小的整数（%d）
	浮点型：小数，不同计数法浮点数的小数点位置是可变的（%f/%2f）
	字符串型：字符串是以单引号或双引号括起来的任意文本（%s）
	布尔型：布尔值只有True、False两种值
	复数型：形如3+5j，跟数学上的复数表示一样，唯一不同的是虚部的i换成了j
二进制(0bxx)  八进制(0oxx)  十六进制(0xxx)
注释：三个单引号或三个双引号开头，三个单引号或三个双引号结尾

   print(a +-*/ // ** b)
使用input()函数获取键盘输入  使用int()进行类型转换  用占位符格式化输出的字符串
   b = int(input('b = '))
   print('%d + %d = %d' % (a, b, a + b))
   
在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。      

使用type()检查变量的类型 print(type(a))
  print(type(a))
int()：将一个数值或字符串转换成整数，可以指定进制。
float()：将一个字符串转换成浮点数。
str()：将指定的对象转换成字符串形式，可以指定编码。
chr()：将整数转换成该编码对应的字符串（一个字符）。
ord()：将字符串（一个字符）转换成对应的编码（整数）。
   
运算符的使用
is比较的是两个整数对象的id值是否相等，也就是比较两个引用是否代表了内存中同一个地址。
==比较的是两个整数对象的内容是否相等，使用==时其实是调用了对象的__eq__()方法。
flag1 = 3 > 2
print("flag1 = ", flag1)   print(flag2 is not False) ---> True/False

3.分支结构
 Python中没有用花括号来构造代码块而是使用了缩进的方式来设置代码的层次结构
   if username == 'admin' and password == '123456':
       print('身份验证成功!')
   else:
       print('身份验证失败!')

4.循环结构：重复的执行某条或某些指令
 for-in循环
   sum = 0
   for x in range(101):
      if x % 2 == 0:
       sum += x
   print(sum)
   
 while循环通过一个能够产生或转换出bool值的表达式来控制循环
 
 
5.

函数重载（英语：function overloading），是Ada、C++、C#、D和Java等编程语言中具有的一项特性，这项特性允许创建数项名称相同但输入输出类型或个数不同的子程序，它可以简单地称为一个单独功能可以执行多项任务的能力
6.函数和模块的使用，在Python中，函数的参数可以有默认值，也支持使用可变参数，Python并不需要像其他语言一样支持函数的重载，那么后面的定义会覆盖之前的定义，也就意味着两个函数同名函数实际上只有一个是存在的
  Python中每个文件就代表了一个模块（module），我们在不同的模块中可以有同名的函数，但后导入的foo覆盖了之前导入的foo
  函数是绝大多数编程语言中都支持的一个代码的“构建块”
   def add(a=0, b=0, c=0):
    return a + b + c
   print(add(1, 2, 3))	
   print(add(c=50, a=100, b=200))
  
   def add(*args):
    total = 0
    for val in args:
        total += val
    return total
   print(add(1, 2))
  如果我们导入的模块除了定义函数之外还中有可以执行代码，那么Python解释器在导入这个模块时就会执行这些代码，事实上我们可能并不希望如此，
  因此如果我们在模块中编写了执行代码，最好是将这些执行代码放入如下所示的条件中，这样的话除非直接运行该模块，if条件下的这些代码是不会执行的，因为只有直接执行的模块的名字才是“__main__”
  # __name__是Python中一个隐含的变量它代表了模块的名字
  # 只有被Python解释器直接执行的模块的名字才是__main__
 
 
 Python查找一个变量时会按照“局部作用域”、“嵌套作用域”、“全局作用域”和“内置作用域”的顺序进行搜索，所谓的“内置作用域”就是Python内置的那些隐含标识符min、len等都属于内置作用域）。
 global a  可以设置全局变量，不过应该少用
 
7.字符串和常用数据结构
  7.1 字符串：自带多种操作
  7.2 列表：可修改,可切片，for遍历，生成器
    f = [x + y for x in 'ABCDE' for y in '1234567']    #生成一个列表，动态拼接。 静态拼接：print('Length =', len(set1))
    print(f) 
	  
    f = (x ** 2 for x in range(1, 1000))               #1.生成一个生成器对象  2.通过yield关键字将一个普通函数改造成生成器函数(for循环后添加 yield val)
    print(sys.getsizeof(f))                            # 查看对象占用内存的字节数
    print(f)
    for val in f:                                      #遍历其中的值
        print(val)
    
  7.3 元组:	不可修改，可切片，可遍历(安全，节省处理同步化的开销。一个不变对象可以方便的被线程共享访问)
    t = ('骆昊', 38, True, '四川成都')
	print(t[0])
    person = list(t)   #将元组转换称列表
	#person = tuple(t) 将列表转换成元组
 
  7.4 集合不允许有重复元素，而且可以进行交集、并集、差集等运算。自带多种操作
     set1 = {1, 2, 3, 3, 3, 2}
     print(set1)
     print('Length =', len(set1))
     set2 = set(range(1, 10))
 
  7.5 字典是另一种可变容器模型，字典的每个元素都是由一个键和一个值组成的“键值对”，键和值通过冒号分开
     scores = {'骆昊': 95, '白元芳': 78, '狄仁杰': 82}
     print(scores['骆昊'])
     for elem in scores:
     print('%s\t--->\t%d' % (elem, scores[elem]))
 
8.面向对象编程：把一组数据结构和处理它们的方法组成对象（object），把相同行为的对象归纳为类（class），通过类的封装（encapsulation）隐藏内部细节
                通过继承（inheritance）实现类的特化（specialization）和泛化（generalization），通过多态（polymorphism）实现基于对象类型的动态分派。 
    程序是指令的集合：编程就是程序员按照计算机的工作方式控制计算机完成各种任务，我们在程序中书写的语句在执行时会变成一条或多条指令然后由CPU去执行
    函数的概念：把相对独立且经常重复使用的代码放置到函数中，在需要使用这些功能的时候只要调用函数即可
	   定义类
       在Python中可以使用class关键字定义类，然后在类中通过之前学习过的函数来定义方法，这样就可以将对象的动态特征描述出来，代码如下所示。       
       class Student(object):       
           # __init__是一个特殊方法用于在创建对象时进行初始化操作
           # 通过这个方法我们可以为学生对象绑定name和age两个属性
           def __init__(self, name, age):
               self.name = name
               self.age = age      
           def study(self, course_name):
               print('%s正在学习%s.' % (self.name, course_name))      
           # PEP 8要求标识符的名字用全小写多个单词用下划线连接
           # 但是部分程序员和公司更倾向于使用驼峰命名法(驼峰标识)
           def watch_movie(self):
               if self.age < 18:
                   print('%s只能观看《熊出没》.' % self.name)
               else:
                   print('%s正在观看岛国爱情大电影.' % self.name)
       说明： 写在类中的函数，我们通常称之为（对象的）方法，这些方法就是对象可以接收的消息。
       
       创建和使用对象
       当我们定义好一个类之后，可以通过下面的方式来创建对象并给对象发消息。
       
       def main():
           # 创建学生对象并指定姓名和年龄
           stu1 = Student('骆昊', 38)
           # 给对象发study消息
           stu1.study('Python程序设计')
           # 给对象发watch_av消息
           stu1.watch_movie()
           stu2 = Student('王大锤', 15)
           stu2.study('思想品德')
           stu2.watch_movie()
              
       if __name__ == '__main__':
           main()
	
	访问控制（可见性）：对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的。
     	被定义为公有的类成员可以在任何地方被访问。被定义为受保护的类成员则可以被其自身以及其子类和父类访问。被定义为私有的类成员则只能被其定义所在的类访问
    面向对象有三大支柱：封装、继承和多态

9.面向对象进阶
    @property装饰器：
	   # 访问器 - getter方法
       @property
       def age(self):
           return self._age
	   
       # 修改器 - setter方法，只允许修改age的值
       @age.setter
       def age(self, age):
           self._age = age
	
	动态编程语言是高级编程语言的一个类别，在计算机科学领域已被广泛应用。它是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。
	限定自定义类型的对象只能绑定某些属性，可以通过在类中定义__slots__变量来进行限定。需要注意的是__slots__的限定只对当前类的对象生效，对子类并不起任何作用。
	class Person(object):
    # 限定Person对象只能绑定_name, _age和_gender属性
    __slots__ = ('_name', '_age', '_gender')
	
	
	静态方法是个独立的、单纯的函数，它仅仅托管于某个类的名称空间中，是类中的函数，不需要实例。静态方法主要是用来存放逻辑性的代码，逻辑上属于类，但是和类本身没有关系，也就是说在静态方法中，不会涉及到类中的属性和方法的操作
	类方法：学生类继承自班级类，每实例化一个学生，班级人数都能增加；最后，想定义一些学生，获得班级中的总人数。
	UML（统一建模语言）的东西来进行面向对象建模，其中一项重要的工作就是把类和类之间的关系用标准化的图形符号描述出来
	让一个类从另一个类那里将属性和方法直接继承下来，从而减少重复代码的编写。提供继承信息的我们称之为父类，也叫超类或基类；得到继承信息的我们称之为子类，也叫派生类或衍生类。
	子类除了继承父类提供的属性和方法，还可以定义自己特有的属性和方法，所以子类比父类拥有的更多的能力，在实际开发中，我们经常会用子类对象去替换掉一个父类对象
	子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，这个动作称之为方法重写（override）。通过方法重写我们可以让父类的同一个行为在子类中拥有不同的实现版本，当我们调用这个经过子类重写的方法时，不同的子类对象会表现出不同的行为，这个就是多态
	抽象类就是不能够创建对象的类，这种类的存在就是专门为了让其他类去继承它
	
10.图形用户界面和游戏开发
11.文件和异常
    数据持久化：将内存中的数据模型转换为存储模型,以及将存储模型转换为内存中的数据模型的统称. 数据模型可以是任何数据结构或对象模型,存储模型可以是关系模型、XML、二进制流等。cmp和Hibernate只是对象模型到关系模型之间转换的不同实现。	
	文件系统是一种存储和组织计算机数据的方法，它使得对其访问和查找变得容易，文件系统使用文件和树形目录的抽象逻辑概念代替了硬盘和光盘等物理设备使用数据块的概念，用户使用文件系统来保存数据不必关心数据实际保存在硬盘（或者光盘）的地址为多少的数据块上，只需要记住这个文件的所属目录和文件名。
	文件系统通常使用硬盘和光盘这样的存储设备，并维护文件在设备中的物理位置。
	SON是“JavaScript Object Notation”的缩写，它本来是JavaScript语言中创建对象的一种字面量语法，现在已经被广泛的应用于跨平台跨语言的数据交换，原因很简单，因为JSON也是纯文本，任何系统任何编程语言处理纯文本都是没有问题的
	
	
	
	
###################################################################################

# unhashable 可变对象,如list、dict、set：同值不同址，不同值同址
# hashable 不可变对象,如int、str、char、tuple：同值同址，不同值不同址	
字典（dict）的键（key）必须是可以哈希的（hashable），immutable（不可改变性）
判断是字典还是json
    #json可以以{}和[]开始  , 字典只能以{}开始       
    #json：使用"" 不能用'' ，字典：可以使用''和""
    #字典key可以是tuple
	
	
###################################################################################


#对象(类，函数，变量)
#使用help(模块或对象)确认导入是哪个模块
#使用dir(模块或对象)查看方法
#from相当于将模块代码直接拷贝到当前编辑文件  import就是将模块名设置为一个变量名
import 文件                   #使用 文件名.对象

from 文件 import 对象         #直接使用对象名

from 文件夹 import 文件       #使用 文件名.对象   
               
import 文件夹.文件            #使用 文件夹.文件.对象		  
from 文件夹.文件 import 对象  #直接使用对象名
 
import 文件夹                 #需要有__init__.py文件，导入就是执行该文件 
 
###################################################################################
 
#能不能使用是因为内存中有没有	
#类classmethod方法是在类内存地址上的，对象self方法是在创建对象内存时候动态创建的
#类方法不依赖对象，修改类属性等
#静态staticmethod方法是在类内存地址上的，和类方法差别是没有参数cls
实例方法只能被实例对象调用
静态方法(由@staticmethod装饰的方法，可以被类或类的实例对象调用
类方法(由@classmethod装饰的方法)，可以被类或类的实例对象调用	
对象方法：
    def instance_method(self,title):
类方法：
    @classmethod
    def class_method(cls,title):
静态方法：
    @staticmethod
	def static_method(title):
 
类方法例子：
1.
class Book(models.Model):
    title = models.CharField(max_length=100)

    @classmethod
    def create(cls, title):
        book = cls(title=title)
        # do something with the book
        return book

book = Book.create("Pride and Prejudice")

2.
class BookManager(models.Manager):
    def create_book(self, title):
        book = self.create(title=title)
        # do something with the book
        return book

class Book(models.Model):
    title = models.CharField(max_length=100)

    objects = BookManager()

book = Book.objects.create_book("Pride and Prejudice")

###################################################################################

# 函数get_A()返回值为None
def get_A():
  a=1
  print(a)

# 输出1 None
# 1是函数本身的输出，None是函数的返回值
print(get_A())     #相当于print(print(a))



###################################################################################

class Person(models.Model):
    p_name = models.CharField(max_length=16, unique=True)
    p_age = models.IntegerField(default=18, db_column='age')

    @classmethod
    def create(cls,p_name,p_age=100):
        return cls(p_name=p_name,p_age=p_age)

		
#person是类函数create的执行结果	
#而执行结果返回	cls(p_name=p_name,p_age=p_age)   #和Person()类型是一样的
# person是Person object
person=Person.create('jack')    


####################################################################################


python 一切皆对象
python一等公民：
	赋值给一个变量   #鸭子类型
	添加到数据结构中(集合对象)
	作为参数传递给函数
	作为函数的返回值

序列化：基于通讯的需求，将数据转化成另一种格式(对象转换为有序字节流)
反序列化：根据字节流中保存的对象状态及描述信息，通过反序列化重建对象

序列，指的是一块可存放多个值的连续内存空间，这些值按一定顺序排列，可通过每个值所在位置的编号（称为索引）访问它们
数据结构是指相互之间存在一种或多种特定关系的数据元素的集合

！！
https://www.bilibili.com/video/BV1e54y1Q7CD?p=48
元类编程metaclass: 使用__new__方法在生成子类之前进行必要处理
__init__: 初始化实例
属性描述符：用作数据检查(IntFiled)


！！
# a = 'abc'
# print(dir(a))
# print(type(a))
普通方法：可以使用dir()展现出来
魔法函数：在某种情况下被调用,或者说具有某种功能(例如__iadd__方法可以使用+=)
	#不是继承或该类特有的，而是当前方法使其具有特殊属性
	字符串表示：
		repr
		str
	集合序列相关:
		len
		getitem
		setitem
		deliten
		contains
	迭代相关：
		iter
		next
	可调用:
		call
	with上下文管理
		enter：获取资源
		exit：释放资源
	数值转换:
	    __iadd__    #意味着可以使用+=操作
	元类相关
		new
		init
	属性相关：
		getattr 
		setattr
		getattributer
		setattributer
		dir
	属性描述符：
		get
		set
		
！！
多态：类与类在继承和派生的时候，保证正确调用“家谱”中任一类的实例的某一属性或方法
鸭子类型：一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由"当前方法和属性的集合"决定
    例子：
		function calculate(a, b, c) 
			return (a+b)*c
		#每次对calculate的调用都使用的对象（数字、列表和字符串）在继承关系中没有联系。只要对象支持“+”和“*”方法，操作就能成功
		example1 = calculate (1, 2, 3)
		example2 = calculate ([1, 2, 3], [4, 5, 6], 2)
		example3 = calculate ('apples ', 'and oranges, ', 3)
猴子补丁：代码运行时的动态替换代码(对象属性或方法的重新赋值)
	#SomeClass.speak = speak     #运行时使用自定义speak方法替换掉SomeClass类中的speak方法
	
	
静态类型语言在编译时便已确定变量的类型
动态类型语言的变量类型要到程序运行的时候，待变量被赋予某个值之后，才会具有某种类型
	
	
抽象基类：不可实例化，但是继承自抽象基类的类必须具有和抽象基类相同方法	
hasattr(实例,魔法方法)   #判断是否含有某个方法	
isinstance(实例,类)	 #判断是否继承自某个抽象基类
		
isinstance : 能追溯继承的类
type：只能查看所属类

is: 对比id是否相同
==:	对比值是否相同	
		

#向上查找法		
__mro__ : 多继承查找顺序		
		
		
自省：通过一定的机制查询到对象的内部结构		
	__dict__
	__dir__	
	__help__	
		
多继承处理：父类功能尽量单一并且不层叠继承，实现组合继承		
		
可迭代类型：包含__iter__函数
生成器：yield关键字用于构造一个生成器，生成器是一个函数
迭代器：包含__iter__函数和__next__函数的对象就是迭代器
装饰器：本质是函数，在不改变源代码和调用方式的情况下增加新功能
		#@property   @age.setter
描述器：在一个对象中，定义_get_(), _set_(), 和_delete_()至少其中一个，这个对象就是一个描述符
		#orm
		
垃圾回收机制：引用计数法

！！
https://www.bilibili.com/video/BV1e54y1Q7CD?p=58
协议：标准，在通讯过程中规范连接过程和数据发送格式
http是应用层协议，单向传输，短连接，基于socket进行编程，即socket发送符合http协议的数据
socket不是协议，是对传输层的封装，方便应用层软件的开发，双向传输，长连接，
tcp是传输层协议


gil使得python无法将多个线程映射到多个cpu上执行
但是gil会根据cpu片(未对内存操作完成)和io操作时释放
线程同步：即当有一个线程在对内存进行操作时，其他线程都不可以对这个内存地址进行操作，直到该线程完成操作， 其他线程才能对该内存地址进行操作

！！
使用__name__ __class__可以确定具体是执行了那个函数或类


###############################################################################
#1.类实现的装饰器
class DecoratorTest(object): #定义一个类
    def __init__(self,func):
        self.__func = func
    def __call__(self):      #定义call方法，当直接调用类的时候，运行这里。
        print('pre msg')
        self.__func()    
        print('post msg')

@DecoratorTest  
def test():
    print('主函数体')

if __name__=='__main__':
    test()	
	
#2.使用闭包
def decorator(func):                      #func是一个形参，不一定是这个，只是为了见名知意
    def inner(*args,**kwargs):
        print('装饰前')
        func()
        print('装饰后')
    return inner

@decorator
def test():
    print('test')
    
test()

