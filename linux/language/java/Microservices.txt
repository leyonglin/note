
有道无术，术尚可求，有术无道，止于术(道：思想  术：方法)
面向对象三大特性：封装：将对象的属性和行为抽象出来，封装到类中同时提供一些可以被外界访问的属性的方法
                  继承：将具有相同属性和行为对象抽象出来并包装成一个父类(使用已存在的类的定义作为基础建立新类的技术)
				  多态：多种形态，相同的属性和行为，却有不同的表现方式(不同实例)

//百度文档 // 千峰教育：https://www.funtl.com/
SOA(service-oriented archtecture)面向服务架构：不可复用，根据需求通过网络对松散耦合的粗粒度应用组件进行分布式部署，组合和使用。服务层是SOA的基础，可以直解被调用，从而有效控制系统中与代理交互的人为依赖性
粒度似乎是根据项目模块划分的细致程度区分的，一个项目模块（或子模块）分得越多，每个模块（或子模块）越小，负责的工作越细，就说粒度越细，否则为粗粒度
粗粒度和细粒度的区别主要是出于重用的目的,像类的设计,为尽可能重用,所以采用细粒度的设计模式,将一个复杂的类(粗粒度)拆分成高度重用的职责清晰的类(细粒度).
对于数据库的设计,原责:尽量减少表的数量与表与表之间的连接,能够设计成一个表的情况就不需要细分,所以可考虑使用粗粒度的设计方式， 根据控制对象的粗细程度，访问控制可分为粗粒度和细粒度两种 通常把规定访问整个数据库表或由基本表导出的视图的某个层称为粗粒度的访问控制，而细粒度控制则是把安全控制细化到数据库的行级或列级
BPM，即业务流程管理，是一种以规范化的构造端到端的卓越业务流程为中心，以持续的提高组织业务绩效为目的的系统化方法，常见商业管理教育如EMBA、MBA等均将BPM包含在内。

微服务是在SOA上做的升华，多个组件多个数据库

ESB全称为Enterprise Service Bus，即企业服务总线。它是传统中间件技术与XML、Web服务等技术结合的产物。ESB提供了网络中最基本的连接中枢，是构筑企业神经系统的必要元素。ESB的出现改变了传统的软件架构，可以提供比传统中间件产品更为廉价的解决方案，同时它还可以消除不同应用之间的技术差异，让不同的应用服务器协调运作，实现了不同服务之间的通信与整合。
从功能上看，ESB提供了事件驱动和文档导向的处理模式，以及分布式的运行管理机制，它支持基于内容的路由和过滤，具备了复杂数据的传输能力，并可以提供一系列的标准接口。

微服务MSA使用轻量级机制通信，通常是http api(REST)服务能够通过自动化部署机制来独立部署，服务可以使用不同的编程语言实现，以及不同数据存储技术，并保持最低限度的集中式管理
优点：复杂度可控(简单化)  灵活可拓展(去中心化)  独立部署(高效发布)  开发针对性强  降低TCO(总拥有成本)
缺点：运维开销   Development和Operations   隐式接口


对内rpc 对外rest
SOA和微服务架构一个层面的东西，是架构风格和方法，
ESB和微服务网关是一个层面的东西，一个谈的是实现工具或组件
SOA：面向服务架构，面向服务的架构（SOA）是一个组件模型，它将应用程序的不同功能单元（称为服务）进行拆分，并通过这些服务之间定义良好的接口和契约联系起来。接口是采用中立的方式进行定义的，它应该独立于实现服务的硬件平台、操作系统和编程语言。这使得构建在各种各样的系统中的服务可以以一种统一和通用的方式进行交互。
ESB全称为Enterprise Service Bus，即企业服务总线。

现代框架：spring boot
新一代：service mesh(服务网格)--->Istio 

CAP：C一致性(底线) ，A可用性 ，P分区容错性
cap权衡：BASE是Basically Available（基本可用）、Soft state（软状态：不同中间状态）和Eventually consistent（最终一致性）

Iaas 基础设施即服务(docker/vm)
PaaS 平台即服务(gitlab/nexus/registry)  #nexus：maven私服仓库，解决依赖(类似gitlab，但是上传上去后，可以设置权限不让别人拉去源码，但是可以根据地址使用相应功能(感觉就像类)，可以给快照地址，多次修改上传，地址不变，使用者可以设置总是使用最新快照)
SaaS 软件即服务
BaaS 区块链即服务

图灵完备：在可计算性理论里，如果一系列操作数据的规则（如指令集、编程语言、细胞自动机）可以用来模拟单带图灵机，那么它是图灵完备的。这个词源于引入图灵机概念的数学家艾伦·图灵。虽然图灵机会受到储存能力的物理限制，图灵完全性通常指“具有无限存储能力的通用物理机器或编程语言”
输入--处理--输出

window server：桌面可选，非桌面：powershell

LTS：长期支持版本
X64架构：指令集不同？

ubuntu引导模式：MBR  // UEFI
linux引导模式：GRUB 引导寻找操作系统的接口 接口在磁盘的0磁道上 安装初始化配置 过程及各种驱动


ctrl+insert  复制
shift+insert 粘贴

主线程    同步执行/阻塞/交互
工作线程  异步执行
当您同步执行某项任务时，您将等待它完成，然后再转到另一项任务。当您异步执行某项任务时，您可以在它完成之前转移到另一个任务。

stat ：输出指定格式  top ps du df free netstat/ss kill

压缩算法需要和cpu相配合

yum autoremove

linux内核都会有root用户
ubuntu可以为root设置密码并打开密码登陆

Hpervisor：又称虚拟机监视器（英语：virtual machine monitor，缩写为 VMM），是用来创建与运行虚拟机的软件、固件或硬件。
docker：共享宿主机资源，docker可以在docker容器中运行，虚拟机环境不能再装虚拟机

https://get.docker.com/

虚悬镜像：更新时，旧的同名镜像层<none>，没什么用(pull/build时产生的)     docker image prune 可清除

docker container prune 删除未启动所有容器(运行时添加--rm参数，退出自动删除容器)


2011：互联网元年
2012：微服务元年

数据库分表：插入和查询的时候用long类型(数字yyyymmssxxxx1/2/...)做id

分布式、高并发、高性能、高可用、大规模并发、高可扩展性、高可维护性

sso：单点登陆(api网关)

通信：同步调用(阻塞)：rest api(http对外)/rpc(远程过程调用，对内)   异步消息调用：kafka..
http提供的是字符串(json格式)，网络中只有字符串可以穿透防火墙

Netty ---> NIO(同步非阻塞IO)、AIO(异步非阻塞IO)
BIO同步阻塞IO，适用于连接数目比较小且固定的架构
NIO同步非阻塞IO，适用于连接数目多且连接比较短（轻操作）的架构
AIO异步非阻塞IO，AIO方式适用于连接数目多且连接比较长（重操作）的架构

服务注册与发现：zookeeper(consul/eureka)    通过心跳维持长连接(tcp)
				基于客户端：客户端---zookeeper---服务端
				基于服务端：客户端---LB---zookeeper---服务端

异步消息队列： 有broker的消息队列，有服务器，中间缓冲并持久化(最终一致性，完整性及幂等性)
               无broker的，kafka是直连，速度快，但没持久化

dubbo(异步通讯)+zookeeper(服务注册与发现)

zookeeper服务注册与发现中心：解决了分布式锁的问题(即避免双master，主节点分发任务，从节点执行任务，备用主节点阻塞不提供任务)
分布式：重试机制，限流(随机通过部分流量)，熔断机制(一阻塞即返回失败)，负载均衡，服务降级(下线某些服务)

DAO层：使用Hibernate来封装数据库访问操作
Service层：业务逻辑层为Controller层提供具体业务的实现
Controller层承担了部分业务逻辑实现，使其臃肿，难以测试。

pom.xml ：maven项目依赖文件/spring boot托管(与注解配合)
注解：@... 感觉像python模块的导入

spring:解耦，将对象交给spring容器，配置复杂
spring boot：开箱即用(轻量级方案)
spring cloud：生态，解决微服务架构(分布式)遇到的问题
Spring Cloud Netflix 微服务套件
  Spring Cloud：
     注册与发现中心Eureka---->(如何管理)
     使用Feign调用接口，是从Netflix中分离出来的轻量级项目，能够在类接口上添加注释，成为一个REST API客户端---((服务之间如何通讯))
     feign：微服务之间的调用(http client--->http通讯--->同步并阻塞)(在Spring cloud 中服务之间通过restful方式调用有两种方式 -restTemplate+Ribbon   -feign)
     hystrix：实现了熔断器模式(有一个服务宕掉，返回失败信息，而不会导致其它服务不可用，即连锁反应，阻塞引起)--->(服务意外怎么办)
     hystrixdashboard:监控hystrix
     zuul:api网关/路由网关统一访问接口(路由转发与过滤器),聚合(器)服务--->(客户端如何访问)
     config：服务配置统一管理，实时更新
        profile:区分/加载不同环境的配置   
     admin：应用监控
  zipkin：服务链路跟踪   
  
Service Mesh 又译作“服务网格”，作为服务间通信的基础设施层  
   
启动顺序：
    1.注册与发现
    2.分布式配置中心
    3.服务提供者
    4.服务消费者
    5.api网关


幂等性：无论调用多少次都会得到相同的结果

broker：缓存代理，Kafka集群中的一台或多台服务器统称broker.

w3c：非严格html检查



批判性思维是"对思考的思考"的一种思维习惯

行为习惯：21天(3-5分钟)
身体习惯：3个月(跑步两小时)
思维习惯：对思考的思考，先思考再问

接口是为了处理各个对象之间的协作关系，是系统设计的关键组成部分，主要作用是为了将"定义"与"实现"分离，从而实现系统"解耦"的目的

！！！是什么，为什么，怎么用
！！！多服务：客户端如何访问
！！！服务之间如何通讯
！！！如何管理
！！！服务意外怎么办


熔断机制：返回固定结果(某个服务挂了)
缓存穿透：redis和mysql都没key值
缓存击穿：redis中的key失效时间到了，需要重新去数据库取值
缓存雪崩：redis中多个key同时失效，需要重新去数据库取值


 Mesos是Apache下的开源分布式资源管理框架，被称为是分布式系统的内核
 Consul服务发现，服务暴露方式
 traefik的配置会自动的、动态的配置更新自己。
 entrypoint是traefik的网络入口，entrypoint监听端口，SSL，做流量redirect


大数据：不光数据量大，维度广(数据库表的字段多)
服务网格是一个基础设施层，功能在于处理服务间通信，职责是负责实现请求的可靠传递
kubeadm:一键安装kubernetes集群(初始化 Kubernetes 集群)
kubelet:部署容器(负责启动 Pod 和容器)
kubectl:命令行管理工具


负载均衡：实现轮询
集群：数据同步
高可用：崩溃恢复


















