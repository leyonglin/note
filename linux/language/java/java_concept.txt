
域名反转:

Java:Java是一门面向对象编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表
   Java源程序（.java文件）——>java字节码文件（.class文件）——>由解释执行器（java.exe）将字节码文件加载到java虚拟机（jvm）——>字节码文件（.class）就会在java虚拟机中执行。
      具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点
Java分为三个体系：JavaSE（J2SE）:java平台标准版    JavaEE(J2EE):java平台企业版    JavaME(J2ME):java平台微型版


JSP将Java代码和特定变动(引用变量)内容嵌入到静态的页面中，实现以静态页面为模板，动态生成其中的部分内容，而且不受跨平台问题的限制
Servlet（Server Applet），全称Java Servlet，是用Java编写的服务器端程序。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类
jsp：是包含java程序片的html文件  servlet：是包含html的java文件
jsp就是前台展示用的，用于显示；你点击jsp上的按钮就会触发servlet，servlet相当于控制器，控制按钮action的流向，如跳转到另一个网页之类的；javabean就是类了，servlet也可以转到javabean里处理一些事物，执行一些函数等等

IntelliJ IDEA：(src & web-WEB-INF + project)商业化销售的Java集成开发环境 (eclipse---myeclipse---spring sts)（调用javac编译）

markdown：一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式(有道云创建一个markdown，点击菜单行的help)
          ##二级标题    ``引用(格式变了)    ![注释](连接地址)   [注释](超链接)    
		  */- 注释(无序列表，有个空格)    ```java 代码 ```（代码，空格代表换行，java代表哪种语言，可以不写自动识别） 
		  
		  
maven：工具，和开发环境无关，使用 标准的目录结构 和默认构建生命周期。简化和标准化项目建设过程。处理编译，分配，文档，团队协作和其他任务的无缝连接
            (src-main-java & resources & webapp & src-test-java + project-pom.xml)
setting.xml ：本地仓库
pom.xml ：依赖文件(中央仓库)  #POM 代表项目对象模型。它是 Maven 中工作的基本单位，这是一个 XML 文件。它始终保存在该项目基本目录中的 pom.xml 文件。
  Maven 坐标：
     <groupId>log4j</groupId>          #项目组的编号 <groupId>域名反转</groupId>  全球唯一
     <artifactId>log4j</artifactId>    #项目的 ID，同时定义了artifact 在存储库中的位置。
     <version>1.2.17</version>         #升级的时候修改这里的版本号
	 
serverlet的中间件：tomcat(可以将serverlet展现在浏览器上)

语言化版本规范： 
   1.1.1
     第一个1代表架构变化(大版本/框架的升级)
	 第二个1代表功能性上变化
	 第三个1代表修改bugfix
   或者逢n进一	 
  
maven版本：发行版--不可修改
           快照版x.x.x-时间序列(SNAPSHOT)--每次刷新maven都会自动更新快照版本 
   

系统架构是指，整合应用系统程序大的结构  
三层架构：视图层 View、服务层 Service，与持久层 DAO
          View 层：用于接收用户提交请求的代码
          Service/manager 层：系统的业务逻辑主要在这里完成
          DAO 层：直接操作数据库的代码
MVC ： Model 模型、View 视图，及 Controller 控制器。(view--Controller解析---Model 处理--Controller渲染,再发送给客户端。 
          View：视图，为用户提供使用界面，与用户直接进行交互。
          Model：模型，承载数据，并对用户提交请求进行计算的模块。其分为两类，一类称为数据承载 Bean，一类称为业务处理 Bean。所谓数据承载 Bean 是指实体类，专门用户承载业务数据的，如 Student、User 等。而业务处理 Bean 则是指 Service 或 Dao 对象， 专门用于处理用户提交请求的。
          Controller：控制器，用于将用户请求转发给相应的 Model 进行处理，并根据 Model 的计算结果向用户提供相应响应
三层架构 + MVC : view--Controller/serverlet(Service+DAO)---jsp
这两种结构，既有区别，又有联系。均是为了降低系统模块间的耦合度/系统复杂度

业务是核心，技术是服务业务的
复杂度：简单业务：一个事务    普通业务：三个事务    复杂业务：七个事务
耦合度：多张表相互依赖，一改全改---强关联性
一个类只做一种事 --- 高内聚
一个方法只做一件事
只写一次(重构原则：事不过三，三则重构)


servlet 服务器小程序
       1.处理业务逻辑   2.处理页面展示
jsp就是servlet处理页面展示(脚本<%%>可以处理业务逻辑)	   

.net 微软推出的一种编程开发环境/软件框架


前后分离：
jquery是JavaScript 框架(JavaScript 库:支持多种请求)
Vue 渐进式 JavaScript 框架，只关注视图层，只负责布局，不负责通讯(其它功能有插件/第三方库实现)
vue-router跳转  vuex状态管理   
前端开发之优雅降级(向下兼容)与渐进(向上兼容)增强
前端三要素：
  HTML（结构）：静态，超文本标记语言（Hyper Text Markup Language），决定网页的结构和内容
  CSS（表现）：花样，层叠样式表（Cascading Style Sheets），设定网页的表现样式
  JavaScript（行为）：动态，是一种弱类型脚本语言，其源代码不需经过编译，而是由浏览器解释运行，用于控制网页的行为
CSS 预处理器：让css能编程
关注点分离(Separation of concerns, SoC)
前端--node.js--后端     node.js后端技术，能作为前端中间件,方便前端开发应用

#################################################################################################################


调优：1.JVM内存优化   2.线程优化   3.IO优化(BIO/NIO/AIO)
下载：https://tomcat.apache.org/  -- Archives
文档：http://localhost:8080/docs/config
帮助文档：https://zhuanlan.zhihu.com/p/34426768

 #######JDK环境变量###########
 export JAVA_HOME=/opt/apps/jdk
 export JRE_HOME=$JAVA_HOME/jre
 export CLASSPATH=$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar
 export PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/bin
 
 CLASSPATH环境变量保存的是一些目录和jar文件的地址，这些路径是为Java程序在编译和运行的时候搜索类而用的。
 写法与Path变量类似，每个路径用分号进行分开，如果是一个jar文件，则直接写明该文件的绝对路径
 
tomcat多实例，就是改变每个tomcat的server.xml中的三个端口（路径会自动去webapps(资源根目录)下找）
	1.启动服务状态查看：manager
		修改conf/tomcat-users.xml
		修改webapps/manager/META-INF/context.xml    #allow允许访问地址
	2.内核优化
	  cat >> /etc/sysctl.conf<<eof
	  net.ipv4.ip_forward = 1
	  fs.file-max = 8061540   #系统级限制（Connection reset by peer）
	  eof
	  cat >> /etc/security/limit.conf<<eof
	  * soft nproc 65535      #用户级限制（open too many file）
      * hard nproc 65535
      * soft nofile 65535
      * hard nofile 65535
	  eof
	3.内存调优：bin/catalina.sh  -- 111行	
        Java堆（Java Heap）是Java虚拟机所管理的内存中最大的一块，Java堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC堆”
		对于习惯在HotSpot虚拟机上开发和部署程序的开发者来说，很多人愿意把方法区称为“永久代”（Permanent Generation），本质上两者并不等价
		export JAVA_OPTS="-Dfile.encoding=UTF-8 -server -Xms1200m -Xmx1200m -Xmn500m(-Xss512k线程栈大小) 
						  -XX:+UseConcMarkSweepGC -XX:SurvivorRatio=8 -XX:CMSInitiatingOccupancyFraction=70 -XX+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction=5 -XX:+HeapDumpOnOutOfMemoryError"
						  -XX:+AggressiveOpts(自动加载新特性) -XX:+UseBiasedLocking(高并发时自动优化) -XX:PermSize=128M -XX:MaxPermSize=256M(这两个好像和依赖包有关系) -XX:+DisableExplicitGC -XX:MaxTenuringThreshold(老年区)=31 -Djava.awt.headless=True(避免需要使用某些图像的时候错乱)
						  不用设置的：-XX:MaxNewSize 交给 jdk 去做
						  
		export JAVA_OPTS="-server -Xms1600M -Xmx1600M -Xss512k -XX:+UseBiasedLocking -XX:+DisableExplicitGC -XX:MaxTenuringThreshold=31 -XX:+CMSParallelRemarkEnabled 
						  -XX:LargePageSizeInBytes=128m  -XX:+UseCMSInitiatingOccupancyOnly -Djava.awt.headless=True"      
						  有问题参数：-XX:PermSize和-XX:MaxPermSize在jdk1.8中被弃用了,参数正确应为：–XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=512m，替代有+/-的表示启用/禁用，后面不带值，没有的后面会带值
									  -XX:+UseParNewGc -XX:+UseCMSCompactAtFullCollection -XX:+UseFastAccessorMethods	-XX:+UseConcMarkSweepGC -XX:PermSize=128M -XX:MaxPermSize=256M -XX:+AggressiveOpts
						  
	4.并发优化
		修改：conf/server.xml
		    <Connector port="8080" protocol="HTTP/1.1"   #协议修改protocol="org.apache.coyote.http11.Http11NioProtocol"     bio < nio < apr
				namePrefix="catalina-exec-"              #名称
				maxHttpHeaderSize="4096"				 #请求头大小
				maxThreads="600"                         #最大线程数/并发数(单机:600-900)
				minSpareThreads="100"					 #最小备用线程数
				maxSpareThreads="500"					 #最大备用线程数，一旦创建的线程超过这个值，tomcat就会关闭不需要的socket线程
				acceptCount="700"						 #最大连接数,即超过maxThreads的请求会被放入一个等待队列，超过该数的请求返回refuse connection
				URIEncoding="UTF-8"
				enableLookups="false"                    #不允许dns查询，即不反差域名
				disableUploadTimeout="true" 			 #不给上传的附件单独做超时设置
				#minProcessors							 #最小的处理线程数，即空闲时线程等待数
				#maxProcessors							 #最大的处理线程数，超过则等待
				useURIValidationHack					 #减少对url的不必要检查
				compression="on"						 #压缩 GZip
				compressionMinSize="2048"
				compressableMimeType="text/html,text/xml,text/javascript,text/css,text/plain"
			   connectionTimeout="20000"				 #单位毫秒，-1表示永不超时
               redirectPort="8443" />
		自定义路径(追加):
		      <Context crossContext="true" debug="5" docBase="/opt/apache-tomcat-9.0.1/webapps/ROOT" path="/" reloadable="false"> </Context>    #  http://192.168.3.70:8080/index.jsp
			  <Context crossContext="true" debug="5" docBase="/opt/webapps/ROOT" path="/A" reloadable="false"></Context>						#  http://192.168.3.70:8080/A/index.jsp
	5.conf/web.xml
		<session-timeout>30</session-timeout>
如果客户端与OS完成三次握手建立了连接，则OS将该连接放入accept队列	
当Tomcat接收的连接数达到maxConnections时，Acceptor线程不会读取accept队列中的连接，-1，则连接数不受限制（如果配置了Executor，则默认值是Executor的maxThreads）。
请求处理线程的最大数量。默认值是200（Tomcat7和8都是的）。如果该Connector绑定了Executor，这个值会被忽略，因为该Connector将使用绑定的Executor，而不是内置的线程池来执行任务
Executor元素代表Tomcat中的线程池


运行中的日志catalina.out：tomcat的标准输出(stdout)和标准出错(stderr)和应用里使用其他的日志框架，配置了向Console输出的
访问日志信息localhost_access_log：内部代码丢出的日志和记录的访问的时间，IP，访问的资料等相关信息


apr: http://apr.apache.org/download.cgi (apr-1.5.2  apr-iconv-1.2.1   apr-util-1.5.4)
编译：
	./configure --prefix=/opt/apr
	./configure --prefix=/opt/apr-iconv --with-apr=/opt/apr
	./configure --prefix=/opt/apr-util --with-apr=/opt/apr --with-apr-iconv=/opt/apr-iconv/bin/apriconv
	https://tomcat.apache.org/whichversion.html -- Download page下载原生tomcat ：https://archive.apache.org/dist/tomcat/tomcat-connectors/native/
	cd tomcat-native-1.1.3/jni/native/   &&  ./configure --with-apr=/opt/apr
配置：
	vim +2 catalina.sh   添加 LD_LIBRARY_PATH=SLD_LIBRARY_PATH://path/apr/lib  export LD_LIBRARY_PATH
		和内存回收参数
	vim conf/server.xml 
		<Connector port="8080" protocol="org.apache.coyote.http11.Http11APRProtocol"
			maxThreads="2000"                    
			minSpareThreads="100"				
			maxConnections="10000"				
			acceptCount="2000"
			URIEncoding="UTF-8"
			enableLookups="false"               
			disableUploadTimeout="true" 												
			#可用让负载服务器进行压缩
			#compression="on"					
			#compressionMinSize="2048"
			#compressableMimeType="text/html,text/xml,text/javascript,text/css,text/plain"
			connectionTimeout="20000"			
			redirectPort="8443" />


java编译生成的class文件是平台无关的，这就意味着jar包是跨平台的
编译：
javac com/imooc/jardemo2/Welcome.java -d target/
打包：通常一个jar包就是一个java程序或者一个java库
jar -cvfm welcome.jar META-INF/MANIFEST.MF *
运行：
java -jar welcome.jar

做好一个web应用后，通常是网站，打成包部署到容器中，压缩和解压和jar包一样
war包可以放在tomcat的webapps下运行


lsof -i:8080
ps -ef | grep tomcat
jmap -heap tomcat_PID

WebService是一种跨编程语言和跨操作系统平台的远程调用技术
webserver
appserver


Rails 是使用 Ruby 语言编写的 Web 应用开发框架，目的是通过解决快速开发中的共通问题，简化 Web 应用的开发。与其他编程语言和框架相比，使用 Rails 只需编写更少代码就能实现更多功能
NewRelic是一家提供Rails性能监测服务的网站, NewRelic提供了不同级别的监测功能，免费的是Lite版本，最高有Gold版本.
New Relic监控类别:
	1.浏览器端监控（Customer Experience）:  
	2.服务端监控（APM）:服务端监控是用来收集Web应用在服务器端的性能数据。该数据和客户端数据能够关联起来，使得分析完整的事物性能成为可能   
	3.基础架构监控（Infrastructure）:服务器监控（Server Monitor）的升级替代产品
		原理是利用插入到服务端程序的代理，来收集数据并汇集到New Relic位于全球各地的数据中心(访问NewRelic网站),支持多达七种编程语言，包括ruby，Java， Node.js，PHP，.NET，Python， Go等
Pingdom:第三方网站进行监控
PagerDuty是一款能够在服务器出问题时发送提醒的软件。在发生问题时，提醒的方式包括屏幕显示、电话呼叫、短信通知、电邮通知等，而且在无人应答时还会自动将提醒级别提高。该软件通过一个控制面板对问题进行监控



监控：https://github.com/psi-probe/psi-probe/releases
	1.将probe.war包解压到tomcat的webapp目录下
	2.<user username="probe" password="000000" roles="tomcat,manager,probeuser,poweruserplus,poweruser"/>



 javap是jdk自带的反解析工具。它的作用就是根据class字节码文件，反解析出当前类对应的code区（汇编指令）、本地变量表、异常表和代码行偏移量映射表、常量池等等信息。
 6.调优命令
 jps  -v/-m      #JVM Process Status Tool,显示指定系统内所有的HotSpot虚拟机进程。
 jstat                     #JVM statistics Monitoring是用于监视虚拟机运行时状态信息的命令，它可以显示出虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。
       MC(1.8)/PC(1.7)   方法区空间大小 #metaspace 元数据空间//系统内存
 	  MU(1.8)/PU(1.7)   方法区使用空间大小
   jstat -options  选项：-gc时间及次数  -gccause垃圾回收原因	  
 jinfo                     #JVM Configuration info 这个命令作用是实时查看和调整虚拟机运行参数
 jhat                      #JVM Heap Analysis Tool命令是与jmap搭配使用，用来分析jmap生成的dump，jhat内置了一个微型的HTTP/HTML服务器，生成dump的分析结果后，可以在浏览器中查看。
 jmap                      #JVM Memory Map命令用于生成heap dump文件。
 jstack                    #用于生成java虚拟机当前时刻的线程快照。
 jmc                       #监视和管理 Java 应用程序，不会导致相关工具类的大幅度性能开销，
 jconsole                  #Java Monitoring and Management Console是从java5开始，在JDK中自带的java监控和管理控制台，用于对JVM中内存，线程和类等的监控。
 jvisualvm                 #jdk自带全能工具，可以分析内存快照、线程快照；监控内存变化、GC变化等。

 JVM调优原则：降低Full Gc频次
              确保大对数对象“朝生夕死”
 			 提高大对象进入老年代的门槛(-XX:MaxTenuringThreshold)
                                                                        
 Allocation Failure：表明本次引起GC的原因是因为在年轻代中没有足够的空间能够存储新的数据了。
 
 -server -Xms1200m -Xmx1200m -Xmn500m -XX:+UseConcMarkSweepGC -XX:SurvivorRatio=8 -XX:CMSInitiatingOccupancyFraction=70 -XX+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction=5 -XX:+HeapDumpOnOutOfMemoryError 
 

 组件：server.xml --> <> </>


 JConsole是基于JMX的可视化监视、管理工具
 cat bin/catalina.sh
	#无需认证的远程监控配置
	-Dcom.sun.management.jmxremote.port=60001 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=192.168.1.50    
	#设置需要密码的远程登陆配置
	-Dcom.sun.management.jmxremote.port=60001 -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.pwd.file={jmxremote.password}Path -Djava.rmi.server.hostname=192.168.3.70
        #jdk下面的该目录，路径不一定，权限600
		cat management/jmxremote.access
			monitorRole   readonly     #角色1和角色2
			controlRole   readwrite \
						create javax.management.monitor.*,javax.management.timer.* \
						unregiste
		cat management/jmxremote.password
			monitorRole  123456789
			controlRole  123456789
 无法正常关闭：创建一个文件添加参数
 cat bin/setenv.sh 
	CATALINA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.port=60001 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=192.168.3.70"
 

 jvisualvm插件：
	1.visualvm
	
 jprofilers












