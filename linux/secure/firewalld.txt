
FIREWALL分9大区域，Public：只开放自己规则下的服务  ---默认区域
firewall-cmd --list-all  --查看默认区域

配置方法：（1）命令： firewall-cmd  （2）图形界面：需要安装firewall-config
防火墙有永久和临时，临时的重载/重启会失效，永久的添加(--permanent)需要重载(--reload)或者重启(restart)

查看帮助：man firewall-cmd / firewall-cmd -h
查看防火墙：firewall-cmd --state / --list-all
查看ipset的ip：firewall-cmd --info-ipset=db_whitelist
查看ipset文件：firewall-cmd --get-ipsets

添加：firewall-cmd --add-* / --set* / --new*
删除：firewall-cmd --remove-* / --delete*
查询：firewall-cmd --list* / --get* / --query-* / --info* / --path*
修改:  firewall-cmd --change*

添加/删除全局模式的服务|端口：存放在/etc/firewalld/zones/public.xml 
firewall-cmd --permanent --add-service=http
firewall-cmd --permanent --add-port=port/protocol        #port = [8080 或者 8000-8999]
firewall-cmd --permanent --remove-service=XXXX
firewall-cmd --permanent --remove-port=XXXX/protocol
设置端口转发（创建一个DNAT规则）
firewall-cmd --add-forward-port=port=8000:proto=tcp:toport=80 --permanent 
firewall-cmd --add-forward-port=proto=80:proto=tcp:toaddr=192.168.1.1[:toport=8080] # 将80端口的流量转发至192.168.0.1 
禁ping：
firewall-cmd --add-icmp-block=echo-request --permanent

General rich rule structure（[表示可有可无],<表示必须有但可以自定义>,invert=yes: 表示取反的意思）
	rule [family="<rule family>"]
	[source address="<address>" [invert="True"] ]
	[destination address="<address>" [invert="True"] ]                                  
	[service name="<service_name>"  port port="<number_or_range>" protocol="<protocol>" ]
	[protocol value="<protocol_name_or_ID>" icmp-block name="<icmptype_name>"]    
	[forward-port port="<number_or_range>" protocol="<protocol>" to-port="<number_or_range>" to-addr="<address>"]
	[masquerade]
	[log [prefix="<prefix text>"] [level="<log level>"] limit value=rate/duration]
	[audit type="<audit type>" ]
	<action>
其中：icmp-block(icmp报文阻塞)在内部使用 reject 动作 masquerade(创建动态SNAT) forward-port 不允许有动作

timeout:规则只启动指定秒数
target：ACCEPT, DROP, REJECT
在/usr/lib/firewalld/services/ 下有定义了部分服务配置文件，可拷贝到/etc/firewalld/services/下面(也可以自定义)，如果一个服务使用了若干个端口，则可以在服务中定义

Lockdown Whitelist Options（此选项支持四种控制方式:1. context : 根据SELinux的进程domain(域)的安全上下文类型来定义Whitelist(白名单)2. command: 根据命令的绝对路径做Whitelist.3. uid4. user： 可以使用用户名 或 UID来做Whitelist）
　　　　firewall-cmd --lockdown-on 　　　　 #先开启功能，在设置谁能操纵firewall-cmd.
　　　　firewall-cmd --add-lockdown-whitelist-command=<command>
　　　　　　　　　　--add-lockdown-whitelist-context=<context>
　　　　　　　　　　--add-lockdown-whitelist-uid=<uid>
　　　　　　　　　　--add-lockdown-whitelist-user=<user>

Firewall所谓的黑白名单ipset其实就是一个含有ip的名单，drop了就是黑名单，accept就是白名单(在zones/public.xml中定义)。

导入ipset：提前写好白名单IP文档，便于直接导入firewall
创建文件：cat firewall.txt        
103.232.87.0/24
103.35.118.19
创建ipset：firewall-cmd --permanent --new-ipset=http_whitelist --type=hash:ip            #会在ipset中添加，还得全局配置//在zone/public.xml 添加rules   
重新加载：firewall-cmd --reload                                                             
导入白名单文件内容：firewall-cmd --ipset=hgcp_whitelist  --add-entries-from-file=/opt/dfcp_whitelist   

添加/删除ipset：仅 修改存放路径/etc/firewalld/ipsets
firewall-cmd --permanent --new-ipset=hgcp_whitelist --type=hash:ip  (ipset -h)
firewall-cmd --permanent --delete-ipset=XXXX_whitelist
添加/删除ipset中的ip：
firewall-cmd --permanent --ipset=db_whitelist --add-entry=${i}       
firewall-cmd --permanent --ipset=db_whitelist --remove-entry=${i}

添加/删除rich rules：存放在/etc/firewalld/zones/public.xml
firewall-cmd --permanent --add/remove-rich-rule='rule family="ipv4"  source address/ipset="XXXX_whitelist" port port="80" protocol="tcp" accept'		#添加/删除白名单
firewall-cmd --permanent --add/remove-rich-rule="rule family="ipv4" source address/ipset="XXXX_whitelist" port port="1873" protocol="tcp" drop"		#添加/删除黑名单

web端口（80）对白名单单位时间不限制连接数，其他IP每秒限制2次                   
firewall-cmd --permanent --add-rich-rule='rule family="ipv4"  source address="0.0.0.0/0" port port="80" protocol="tcp" accept limit value="2/s"'    ip每秒限制2次

用途为限制每个Ip每秒钟最大连接数为2次，多余的拒绝链接，不会占用端口；超过次数将记录至日志，便于日志分析与检查。
firewall-cmd --permanent --add-rich-rule='rule family="ipv4" source address="0.0.0.0/0" port port="1080" protocol="tcp" 
            log prefix="attack" level="notice" limit value="2/s" audit limit value="2/s" accept limit value="2/s"'


指定服务白名单:firewall-cmd --permanent --add-rich-rule='rule family="ipv4"  source address="192.168.2.131" port port="80" protocol="tcp" drop' 
<!--
<rule family="ipv4">
  <source address="192.168.2.131"/>
  <service name="ssh"/>
<accept/>
</rule> -->

添加服务与端口：firewall-cmd --permanent --add-service=http
<service name="dhcpv6-client"/>
<port protocol="tcp" port="873"/>

指定端口黑名单： firewall-cmd --permanent --add-rich-rule='rule family="ipv4"  source ipset="blacklist" port port="80" protocol="tcp" drop' 
<rule family="ipv4">
  <source ipset="blacklist"/>
  <port protocol="tcp" port="443"/>
  <drop/>
</rule>

[指定端口]白名单：
<rule family="ipv4">
  <source ipset="8002_whitelist"/>
  <!--<port protocol="tcp" port="8002"/>-->
  <accept/>
</rule>

添加/删除ipset名单ip：firewall-cmd --permanent --ipset=db_whitelist --add/remove-entry=${i} 
<?xml version="1.0" encoding="utf-8"?>
<ipset type="hash:ip">
  <entry>103.68.110.243</entry>
</ipset>


启动/关闭紧急模式(断/连网)：firewall-cmd --panic-on/off


选项 –-direct 需要是直接选项的第一个参数，直接编写iptables规则。将命令传递给防火墙。参数 <args> 可以是 iptables, ip6tables 以及 ebtables 命令行参数。
firewall-cmd --direct --passthrough { ipv4 | ipv6 | eb } <args>          路径是：/etc/firewalld/direct.xml
firewall-cmd --permanent --direct --add-rule/chain ipv4 （filter INPUT 0 -s 0.0.0.0  -p tcp --dport 22  -j ACCEPT #这是iptable规则）




IPTABLES：
四表：filter(过滤表) nat(地址转换表) mangle(包标记表) raw(状态跟踪表)
五链：PREROUTING(路由前) POSTROUTING(路由后)  INPUT(入站)  OUTPUT(出站)  FORWARD(转发)
匹配顺序:1.顺序匹配，匹配即停止    2.若无任何匹配，则按该链的默认策略处理

netfilter 组件也称为内核空间（kernelspace），是内核的一部分，由一些信息包过滤表组成，这些表包含内核用来控制信息包过滤处理的规则集。
iptables 组件是一种工具，也称为用户空间（userspace），它使插入、修改和除去信息包过滤表中的规则变得容易。

filter: 一般的过滤功能.
nat: 用于nat功能(端口映射, 地址映射等).
mangle: 用于对特定数据包的修改.
raw: 优先级最高, 设置raw时一般是为了不再让iptables做数据包的链接跟踪处理, 提高性能.

PREROUTING：数据包进入路由表之前.
INPUT: 通过路由表后目的地为本机.
FORWARDING: 通过路由表后, 目的地不为本机.
OUTPUT: 由本机产生, 向外转发.
POSTROUTIONG: 发送到网卡接口之前.

iptables [-t 表名] 选项 [链名] [条件] [-j 目标操作]
规律: 1.不指定表，默认为filter表  2.不指定链，默认为对应表的所有链   3.没有匹配规则，则使用防火墙默认规则  4.选项/链名/目标操作用大写字母，其余都小写
目标操作：ACCEPT：允许通过/放行  DROP：直接丢弃，不给出任何回应  REJECT：拒绝通过，必要时给出提示   LOG：记录日志，然后传给下一条规则
选项：
添加规则：-I 在链的开头(或指定序号)插入一条规则   -A 在链的末尾追加一条规则  
查看规则：-n 以数字形式显示地址，端口等信息    -L 列出所有的规则条目   --line-numbers  查看规则时，显示规则的序号
删除规则：-D 删除链内指定序号(或内容)的一条规则       -F 清空指定表中所有的规则
默认策略：-P 为指定的链设置默认规则

通用匹配：[协议匹配：-p+protocol]  [地址匹配：-s 源地址 , -d 目标地址] [接口匹配：-i 接受数据的网卡 , -o 发数据的网卡]          可直接使用
隐含匹配: [-p+protocol --sport 源端口 ,-p+protocol --dport 目标端口]  [ICMP类型匹配：--icmp-type+ICMP类型 ]                     要求以特定的协议匹配作为条件
取反操作： ! 有空格
拓展条件：-m 拓展模块 --拓展条件 条件值   ---前提是有对应的防火墙模块支持
拓展匹配：[MAC地址匹配：-m mac --mac-source MAC地址] [多端口匹配：-m multiport --sports 源端口列表(p0,p1:p2) , -m multiport --dports 目标端口列表]
          [ip范围匹配：-m iprange --src-range ip1-ip2 , -m iprange --dst-range ip1-ip2]
		  
SNAT源地址转换：1.修改数据包的源地址 2.仅用于nat表的POSTROUTING链
局域网共享公网ip上网：iptables -t nat -I POSTROUTING -s 局域网IP段 -p tcp --dport 80 -j SNAT --to-source 公网ip
地址伪装策略：1.针对外网接口ip地址不固定情况  2.将SNAT改成 MASQUERADE 即可  3.对于ADSL宽带拨号上网，网络接口可写为 ppp+
 
禁ping：1.iptables -A INPUT -p icmp --icmp-type echo-request -j DROP
        2.iptables -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT

iptables [-t nat] -nL  [INPUT]        默认查看filter表中的所有链，nL不能反着写。。。
iptables -t filter -P INPUT DOROP     所有表及链的初始默认规则为ACCEPT，通过-P选项可重置默认规则

开启路由：net.ipv4.ip_forward=1
永久保留规则：service iptables save


ipset del hgcp_whitelist 103.35.118.19   删除单个IP
ipset destroy blacklist  删除ipset   
ipset restore -f blacklist.txt  导入ipset规则  



iptables [-t filter] --line -nvL  [INPUT]   			    #查看 -x选项表示详细显示
	Chain INPUT (policy ACCEPT 0 packets, 0 bytes)
	num(-I/-D)   pkts(报文数) bytes target(-j action)   prot(协议-p) opt(选项)  in(-i)  out(-o)  source(-s / ! -s)   destination(-d) 

取反：! [-s -d] [--sport --dport port/:port/port:] [-i -o] [--src/dst-range]	
iptables -t filter -I INPUT 2 -s 192.168.3.6 -j DROP 		#插入一条编号为2的规则，默认规则编号为1，A则是追加到规则尾部
iptables -t filter -D INPUT 3 [-s 192.168.3.21 -j ACCEPT]	#删除编号为3的规则，也可以根据匹配条件+动作删除(由上往下删除一条)
iptables [-t filter] -F [INPUT]                             #flush相当于清除未保存的规则，可以根据表/链进行删除
iptables -t filter -P FORWARD DROP							#修改链的默认动作
#iptables -R INPUT 1 -s 192.168.3.21 -j ACCEPT				#修改指定编号规则，但是，修改要把不变的条件都加进去(例如省略了-s，会导致源地址变成0.0.0.0/0)，其实就相当于删除旧的，再添加新的规则
service iptables save / iptables-save > /etc/sysconfig/iptables  #保存规则 (rpm包：iptables-services)
iptables-restore < /etc/sysconfig/iptables  				#重载规则，现有规则会被覆盖
iptables -I INPUT -d 192.168.3.0/24 -p icmp -j REJECT			#-s表示源ip，-d表示本机ip

tcp：
iptables -I INPUT [-p tcp -m tcp --dport 3360] -j REJECT    #拓展模块目标端口  -m+拓展模块名(省略默认使用与-p协议名称相同的模块) multiport模块：连续端口22:80 离散22，80 混合22,80:3306
iptables -I INPUT -m iprange --src-range 192.168.3.20-192.168.3.32 -j DROP  #使用-将ip连接起来
iptables -t filter -I INPUT -m string --algo bm --string "ooxx" -j REJECT   #禁止携带指定字符串的报文进入本机(--algo bm是指算法)
-m time --timestart 09:00:00 --timestop 18:00:00  / -m time --weekdays/monthdays 6,7
iptables -I INPUT -p tcp --dport 80 [-m connlimit --connlimit-above 10] [--connlimit-mask 16] -j REJECT   #子网掩码为16的ip每个ip限制访问10次
1.iptables -t filter -I INPUT -p icmp -m limit --limit-burst 3 --limit 10/minute -j ACCEPT      #限制每6秒通过以ping报文，--limit-burst 3表示木桶可以多放三个，即执行完会再通过三个报文，6秒内址匹配一次
2.iptables -t filter -A INPUT -p icmp -j REJECT   #由于6秒内只匹配一次，其它的报文不会再匹配1，因此加一条，拒绝其它报文
iptables -t filter -I INPUT -p tcp -m tcp --dport 22 --tcp-flags ALL SYN -j REJECT  #--tag-flags   ALL = SYN,ACK,FIN,RST,URG,PSH  这个是匹配第一次握手，SYN,ACK匹配第二次握手
拓展模块：tcp multiport  iprange string time connlimit(ip) limit 
udp：
拓展模块：udp(-sport/-dport)
icmp: 互联网控制报文协议，有多种type和code(请求8/0，回应0/0)
iptables -t filter -I INPUT -p icmp -m icmp --icmp-type 8/0 -j REJECT  #远程主机ping请求8（8/0）（"echo-request"）拒绝

state状态：new(第一个连接) established(已建立) related(客户端和服务端可能有命令/数据连接，这些连接之间的关联) invalid(包无任何状态) untracked(报文未追踪)
1.iptables -t filter -I INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT       #限制外部主动连接内部，但不影响内部主动影响外部
2.iptables -t filter -A INPUT -j REJECT

黑白名单：默认ACCEPT，添加白名单，最后添加iptables -A INPUT -j REJECT

自定义链：
iptables -t filter -N IN_WEB					  
iptables -nvL    								  #references引用计数
iptables -I INPUT -p tcp --dport 80 -j IN_WEB     #引用
iptables -I IN_WEB -s 192.168.3.6 -j REJECT		  #正常添加规则
iptables -E IN_WEB WEB							  #重命名
iptables -X WEB                                   #删除，但必须无规则且不被引用  

网络防火墙					
iptables -I FORWARD -s 10.1.0.0/16(内网) -p tcp --dport 80 -j ACCEPT    #内网访问外网服务，内网IP&&目标端口
#iptables -I FORWARD -d 10.1.0.0/16(外网) -p tcp --sport 80 -j ACCEPT    #外网回应内网请求，目标ip&&源端口
iptables -I FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT      #放行双向的回应报文

动作：
ACCEPT:
DROP:不予回应，容易一直请求
REJECT：
	iptables -I INPUT  -p icmp -j REJECT --reject-with icmp-host-unreachable  
		icmp-port-unreachable(默认) / icmp-net-unreachable / icmp-host-unreachable / icmp-proto-unreachable
		icmp-net-prohibited / icmp-host-pro-hibited / icmp-admin-prohibited
LOG：只负责记录匹配的报文信息，不进行其它处理
	iptables -I INPUT -p tcp --dport 22 -m state --state NEW -j LOG --log-level "warning" --log-prefix "want-in-from-port-22"   （--log-prefix添加标签，方便查找，记录在/var/log/message,可以通过/etc/rsyslog.conf修改）
NET：NAPT / SNAT(访问外网服务) / DNAT(提供内网服务) / MASQUERADE(动态snat)
	iptables -t nat -A POSTROUTING -s 10.1.0.0/16(内网) -j SNAT --to-source 192.168.1.14(公网)   											#POSTROUTING与INPUT
	iptables -t nat -I POSTROUTING -s 10.1.0.0/16 -o ens33 -j MASQUERADE                                                     			    #动态snat
	1.iptables -t nat -I PREROUTING -d 192.168.1.146(公网) -p tcp --dport 3389(公网端口) -j DNAT --to-destination 10.1.0.6:3389(内网)		#PREROUTING与OUTPUT
	2.iptables -t nat -A POSTROUTING -s 10.1.0.0/16(内网) -j SNAT --to-source 192.168.1.14(公网)											#单独配1不行的话，则是需要与2结合	
REDIRECT:本机转发
	iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080		#将本机的80端口映射到本机的8080端口上 PREROUTING与OUTPUT

原则：
	1.规则顺序很重要，匹配即停止(log除外)
	2.一个规则中多个匹配条件，默认是与的关系，即需要满足所有的匹配条件才算匹配
	3.在满足1的情况下，被匹配次数多的，匹配频率高的应该放在最前面(查看报文数)
	4.网络防火墙需要考虑双向问题
	5.白名单一般不是改变默认策略，而是通过在链的最后设置reject规则实现白名单
	
	
	
	