

		
top(1/2/3)free/df/vmstat/iostat/iotop/nethogs
ps命令：1.ps -uroot  2.ps -ef  3.ps -C 命令或进程名   4.ps -l(后台非进程) 5.ps aux 内存/cpu中的程序
        6.ps L （例如：ps -o pid,ppid）  7.O或-O  增加pid、state、tname、time和command字段  使用w或-w选项，就会将完整的进程命令信息显示，多出的部分换行显示


NC：
服务端         						客户端(-u:udp -v:版本/连接信息  -z:不发送数据  -w:超时时间)
nc -lv 9999 (tcp)					nc -vzw 2 192.168.3.6 9999（telnet 192.168.3.6 9999 / nmap 192.168.3.6 -p 9999）
nc -ul 9999(udp)					nc -uvzw 2 192.168.3.6 9998
									nmap -sU 192.168.3.6 -p 9998 -Pn    （-sU扫描udp端口，-Pn防止部分防火墙影响）
nc -lv 9995 > clent.txt(接收端)     nc -vzw 2 192.168.3.21 9995 < nc.txt(发送端)    --- 传文件
可以传目录
nc -l 9991 >/dev/null				nc 192.168.3.21 9991 </dev/zero  +  dstat  ---  测网速


0 - stdin 代表标准输入。1 - stdout 代表标准输出。 2 - stderr 代表标准错误输出
当>&后面接文件时，表示将标准输出和标准错误输出重定向至文件。当>&后面接文件描述符时，表示将前面的文件描述符重定向至后面的文件描述符
cat notexistfile 2>1，会将1看作是一个文件，
cat notexistfile 2>&1,将标准错误输出输出到1这个文件里而不是标准输出,而&的作用就是为了区分文件和文件描述符,亦称“取地址符号”


netstat -lanp[t/u]  #查看网络连接
iostat -x :util%：表示io等待占比，正常情况下该值和磁盘读写（r/w）成正比，如果该值很大，读写数值很小则说明磁盘存在问题，系统性能会受影响	


              nc -l 1567 | tee test              nc 172.31.100.7 1567     
              nc -l 1567 < file.txt              nc -n 172.31.100.7 1567 > file.txt
	tar -cvf – dir_name| bzip2 -z | nc -l 1567   nc -n 172.31.100.7 1567 | bzip2 -d |tar -xvf -
	nc localhost 1567 | mcrypt –flush –bare -F -q -d -m ecb > file.txt    mcrypt –flush –bare -F -q -m ecb < file.txt | nc -l 1567	
	
	
cpu:top/lscpu	  top -H -p PID 查看进程下的线程 
	
	
ps -aux 的STAT
	S等待态(可中断)  D等待态(不可中断)  T等待态(暂停状态/后台挂起)  R运行态(包含就绪态)  Z僵尸进程
	<高优先级进程  N优先级较低  l有子进程  s会话组组长(一组会话组)  +前台进程(当前终端运行，可直接运行的进程)
ps -ajx/ef  查看父进程	
	进程优先级NI：决定一个进程的执行权限和占有资源的优先程度
		指定优先级运行程序命令：nice  -n  进程   (n取值：-20~19)
	
进程间通信方法：
	1.管道通信(pipe):
		通信原理： 在内存中开辟管道空间，生成管道操作对象，多个进程使用"同一个"管道对象进行操作即可实现通信(父进程创建，子进程继承)   
	2.消息队列(Queue)：先进先出
		通信原理：在内存中建立队列数据结构模型，多个进程都可以通过队列存入内容，取出内容的顺序和存入顺序保持一致
	3.共享内存(Shared memory)：
		通信原理：在内存中开辟一块空间，对多个进程可见，进程可以写入输出，但是每次写入的内容会覆盖之前的内容
	4.信号通信(内核发出的)：信号通信中唯一一种异步通信方法
		一个进程向另一个进程发送一个信号来传递某种讯息，接受者根据收到的信号进行相应的行为
			kill -l   查看系统信号
			sighup:终端关闭    sigint:ctrl-C终止   sigquit:ctrl-\终止    sigill/sigfpe:执行指令/算术运算错误终止  sigalrm:时钟信号
			sigkill:立即结束   sigstop:暂停       sigtstp:ctrl-z暂停    sigchld:子进程改变状态发信号给父进程   sigabort:结束进程     
	5.信号量:   
	6.套接字：本地套接字		
	

nmap -n(不执行dns解析)  <-sP ICMP扫描 -sU UDP扫描 -sT TCP连接全开扫描 -sS TCP半开扫描 -A 目标系统全面扫描  -p>   最好方法是man nmap
nmap 127.0-4.0.1-4 -n --reason --top-ports 20 -e ens33 --open
nmap iL file_name #文件扫描
 --exclude       IP
 --excludefile   file_name
 -p20,25
 -p-                           #所有端口
 --scanflags syn,ack,
 -sl   #僵尸扫描
auth: 负责处理鉴权证书（绕开鉴权）的脚本  
broadcast: 在局域网内探查更多服务开启状况，如dhcp/dns/sqlserver等服务  
brute: 提供暴力破解方式，针对常见的应用如http/snmp等  
default: 使用-sC或-A选项扫描时候默认的脚本，提供基本脚本扫描能力(-sC)  
discovery: 对网络进行更多的信息，如SMB枚举、SNMP查询等  
dos: 用于进行拒绝服务攻击  
exploit: 利用已知的漏洞入侵系统  
external: 利用第三方的数据库或资源，例如进行whois解析  
fuzzer: 模糊测试的脚本，发送异常的包到目标机，探测出潜在漏洞 intrusive: 入侵性的脚本，此类脚本可能引发对方的IDS/IPS的记录或屏蔽  
malware: 探测目标机是否感染了病毒、开启了后门等信息  
safe: 此类与intrusive相反，属于安全性脚本  
version: 负责增强服务与版本扫描（Version Detection）功能的脚本  
vuln: 负责检查目标机是否有常见的漏洞（Vulnerability），如是否有MS08_067
vnc bypass检查


生成随机密码:
	1.head /dev/urandom | tr -dc '0-9/A-Za-z0-9~!@#$%^&*' | head -c 20(生成随机数字)
	2.head -c 16 /dev/urandom | base64 (random会阻塞)
	3.openssl rand -hex 10
date [-R] [+"%Y-%m-%d %H:%M.%S"] ["+现在的时间是：%Y-%m-%d %H:%M.%S"] [+%s%N]   [-d "Dec 5, 2009 12:00:37 AM" +"%Y-%m-%d %H:%M.%S"] [-d "-1 day" +%Y%m%d] [-s "2012-05-23 01:01:01"]

scp  -p复制权限  -r递归  -v调试信息  -P指定端口  -C启动压缩  -i指定私钥 -F指定ssh_config -l限制带宽 -q静默模式 -c其它加密方式 -o指定某个选项(ssh_config) #同时还能在两个远程主机上传输文件


	
cal --help 显示时间	

终端会话录制：-q 静默模式  -t记录时间  -a追加  -c记录命令输出
  1.
	script -t 2>demo.time -a demo.his 　　　　　　　　　　 开始录像
		CMD                                                ctrl+d或者exit结束,会被记录
	scriptreplay demo.time demo.his　　　　　　　　　　　　回放
  2.
	script scp.log -c "cp -vf /root/anaconda-ks.cfg /opt/"   实际执行，记录该命令输出 
	
multitail：
	同时监控两个文件：multitail log1 log2
	分成两列监控两个文件：multitail -s 2 log1 log2
	分成两列监控，第一列3个，第二列2个： multitail -s 2 -sn 3,2	 log1 log2 log3 log4 log5
	
	
https://blog.csdn.net/freeking101/article/details/53691481/
wget是个专职的下载利器，简单，专一，极致。
curl可以下载，但是长项不在于下载，而在于模拟提交web数据，POST/GET请求，调试网页，等等）可以把 curl 看做是一个精简的命令行网页浏览器	
	断点下载  后台下载   用户名和密码  cookie(获取与使用)  proxy(代理服务器)  user_agent(浏览器)  reference(反盗链选项)
	分块下载  批量下载 -X指定请求方式   证书和协议  超时重试   response头部(-I/-D)   限制/限速   (-L)重定向页面
		curl -o /dev/null -s -w %{http_code} www.linux.com #-w/--write-out [format]仅输出http_code
		curl -c cookiec.txt  http://www.linux.com   #保存cookie
		curl -b cookiec.txt http://www.linux.com    #使用cookie
		wget --mirror -p --convert-links -P baidu  http://www.baidu.com    #打包下载网站
			–miror:开户镜像下载 -p:下载所有为了html页面显示正常的文件 –convert-links:下载后，转换成本地的链接 -P ./LOCAL：保存所有文件和目录到本地指定目录 
		wget --mirror -p --convert-links --spider http://www.baidu.com    #测试下载链接
		wget -i filelist.txt #下载多个文件，-c  断点下载   -b后台下载



diff -Naur 旧文件 新文件 > /opt/diff.patch      #diff制作补丁文件的原理：告诉我们怎么修改第一个文件后能得到第二个文件
patch -p0 [旧文件] < /opt/diff.patch    #没加路径会提示，Reversed这种是因为反向补丁了，*.orig是备份  
	patch -p0 < patch_file 时，所在路径就是补丁文件（第二个路径*.old） 的diff比较路径 则升级的文件是『 /home/guest/example/expatch.old 』，如果『 patch -p1 < patch_file』，则升级的文件为『 home/guest/example/expatch.old 』，如果『patch -p4 < patch_file』则升级『expatch.old』，也就是说， -pxx 那个 xx 代表『拿掉几个斜线(/)』的意思！
patch -RE < test.patch //还原旧版本，反向修复，删除空文件
实例1：	
	比较文件
	diff -Naur aa.txt bb.txt > diffab.patch
	cat diffab.patch
		--- aa.txt	2019-12-17 12:33:28.086127278 +0800
		+++ bb.txt	2019-12-17 12:33:44.286134702 +0800
	patch -p0 < diffab.patch
实例2：	
	比较目录
	diff -Naur test1/ test2/ > diff12.patch
	cat diff12.patch
		diff -uNr prj0/prj0name prj1/prj0name						<=====执行的命令，对prj0这个目录进行比较
		--- prj0/prj0name       2006-08-18 09:25:11.000000000 +0800 <=====参数p作用于这里，就是将无用的路径去掉，补丁时所处路径要在prj0内部，即prj0下一级目录
		+++ prj1/prj0name       1970-01-01 08:00:00.000000000 +0800 <=====这个目录在哪里都无所谓，补丁的时候不会用到
	cd prj0								#一定要进入需要打补丁的目录内部，即目录的下一级
	patch -p1 < ../diff12.patch			#diff12.patch放在哪里都好，写相对路径和绝对路径都行
										#仅跳到目录下一级就好，不然跳太深，会出现父目录的一些文件在这里找不到
	patch -R -p1 < ../diff12.patch		#进入目录下一级
#如果以上都不行，打补丁的时候换换目录看下	
	
	
	
	
	
	