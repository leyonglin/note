
硬编码（英语：Hard Code或Hard Coding）是指在软件实现上，将输出或输入的相关参数直接以常量的方式撰写在源代码中
ramdisk内存盘：是一种基于内存的虚拟磁盘技术
RAM（random access memory）即随机存储内存，这种存储器在断电时将丢失其存储内容，故主要用于存储短时间使用的程序。 
ROM（Read-Only Memory）即只读内存，是一种只能读出事先所存数据的固态半导体存储器
cpu实模式："实"体现在其内存地址是真实的物理内存地址(系统启动时候)
cpu保护模式：物理内存地址不能直接被程序访问，程序内部的地址（虚拟地址）要由操作系统转化为物理地址去访问，程序对此一无所知(操作系统运行起来以后)
MBR是主引导记录，位于磁盘的第一个扇区，和分区无关，和操作系统无关
BRID(boot record ID)，它固定为0x55AA，用于标识该存储设备的MBR是否是合理有效的MBR
mbr(512)：
	boot loader(446)：
	分区表(64)： 0x80(1)(则表示该分区为激活的分区(操作系统所在分区)，且只允许有一个激活的分区) + 分区信息
	brid(2)：0x55AA，标识该存储设备的MBR是合理有效的MBR，如果bios读取MBR发现最后两个字节不是0x55AA，就会读取下一个启动设备(例如u盘)
磁盘分区的启动扇区中也放了boot loader(不是分区表)；
不同操作系统是装在不同分区中的，boot loader不能被覆盖
	但是如果是采用grub管理的话
	使用grub管理启动，则MBR中的boot loader是由grub程序安装的，此外还会安装其他的boot loader
	如果使用的是传统的grub，则安装的boot loader为stage1、stage1_5和stage2
	如果使用的是grub2，则安装的是boot.img和core.img
grub2程序安装grub后，会在/boot/grub2/i386-pc/目录下生成boot.img和core.img文件，另外还有一些模块文件，其中包括文件系统类的模块

安装完操作系统时生成的中间过渡文件，会收集到当前操作系统的根文件系统是什么类型的文件系统
	init ramdisk/initrd(5): 镜像文件系统，是在内存中划分一片区域模拟磁盘分区，在该文件中包含了找到根文件系统的脚本和驱动,内核也必须要带有对应文件系统的驱动, 由kernel_init挂载真正的根文件系统并从虚根切换到实根
	initramfs(6,7): 一个镜像压缩文件

系统启动过程：
	通电，cpu运行起来执行第一段指令是由cpu寄存器cs/ip上的地址指向的代码(BIOS中) 	# Bios ROM是固化的芯片,主板上一个ROM芯片上的程序，里面本来就有程序,上电就执行，
	bios是按下开机键后第一个运行的程序，它会读取CMOS中的信息(硬件自检等)
	bios一定会读取MBR中的记录
	#MBR的boot loader初始化软硬件环境
	#执行分区的启动扇区中的boot loader
	boot.img段的boot loader只有一个作用，就是跳转到core.img对应的boot loader的第一个扇区(硬盘启动是diskboot.img) #core.img包含了diskboot.img和grub内核kernel.img
	kernel.img加载文件系统模块,加载了模块后，kernel.img就能识别/boot分区的文件系统，也就能找到grub的配置文件/boot/grub2/grub.cfg，有了grub.cfg就能显示启动菜单
	kernel.img会根据菜单选择项，从grub.cfg中的配置加载对应的操作系统内核(/boot目录下vmlinuz开头的文件) 并向操作系统内核传递启动时参数  #grep menuentry /boot/grub2/grub.cfg
	加载完操作系统内核后grub2就将控制权交给操作系统内核。
	加载内核及初始化内核环境
	#救援模式就是刚加载完内核，init进程接收到控制权但没有进行任何操作系统初始化过程
	启动内核线程加载initramfs，完成根的挂载(其他的在初始化用户空间的时候挂载)
	初始化用户空间: 读取运行级别；初始化系统类的环境；根据运行级别初始化用户类的环境；执行rc.local文件完成用户自定义开机要执行的命令；加载终端
	

消耗资源对比：完全虚拟化(由虚拟化软件分配资源) > 半虚拟化(部分资源由宿主操作系统分配) > 硬件虚拟化(宿主机系统也是虚拟化软件)

Virtual Machine Manager (VMM)/hypervisor：一种运行在物理服务器和操作系统之间的中间层软件，可以允许多个操作系统和应用共享一套基础物理硬件
VT(Virtualization Technology)是一种虚拟化技术，单CPU模拟多CPU并行，允许应用程序都可以在相互独立的空间内运行而互不影响,因此一个平台同时运行多个操作系统
不支持VT虚拟化技术的处理器，也可以使用VMware虚拟机软件，但无法调用VT虚拟化技术，实际使用中受到功能限制，比如32位操作系统只能安装32位虚拟机，无法安装64位虚拟机，同时虚拟机性能明显比较低，偏卡顿的那种
intel虚拟技术的实现需要同时具有处理器、芯片组、BIOS、VMM(hypervisor)软件的支持 
 
 
X.509：是一bai种非常通用的证du书格式
	DER - Distinguished Encoding Rules,打开看是二进制格式，window平台，常用PFX，PFX里边包含证书和私钥
	PEM - Privacy Enhanced Mail,打开看文本格式，linux平台，常用crt(公钥)和key(私钥)俩文件
CSR - Certificate Signing Request,即证书签名请求,这个并不是证书,而是向权威证书颁发机构获得签名证书的申请
jks是JAVA的keytools证书工具支持的证书私钥格式   


DAS：本地
NAS：文件系统
SAN：块

QPS：querys/sec 每秒的响应请求数
TPS: 每秒能处理的事务数，从客户端发出请求到收到响应的时间
对于一个页面的一次访问，形成一个TPS；但一次页面请求，可能产生多次对服务器的请求，服务器对这些请求，就可计入“QPS”之中。如，访问一个页面会请求服务器2次，一次访问，产生一个“T”，产生2个“Q”
RT，响应时间(tps)
系统的吞吐量（承压能力）与request对CPU的消耗、外部接口、IO等等紧密关联（静态和动态...）

https://www.hhcycj.com/post/item/331.html
如何使用变量的指针找到整个变量空间？
	通过变量指针找到变量的第一个字节
	根据变量的类型得到变量所占的总的字节，从第一个字节往后数，就能找到该变量空间所有的字节
内存的操作：
int main(void)
{
    int a = 10;	  //a变量代表的是a变量空间(变量的值),&a表示的是一个数，就是变量a的指针,即a区域的第一个字节的内存地址
    int b;
    int *pa = &a; // 把&a指针数字，赋值给pa(数字), *pa通过pa里存放的指针，找到所指向的变量空间
    *pa = 20;     // 修改了 a 变量空间的值，被设置为 20；等价于 a = 20;
    b = *pa;      // 等价于 b = a;
    printf("pa = %d \n", pa); // 输出的是指针数字； 输出 pa = 6356728
    printf("a = %d \n", a);   // 输出的是 a 变量空间里面值;  输出 a = 20
    return 0;
}
指针传参，可以突破这个作用域的限制(局部/全局变量)，通过指针指向相同的变量，修改的是对应内存地址的空间
指针占用空间大小：32位机4字节(32位)   64位机8字节(64位)--->应该是存储在符号表中
指针：
	1.指针的类型：#1和2是相同的，作用是帮助编译器发现你是否用了错误的类型
	2.指针所指向的类型：指针所指向的类型决定了编译器将把那片内存区里的内容当做什么来看待
	3.指针的值：指针的值是内存区域的首地址(最小的那个字节的地址)
https://blog.csdn.net/u012826756/article/details/46859319
变量：用来标识(identify)一块内存区域(就像人一样，是一种分类)，这块区域的值一般是可以更改的，但通过变量的操作特性。用const修饰的使变量不能更改的就和常量一样的变量叫做常变量
变量名：变量名不占空间，是一个标识符(identifier)，用来指代一块内存区域
编译器：会搜集我们的变量名(变量名是给编译器看的)
假如定义了一个全局的int a; ,编译器会为程序预留4个字节的空间（假设在32位平台）,并把我们的变量名“a”保存进符号表，并用这个符号表的索引对应实际的空间。 
指针名、数组名、函数名它们分别表示指针所指向元素的地址、数组的首地址和函数的入口地址。  
https://blog.csdn.net/tyler_download/article/details/52437687
符号表本质上是一种数据库(整个符号表会直接存储在内存中)，用来存储代码中的变量，函数调用等相关信息。该表以key-value 的方式存储数据
{ 
	int variable = 0; 
}
在上面代码中，进入大括号时，解析器遇到变量的声明，于是便把变量variable 的相关信息写入符号表。当解析器读取到右括号时，便把variable在符号表中的信息给删除，因为出了variable的作用范围只在括号之内
个人理解：符号表可以用二维数组表示，x维存储变量名(转换成哈希)，y维存储层次(局部/全局变量)

对象就是键值对: 也可以看成json数据，是被构建出来的，没啥特别的

https://me.csdn.net/linyt
栈在进程中的作用如下：
	保存函数内的临时局部变量。
	调用函数时传递参数
	保存函数返回的地址
	函数调用的上下文
堆是指程序运行是申请的动态内存，而栈(堆栈)只是指一种使用堆的方法(即先进后出)
（1）程序内存布局场景下，堆与栈表示两种内存管理方式；
	堆由开发人员分配和释放(动态)， 若开发人员不释放，程序结束时由 OS 回收，分配方式类似于链表
	栈由操作系统自动分配释放(静态和动态)，用于存放函数的参数值、局部变量等，其操作方式类似于数据结构中的栈
	理论上，每个进程拥有的栈的大小要远远小于堆的大小
	分配效率不同。栈由操作系统自动分配，会在硬件层级对栈提供支持，堆则是由C/C++提供的库函数或运算符来完成申请与管理，实现机制较为复杂，频繁的内存申请容易产生内存碎片。显然，堆的效率比栈要低得多
	存放内容不同：堆中具体存放内容是由程序员来填充的，栈存放的内容，函数返回地址、相关参数、局部变量和寄存器内容等
（2）数据结构场景下，堆与栈表示两种常用的数据结构。
	栈是一种运算受限的线性表---只有一个口，所以是先进后出
	堆是一种常用的树形结构，是一种特殊的完全二叉树
	
堆和栈一个向上涨，一个向下涨：划出一块空间，一个从上往下，一个从下往上，这样就能既简单有充分利用空间	

汇编中有ret相关的指令，它表示取出当前栈顶值，作为返回地址，并将指令指针寄存器EIP修改为该值，实现函数返回
rbp和rsp，rip只是32位ebp和esp，eip变量的64位等价物
栈是向下生长的，存储东西越多，内存地址越来越小

eip：指令地址寄存器，指向指令所在地址
esp：指向当前的栈顶


ebp：指向了本次函数调用开始时的栈顶指针(栈基地址寄存器，指向栈底地址)
ebp(帧指针Frame Pointer)和esp(栈指针Stack Pointer)之间的空间被称为本次函数调用的“栈帧”

数据执行保护DEP：可以监控您的程序以确保其安全地使用系统内存(将非代码段的地址空间设置成不可执行属性),如果发现计算机上的程序错误地使用内存，则会关闭此程序并通知您。

栈溢出stackoverflow：
	超出低地址范围的overrun(上溢)：主要是由过深的函数调用引起(比如递归调用)
		对于那些不使用虚拟内存机制的RTOS，通常采用的做法是在stack创建之初就填充满固定的字符(比如0x5a5a5a5a)，如果发生了"上溢"，那么stack末端(最低地址处)的填充字符则有可能会被更改。
	超出高地址范围的underrun(下溢)：
		可以在将函数的返回地址压栈的时候，加上一个随机产生的整数，如果出现了数组越界，那么这个整数将被修改，这样在函数返回的时候，就可以通过检测这个整数是否被修改，来判断是否有"下溢"发生。
		只需要在gcc编译的时候，加入"-fstack-protector"选项即可

内存随机化保护ASLR(Address Space Layout Randomization)技术就是通过加载程序的时候不再使用固定的基址加载(将栈，堆和动态库空间全部随机化)，从而干扰shellcode定位的一种保护机制


c文件：主要每个模块的原代码都在c文件中。
h文件：每个c文件都跟着一个h文件，h文件的作用是放着c文件中函数的声明，结构体的定义，宏的定义等。
s文件：.c 文件经过汇编器处理后的汇编文件，不可以在这里面加入预处理的命令
S文件：在编译汇编文件之前会进行预处理操作，可以在这里面加入预处理的命令
搜索结果
网上的精选摘要
o文件：又称对象文件，是可执行文件。里面包含了对各个函数的入口标记，描述
	当程序要执行时还需要链接(link). 链接就是把多个.o文件链成一个可执行文件。
	当多种编程语言希望混合编译时，就可以通过分别编译成.o文件，再链接（link）成可执行文件
a文件：静态链接是指把要调用的函数或者过程链接到可执行文件中，成为可执行文件的一部分。当多个程序都调用相同函数时，内存中就会存在这个函数的多个拷贝	
so文件可以用于多个进程的共享使用(映射)，所以又叫共享库文件	
ELF是非常灵活的二进制格式

每个文件模块，都有自己的起始地址，编译链接就是为了这些文件指令能在内存中按正确顺序连接起来
重定位：之前的地址不对，重新定位新地址
重定位作用：将.o文件中每个机器指令的逻辑地址，重定位为（转为）实际运行的地址
	如果是裸机运行的：运行的地址就是内存的物理地址
	如果是基于OS运行的：运行地址就是虚拟内存的地址
        cpp、cc1预编译         cc1编译                  as汇编
a.c —————————————————> a.i ————————————————> a.s ———————————————————> a.o ———————————————————> a可执行文件


向后兼容：在旧版本上开发的目标，或者旧版本生成的数据，能够在新版本正确运行，或者正确处理
	只新增接口，对现有接口不能做任何修改，同时可感知到的默认行为都要保持不变
	保留原有接口，开发一个同名的新接口，但接口版本号不同
向前兼容：在新版本上开发的目标，或者新版本上生成的数据，能够在旧新版本上运行，或者处理

利用旧知识构建新知识：
一天，数学家觉得自己已受够了数学，于是他跑到消防队去宣布他想当消防员。 消防队长说：“您看上去不错，可是我得先给您一个测试。”
消防队长带数学家到消防队后院小巷，巷子里有一个货栈，一只消防栓和一卷软管。消防队长问：“假设货栈起火，您怎么办？”
数学家回答：“我把消防栓接到软管上， 打开水龙，把火浇灭。”消防队长说：“完全正确！最后一个问题：假设您走进小巷，而货栈没有起火，您怎么办？”数学家疑惑地思索了半天，终于答道：“我就把货栈点着。” 消防队长大叫起来：“什么？太可怕了！您为什么要把货栈点着？”
数学家回答：“这样我就把问题化简为一个我已经解决过的问题了。”

知识系统化：在旧知识的框架下，添加一个新知识节点

该知识的历史，它的出现是为了解决什么问题的？ 
该知识本身是怎么样的，它的定义，它的原理 
如何应用该知识

按分层进行设计和交流：
	第一阶段：整点介绍你的期望和目标
	第二阶段：要设计各功能区整体的布局
	第三阶段：细节设计了，根据个人的实际喜好和需求进行安排	



#####################################################################################################

https://www.cnblogs.com/f-ck-need-u/p/10481466.html
cpu时间共享/分时系统
操作系统的进程调度程序（也称为调度器或调度类）来决定,选择下一个要执行的进程
进程调度算法策略的两个关键性指标正是响应时间和周转时间（抢占式多任务处理：表明某进程比较重要，优先级高）
操作系统必须要在任何有需要的时候掌握CPU的控制权
中断用于保证CPU控制权交给操作系统，从而让操作系统可以执行某些操作
软中断是执行中断指令产生的(系统调用system call)，而硬中断是由外设引发的
Idle进程的工作非常的轻松，就是累积CPU空闲时间，CPU工作在这种状态下，显然以最低能耗（最小频率）的方式在运行


虚拟内存目标: 1.对进程透明   2.保护进程(隔离)
基址寄存器(基址+偏移量)是用来转换地址的，界限寄存器(为该段分配了多少内存)是用来保护进程不越界访问内存的。
CPU借助基址寄存器和界限寄存器管理并提供地址翻译和内存保护的功能，通常称为内存管理单元
分段(虚拟内存)是将内存划分成各个段落（Segment），每个段落的长度可以不同，且虚拟地址空间中未使用的空间不会映射到物理内存中，所以操作系统不会为这段空间分配物理内存。这样的话，内核为刚创建的进程分配的物理内存可以很小
	把虚拟地址空间映射到了物理地址空间，并且程序操作的是虚拟地址，但是分段映射的是一片连续的物理内存
	分页可以实现程序隔离(段是有大小的)
	代码段中的程序在执行时通过缺页中断按需载入内存，缺页中断就是要访问的页不在主存，需要操作系统将其调入主存后再进行访问
Linux将虚拟内存划分成固定大小的页(默认4K)，物理页和虚拟页的大小相等
操作系统为每个进程都维护了一个称为页表（page table）的数据结构。页表中的每项代表一个页的映射信息，也称为页表项（Page Table Entry，PTE）
多级页表：增加了一个页目录，页目录是页表的更高一层次，作用是没有为那些连续无效的页维护页表
	分页可以实现离散存储，形成逻辑上连续的地址(虚拟地址空间仍然是连续的,物理地址不一定是连续的)
内存的操作单元是页，一页空间太大，容易产生内部碎片
外部碎片是因为给空间划分了不同大小的区段
所有驻留在内存中的页也称为驻留集
缺页异常（page fault），也称为页未命中（page miss），于是陷入操作系统，启动页错误处理程序，标记或从swap分区/磁盘读取数据
高水位线（High Watermark，HW）和低水位线（Low Watermark，LW）。当操作系统发现空闲页的数量少于低水位线的值时，就会自动启动一个称为swap daemon（也称为page daemon）的后台线程kswapd，该线程会扫描所有进程并从中选出一些候选进程，然后将这些进程的所有页都拷贝到swap分区，直到空闲物理内存页的数量达到高水位线的值
内核参数：panic_on_oom  # oom时系统如何处理
绕过内核功能的技术，通常称为内核旁路（Kernel Bypass）
DMA处理器：在硬件中集成一个小型的CPU/处理器，这样操作系统要执行IO操作时，直接将相关指令发送给这些DMA硬件，DMA处理器负责IO操作，cpu就可以执行别的程序(磁盘-->内核空间-->用户空间)
RDMA（Remote Direct Memory Access）机制：将读取的数据（写操作也一样）写入到用户空间的IO Buffer

进程与进程的通信IPC：协作进程和独立进程
	进程间通信方式							描述
	文件（File）							多个进程可以获取到同一个文件的数据
	管道（pipe）							单方向传输数据的管道，只能一方写，另一方读
	套接字（Socket）						多机进程间通信，当然也可以在本机让两个进程使用socket通信
	Unix域套接字（Unix Domain Socket）		单机进程间通过域套接字模式通信，可看作是双向管道
	共享内存（Shared Memory，shm）			在物理内存上划分一片内存，多个进程共享这片内存
	文件映射（Memory-maped file）			将文件中的一段数据映射到物理内存，多个进程共享这片内存
	消息队列（Message Queue）				某进程将消息放入消息队列，其它进程从队列中接收消息
	信号（Signal）							通过发送某些信号通知其它进程，进程收到信号做出不同的处理
	信号量（Semaphore）						根据是否有信号灯或信号灯的数量多少来决定是否阻塞进程
	锁（Lock）								对资源上锁，如果资源已被某进程锁住，则其它进程想要修改甚至读取这些资源，都将被阻塞，直到锁被打开。
1.匿名管道只能协调有亲缘关系的进程间通信   2.mkfifo命令创建命名管道

共享锁shared lock 和互斥锁metux/exclusive lock
在shell命令行下，提供了一个flock命令，它可以通过某个文件来实现锁机制

程序 -- os动态加载代码和静态数据，初始化 -- 执行入口函数main函数

内核在内核空间维护了一个称为进程表（Process Table）的数据结构，这个数据结构中记录了所有进程，每个进程在数据结构中都称为一个进程表项
进程表中除了记录了所有进程的PID，还使用一个字段记录了所有进程的指针，指向每个进程的进程控制块（Process Control Block，PCB）
PCB这个数据结构（task_struct）中自然保留了和进程相关的很多信息，至少在进行上下文切换时，能够保存下在CPU中关于当前运行进程的一些重要寄存器信息
当进程A要切换到进程B时，首先要陷入内核，然后内核将CPU中关于进程A的进程信息（即某些寄存器中的值）保存在进程A内核栈中的PCB结构中，然后从进程B内核栈的PCB结构中恢复进程B的信息到CPU的某些寄存器中，再退出内核模式回到进程B，这样CPU就开始执行进程B了
睡眠态
	可中断睡眠（interruptiable sleep）：允许接收外界信号和内核信号而被唤醒的睡眠
	不可中断睡眠(un-interruptiable sleep)：只能由内核发起信号来唤醒，外界无法通过信号来唤醒，只能在事件完成后由内核唤醒
stopped状态：shell的作业提供一种控制手段的。例如，可以按下ctrl+z让前台运行的命令进入到Stopped状态

cat进程执行时，发现要读取文件，但是cat进程是用户模式下的进程
	它没有权限打开文件，于是通过open()系统调用请求操作系统帮忙打开，于是陷入到内核，内核进程帮忙打开文件后返回一个文件描述符给cat进程并进入用户模式下，cat进程通过该文件描述符读取a.log文件
	但是当它开始读数据的时候，cat仍然无权限读取文件数据，于是通过read()系统调用请求操作系统帮忙读取，操作系统将读取到的数据放入内存(磁盘--内核态--用户态)
	然后回到cat进程，cat进程直接从内存中读取数据，并将读取到的数据输出到终端屏幕
	但是cat进程仍然没有权限执行写终端硬件（Linux下设备也是文件），于是又发送write()系统调用请求操作系统帮忙写数据到终端，于是数据显示在屏幕上

1.IO密集型任务很可能是交互型进程，应该给它高优先级；2.CPU密集型任务很可能是服务类进程，应该给它低优先级。

高效删除大量小文件
	find /tmp/temp/ -type f -name “*.jpg” -print0 | xargs -0 -P4 -n20000 rm -rf
	mkdir /tmp/empty;rsync -r –delete /tmp/empty/ /tmp/temp/

fork函数：创建子进程时会复制父进程(堆、栈空间在创建出来时是完全相同的)，创建进程的时候采用的是一种称为写时复制(copy-on-write，COW)的技术来降低这种复制开销
exec函数：子进程会发起exec函数调用去加载新程序，并替换当前进程，进程pid不变，但进程的虚拟内存会改变，即执行独立代码而不是父进程代码(执行完成后会自动退出)

父进程会在调用到wait()和waitpid()的时候一直阻塞等待，直到有子进程退出
子进程退出 -- 通知内核，让出cpu -- 内核发送sigchld信号给父进程  --  触发SIGCHLD处理程序(可将wait或waitpid放入这个信号处理程序中去)

孤儿进程：进程的父进程先退出，所有的孤儿进程都会被pid=1的init进程收养，使得它们的父进程变成init进程，即PPID=1，于是init进程负责为该子进程收尸
僵尸进程：子进程已执行完毕退出，但父进程不通过wait/waitpid读走子进程的退出状态信息，子进程将仍然存在于内核进程表中


网络数据传输：每次进程/线程需要一段数据时，总是先拷贝到kernel buffer，再拷贝到app buffer，再拷贝到socket buffer，最后再拷贝到网卡上
零复制：网络数据传输过程不经过应用层


主机路由：直接指明到某台具体的主机怎么走，主机路由也就是所谓的静态路由
网络路由：指明某类网络怎么走
默认路由：不走主机路由的和网络路由的就走默认路由。操作系统上设置的默认路由一般也称为网关。
U (route is up)
H (target is a host)
G (use gateway，也即是设置了下一跳的路由条目)


进程替换：能够在不同进程(使在同一个shell中执行)之间传递数据，进程替换会跟系统中的文件关联起来，这个文件的名字为/dev/fd/n,一般是63
echo "shellscript" > >(read; echo "hello, $REPLY")
	()表示结果，存储在/dev/fd/n中， 第二个>表示方向，()即/dev/fd/n的数据来自括号里<()还是括号外>()

操作码（opcode）: 二进制指令
汇编语言assembly language是二进制指令的文本形式，与指令是一一对应的关系。比如，加法指令00000011写成汇编语言就是 ADD
汇编语言对应着不同的机器语言指令集，不能跨平台移植
CPU寄存器（register），用来储存最常用的数据


##################################################################################################################

命名空间：隔离
异构：底层原理不一样(linux和windows)

##################################################################################################################

cpu是硬件
进程(内核)控制cpu(cpu执行进程中代码)通过总线控制硬件对内存进行操作

app buffer ： 就是进程内存的一部分
内核buffer

硬件---(驱动程序)---内核内存---用户内存
驱动: 硬件厂商根据操作系统编写的配置文件，是添加到操作系统中的一小块代码
网络协议栈：在内核内存中(ip等属性是在内核内存中的)
	内核进程进行判断：
		if 拆包(mac=mac)
		elif 拆包(ip=ip)
		elif 拆包(tcp port=tcp port)
		else 应用程序处理
封装：就是在数据上再加上一些二进制

数模转换器
模拟信号传输：将画面等转换为电压等模拟量，以数字数据的形式来定义这些电压变化
数字信号：高电压和低电压(二进制01)
	抽样:对模拟信号进行周期性扫描
	量化，就是把经过抽样得到的瞬时值将其幅度离散(有限个数值)
	编码，就是用一组二进制码组来表示每一个有固定电平的量化值

根据相应后缀名，由相应程序控制CPU，将内存数据进行解码、解压后得到原始的数据(模拟信号)

液晶分子在电压的控制下，形成不同的排列方式，所以可以控制光线的透过，形成不同明暗程度的画面


