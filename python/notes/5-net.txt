01： 网络知识解析 套接字，tcp编程	

网络功能：数据传输

osi七层模型：网络通讯工作流程的标准化
应用层：提供用户服务，具体功能有特定的程序而定
表示层：数据的压缩优化，加密
会话层：建立应用级的连接，选择传输服务
传输层：提供不同的传输服务，流量控制
网络层：路由选择，网络互联
链路层：进行数据转换，具体消息的发送，链路连接
物理层：物理硬件，接口设定，网卡路由交换机等

优点：将工作流程标准化   降低模块之间耦合度，方便多人开发

高内聚：模块功能尽可能单一
低耦合：模块之间尽可能减少关联和影响

tcp/ip模型/五层模型：应用层  传输层  网络层 物理层  链路层 
四层：应用层  传输层  网络层 物理链路层 

数据传输流程：
	1.发送端由应用层到物理层逐层添加到信息头(首部)，最终在物理层发送
	2.中间经过节点(交换机/路由器)转发，发送到接收端
	3.在接收端根据发送端的每个信息头进行解析，最终消息到应用层展示给用户

网络协议：在网络通信中，双方都遵循的规定


域名：网络服务器地址的名称   --->  方便记忆 ，名称表达有一定含义
socket.gethostbyaddr('localhost') -->输出[主机名  别名  IP]
socket.getservbyname('mysql')
网络端口号：端口时网络地址的一部分，用于区分一个网络主机上的网络应用，不同网络应用监听不同端口号
取值：1--65535(1-1024为root用户才能启动)
	1-255 众所周知端口
	256-1023 系统应用端口

网络字节序：数据在网络中的传输格式

标识符（identifier）是指用来标识某个实体的一个符号，在不同的应用环境下有不同的含义。
	在计算机编程语言中，标识符是用户编程时使用的名字，用于给变量、常量、函数、语句块等命名，以建立起名称与使用之间的关系

传输层服务：
	面向连接的传输服务
		基于tcp协议的数据传输
			特征：提供可靠的数据传输，可靠性指数据传输过程中无丢失，无失序，无差错，无重复
		实现手段：数据传输断开前都需要进行传输和断开的确认
			三次握手：tcp传输在数据传输前建立连接的过程  
			四次握手：tcp传输在连接断开前进行断开确认的过程
	面向无连接的传输服务
		基于udp协议的传输
			特征：不保证传输的可靠性，传输过程没有连接和断开的流程，数据收发自由

应用层--根据指令向系统层请求----调用接口访问硬件

socket套接字编程：
	根据socket模块提供的接口函数，进行组合使用完成基于tcp或者udp的网络编程

套接字分类：
	流式套接字(sock_stream):传输层基于tcp协议的套接字编程方案
	数据包套接字(sock_dgram):基于udp协议的套接字编程方案
	底层套接字(sock_ram)：访问底层协议的套接字编程

	import socket
	#创建套接字
	#参数：socket_family：选择地址族类型    socket_type套接字类型(必须相同类型的套接字才能通信)    proto:选择子协议类型，通常为0     返回值：返回套接字对象
	sockfd = socket.socket(socket_family = AF_INET, socket_type = SOCK_STREAM, proto = 0)
	#绑定服务端地址
	#功能：绑定IP地址  参数：元组 (ip, port)
	#localhost 127.0.0.1  本机网卡ip   0.0.0.0
	sockfd.bind(addr)
	#设置监听套接字
	#功能：将套接字设置为监听套接字，创建监听队列   参数：n表示监听队列大小
	sockfd.listen(n)
	#等待处理客户端连接请求
	#功能：阻塞等待处理客户端连接  返回值：connfd 客户端连接套接字  addr连接的客户端地址
	#阻塞函数：程序运行过程中遇到阻塞函数则暂停运行直到某种组设条件达成再继续运行
	connfd, addr = sockfd.accept()
	#消息收发
	#功能：接收对应客户端消息   参数：一次最多接收多少字节  返回值：接收到的内容   如果没有消息则会阻塞
	connfd.recv(buffersize)
	#发送消息给对应客户端  参数：要发送的内容，必须时bytes格式   返回值：返回实际发送消息的大小
	n=connfd.send(data)
	#关闭套接字
	sockfd.close()

	tcp客户端
	1.创建套接字   #相同类型的套接字才能通信
	2.建立连接
		sockfd.connect(servr_addr)   #功能是建立连接  参数：元组，服务端地址
	3.消息收发   #要注意和服务端配合，避免两边都出现recv阻塞
	4.关闭套接字





02： UDP编程，广播 HTTP协议	

套接字传输退出报错注意：
	1.监听套接字存在，客户端即可发起连接，但是最终连接的处理需要accept进行处理
	客户端control+C退出
	2.如果连接的另一端退出(客户端)。则recv会立即返回空字串不再阻塞(服务端)
	3.当连接的另一端(服务端)退出时，服务端再试图send发送就会产生brokenPipeError

网络收发缓存区：send和recv实际上是和缓冲区进行交互，发送缓冲区满时就无法发送，接收缓冲区满时recv才阻塞，会产生tcp粘包
	作用：协调收发处理速度，减少交互次数

tcp粘包：
	产生原因：tcp套接字以字节流方式传输，没有消息边界，发送和接收并不能保证每次发送都及时的被接收
	影响：如果每次发送内容表达一个独立的含义，此时可能需要处理粘包防止产生歧义
	处理方法：
		1.每次发送的消息添加结尾边界/标志
		2.发送数据结构体(发送说明消息，就像协议传输一样)
		3.协调收发速度，每次发送后都预留接收时间


基于udp套接字的服务端：
	1.创建数据报套接字
		sockfd = socket.socket(socket_family = AF_INET, socket_type = SOCK_DGRAM）
	2.绑定地址
		sockfd.bind(addr)
	3.消息的收发：参数：每次最多接收多大的消息，返回值：data 收发到的数据，bytes格式  addr消息发送端的地址
				一次接收一个数据报，如果数据包大小大于buffersize，则会丢失部分消息
		data,addr=connfd.recvfrom(buffersize)       #收
		sockfd.sendto(data,addr)					#发
	4.关闭套接字
		sockfd.close()

udp客户端：
	1.创建套接字
		socket(AF_INET,SOCK_DGRAM)
	2.消息收发
		recvfrom/sendto
	3.关闭套接字
		close()

udp也有缓存区和接收字节限制。但是，超过的的字节信息会被丢弃，因此不会产生粘包
	
sys.argv属性：获取命令行参数,得到一个列表
	命名本身是argv[0],后面的参数从argv[1]开始，默认以空格分隔，使用引号引起来的内容算作一个整体，命令行参数以字符串放入列表


tcp套接字编程和udp套接字编程区别:
	1.流式套接字使用字节流(SOCK_DGRAM)的方式传输，数据报套接字以数据报形式传输数据
	2.tcp会有粘包现象，udp有消息边界不会形成粘包
	3.tcp可以保证数据传输完整性，udp则不保证
	4.tcp需要进行listen  accept操作，udp不需要
	5.tcp收发消息使用新的套接字，recv send ； udp使用recvfrom，sendto

sendall(data):发送tcp消息，发送内容是bytes格式，成功返回None，失败产生异常(空间不足)，要么都发送，要么都不发送

from socket import *
s = socket()
s.family :获取套接字地址族类型
s.type: 获取套接字类型
s.getsockname()：获取套接字的绑定地址
s.fileno() ：获取套接字的文件描述符
文件描述符：每一个IO事件操作系统都会分配一个不同的正整数作为编号，该正整数即为这个io的文件描述符
socket.getpeername():获取客户端连接套接字的对应地址
socket.setsockopt(level, optname, value)  #设置套接字选项(有一项是服务断开马上释放端口)，丰富或者修改套接字属性功能  参数：level选项类别  option具体详细  value选项值

udp应用之广播
广播：一点发送，多端接收
广播地址，一个网段内有一个指定的广播地址，是该网段的最大地址。

广播风暴：互联网中存在大量广播，会占用带宽，导致正常用户无法访问

tcp应用之http传输
http协议：超文本传输协议，是一个应用层协议
	用途：网页数据的传输/数据传输方法

特点：
	1.应用层协议，传输层使用tcp服务
	2.简单，灵活，多种语言都有http相关操作接口
	3.无状态的协议，即不记录用户传输的信息
	4.http1.1 支持持久连接

一端通过http请求的格式发送具体请求内容，另一端接收http请求，按照协议格式解析，获取真实请求后按照htto协议相应格式组织回复内容，回发给请求方，完成一次数据交互	

http请求:request
	请求格式:
		请求行：具体的请求类别和请求内容
			格式：
				   GET       /       HTTP/1.1
				请求类别  请求内容   请求协议
			请求类别： 
				GET：获取网络资源
				POST：提交一定的附加信息(用户名密码...)，得到返回结果  
				HRAD：获取响应头
				PUT：更新服务器资源  
				DELETE：删除服务器资源  
				CONNECT：
				TRACE：用于测试  
				OPTIONS:获取服务器性能信息	
		请求头：对请求内容的具体描述信息(键值对形式)
		空行
		请求体：具体参数或者提交内容
	请求解析示例：
		data = c.recv(4096)
		request_lines = data.splitlines()   #将request请求按行分隔
		for line in request_lines:
			print(line.decode())

http响应：
	响应格式：
		响应行：反馈响应的情况
		格式：HTTP/1.1        200        OK
			 协议版本        响应码     附加信息
		响应码：
			1xx: 提示信息，表示请求成功
			2xx: 响应成功
			3xx：响应需要重定向
			4xx：客户端错误
			5xx：服务端错误
		响应头：对响应内容的具体描述
		空行：
		响应体：返回给请求端的具体信息
	响应示例：
		responseHeaders = "HTTP/1.1 200 OK\r\n"
		responseHeaders += "\r\n"
		responseBody = "str"   或者  f.read()
	发送：
		response = responseHeaders + responseBody
		connfd.send(response.encode())
				



03： HTTP Server实现 IO类型，IO多路复用	
	
在内存中存在数据交换的操作都可以认为是io操作
	和终端交互： input  print
	和磁盘交互： read   write
	和网络交互： recv   send

io密集型程序：在程序执行过程中存在大量io操作，而cpu运算操作较少，效率较低
计算/cpu密集型程序：在程序执行中cpu运算较多，io操作相对较少，运算速度快

io分类：网络io
	阻塞io：io的默认形态，是效率较低的一种io情形，逻辑简单
		阻塞情况：
			1.因为某种条件没有达成造成的阻塞(accept/recv/input)
			2.处理io数据传输时间较长形成的阻塞(网络io/文件读写过程)	
	非阻塞io:通过修改io事件的属性，使其变为非阻塞状态(让一些条件阻塞函数不再阻塞)
		非阻塞io往往和循环判断一起使用
			s.setblocking(False)  #将套接字设置为非阻塞状态
			s.settimeout(5)       #将套接字设置为超时时间
		超时检测：
			将原本阻塞的函数设置一个最长阻塞时间，如果时间内跳线达成则正常运行，如果仍然阻塞则视为超时，继续向下运行或产生异常
	io多路复用：当程序中有多个io事件时提高程序的运行效率
		同时监控多个io事件，当哪个io事件准备就绪就执行哪个io事件，以此形成可用同时操作多个io的并发行为，避免一个io阻塞，造成所有io都无法执行
		io准备就绪：一种io必然要发生的临界状态
	io多路复用编程实现
		1.将io设置为关注io
		2.将关注io提交给内核监测
		3，处理内核给我们反馈的准备就绪的io
		(具体方案：select/poll/epoll)
	帮助步骤：1.import select   2.dir(select)/help(select)     3.help(select.select)
	说明：
		import select
		rs,ws,xs = select(rlist, wlist, xlist[, timeout])
		功能：监控io事件，阻塞等待io事件发生
		参数：
			rlist   (读)列表(存放监控等待处理的io事件，被动接受的io)
			wlist   (写)列表(存放主动操作的io事件，一有马上返回io)
			xlist    列表(关注出错处理的io事件)
			timeout  超时时间
		返回值：列表，返回对应准备就绪的io

	示例：
		# io多路复用
		from select import select
		from socket import *
		#创建套接字作为关注io
		s = socket()
		s.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)
		s.bind(('0.0.0.0',8888))
		s.listen(5)
		rlist = [s]
		wlist = []
		xlist = [s]                               #出错列表
		while  True:
			#提交监测关注的io等待io发生
			print('waiting1')
			rs,ws,xs = select(rlist, wlist, xlist)#返回io对象列表，通信的时候需要返回两次,rlist和wlist
			for r in rs:                          #遍历，知道那个io准备就绪了
				if r is s:                        #通过判断，是初始关注io则做不同的io事件
					c,addr = r.accept()
					print('connect from',addr)
					rlist.append(c)               #将连接io添加到列表，这样连接io也是关注io，就能持续通信，这里多个连接，rlist列表会有多个c，但是计算机能识别不同c的意义
				else:                             #上面会有多个if判断，最后这里，相当于除了初始关注的io，其它的都是已连接的，能直接通信
					data = r.recv(1024)
					if not data:                  #这里本来是判断无数据发送，则该io执行下列语句，但好像试不出来
						rlist.remove(r)           #如果结束通信，则将连接io从关注列表移除
						r.close()                 #关闭套接字
					else:                         #如果断开(if匹配)则不再发送数据
						print(data.decode())
						wlist.append(r)			  #将客户端套接字放入wlist列表						
			for w in ws:                          #wlist是主动io，一旦有io则立刻返回
				r.send(b'Receive your message\n')
				wlist.remove(w)
			for x in xs:                          #出错列表
				if x is s:
					s.close()

	注意：
		1.wlist中如果有io事件则select立即返回ws列表
		2.在处理io过程中不要出现处理一个客户端长期占有服务端，使服务端无法运行到select的情况
		3.io多路复用占用计算机资源少，io效率高

标志位 可以理解为:定义一个变量,用于判断整个程序是否处于活动状态。这个变量被称为 标志 充当了程序的交通信号灯
	位运算：当字节串每一位(0和1分别代表有和没有)代表不同功能时，监测或添加
		整数按照二进制位进行运算
			& 按位与   --->  11&14  == 1011&1110 = 1010 =10
			| 按位或   --->  11&14  == 1011&1110 = 1111 =15
			^ 按位异或(相同为0，不同为1)    0101 = 5
			<< 左移(在右边补0)   11 << 2  1011--> 101100 =  11*2*2 = 44
			>> 右移(丢掉右边两位)              14 >> 2  = 3
		
poll：
	1.创建poll对象  p = select.poll()
	2.添加注册时间  p.register(s)  #这代表关注所有事件  p.register(s,POLLIN | POLLERR)  #位运算添加   p.unregister(s)  #从关注事件中移除
		POLLERR(xlist) POLLIN(rlist) POLLOUT(wlist)  POLLHUP(断开) POLLNVAL(无效数据) POLLPRI POLLRDBAND POLLRDNORM POLLWRBAND POLLWRNORM POLLMSG 
	3.阻塞等待io发生 events = p.poll()    
		返回值：events是一个列表，列表中给每一个元素都是一个元组，代表一个发生的io事件
			[(fileno,event),(),()...]  fileno:就绪io的文件描述符    event:具体就绪事件
			#需要通过文件描述符(fileno)找到对应的io对象， io地图：字典   {s.fileno():s}
	4.处理具体的io			

	示例：
		#poll
		from socket import *
		from select import *
		#创建套接字作为关注io
		s = socket()
		s.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)
		s.bind(('0.0.0.0',8888))
		s.listen(5)
		#创建poll对象
		p = poll()
		#fileno  --->io对象的字典,这个放在这里，说明监听套接字的时候就已经有文件描述符了，而不是连接时才有。
		fdmap = {s.fileno():s}
		#注册关注的io
		p.register(s,POLLIN | POLLERR)
		while  True:
			#进行io监控
			events = p.poll()
			for fd,event in events:
				if fd == s.fileno():
					c,addr = fdmap[fd].accept()     #连接上就能通讯了
					print("connect from",addr)
					#添加新的关注事件
					p.register(c,POLLIN)
					fdmap[c.fileno()] = c
				elif event & POLLIN:
					data = fdmap[fd].recv(1024)
					if not data:
						p.unregister(fd)
						fdmap[fd].close()
						del fdmap[fd]
					else:
						print(data.decode())
						fdmap[fd].send(b'Receive\n')
	



04： 进程理论 fork多进程编程

	epoll和poll使用方法不同：
		1.p = epoll()                                #将生成对象改成epoll()  
		2.p.register(s,EPOLLIN | EPOLLERR)           #将所有poll对象事件改成epoll对象
	区别：
		1.epoll的效率要比poll和select高
		2.epoll的事件触发方式更多(epoll边缘触发比(select和poll)水平触发效率高)
	
	linux文件：b(块设备文件)  c(字符设备文件)  d(目录)   -(普通文件)   l(链接)   s(套接字)    p(管道)
	本地套接字：
		在本地不同程序之间的通信
	创建流程：
		1.创建本地套接字
			sockfd = socket(AF_UNIX,SOCK_STREAM)
		2.绑定本地套接字文件(该文件代表/映射一块内存，两端套接字绑定该套接字文件实现收发信息，个人觉得网络套接字也是一个临时文件映射着一块内存/缓冲区)
			选定文件地址和名称 sockfd.bind(path)
		3.监听 listen()
		4.消息收发， recv   send

	os.path.exists(path)
		功能：判断一个文件是否存在   参数：目标文件     返回值：存在返回True，否则返回False
	os.remove()  os.unlink()
		功能：删除一个文件     参数：目标文件


多任务编程：
	通过应用程序利用计算机的多个核心达到同时执行多个任务的目的，一次提高计算机运行效率
	充分利用计算机的资源提高程序的运行效率
	实施方案：多进程   多线程
	并行：多个计算机核心同时处理多个任务
	并发：同时处理多个任务，内核在多个任务间不断的切换，宏观上就像同时运行的效果，微观上，同一个时间点内核只能处理其中一个任务
	
程序(program)：一个可执行文件，静态的占有磁盘空间，不占有计算机的运行资源
进程(process)：程序在计算机中一次运行过程，动态过程的描述，占有计算机的资源，有一定的生命周期，是计算机资源分配的最小单位
同一个程序的不同运行过程是不同的进程，占有资源和生命周期都不一样
进程的创建过程：
	1.用户空间通过运行程序或者调用接口发起创建进程
	2.操作系统接受用户请求，开始创建进程
	3.操作系统分配计算机资源，确定进程状态，开辟进程空间等工作
	4.操作系统将创建好的进程提供给应用程序使用

cpu时间片：
	如果一个进程占有计算机核心，称为进程占有计算机cpu时间片
		1.多个任务之间是争夺cpu的关系   2.谁占有cpu最终是操作系统决定
PCB(进程控制块)：
	在内存中开辟的一块空间，用来记录进程的信息
		进程控制块是操作系统查找识别进程的标志
PID(process ID):
	在操作系统中每个进程都有一个唯一的id号用来区分于其他进程，id号由操作系统自动分配，是一个大于0的整数
父子进程：在系统中除了初始化进程，每一个进程都有一个父进程，可能有0个或者多个子进程，由此形成父子进程(ps -ajx)

进程的状态：
	三态： 等待/阻塞 --(io完成)--  就绪  --(调度)--  运行  --(io请求)-- 等待/阻塞
		就绪态：进程具备执行条件，等待系统分配资源
		运行态：进程占有cpu处于运行状态
		等待态：进程暂时不具备执行条件，阻塞等待满足条件后再执行
	五态：新建--(创建成功)-- (io等待) --等待/阻塞 -- (io完成) -- 就绪  --(调度)--  运行  --(释放资源)-- 终止
		新建态：创建一个新的进程，获取资源的过程
		终止态：进程执行结束，资源释放回收的过程

ps -aux 的STAT
	S等待态(可中断)  D等待态(不可中断)  T等待态(暂停状态/后台挂起)  R运行态(包含就绪态)  Z僵尸进程
	<高优先级进程  N优先级较低  l有子进程  s会话组组长(一组会话组)  +前台进程(当前终端运行，可直接运行的进程)
ps -ajx/ef  查看父进程	
	进程优先级NI：决定一个进程的执行权限和占有资源的优先程度
		指定优先级运行程序命令：nice  -n  进程   (n取值：-20~19)

	进程特征：
		1.进程之间运行互不影响，各自独立运行
		2.进程是操作系统组员分配的最小单位
		3.每个进程空间独立，各自占有一定的虚拟内存(保证地址空间足够大)

多任务编程：
	import os
	pid = os.fork()        
	#创建新的进程，新进程复制原有进程的全部语句，但只会执行fork之后的语句，原有进程fork返回新进程的pid，新进程pid返回0
	功能:创建新的进程   参数：无     返回值：失败返回一个负数。  成功：在原有进程中返回新的进程PID号，在新的进程中返回0
	1.子进程会复制父进程全部代码段(整个内存空间)，包括fork之前产生的内存空间
	2.子进程从fork的下一句开始执行，与父进程互不干扰
	3.父子进程的执行顺序是不一定的，父子进程共有一个终端显示
	4.父子进程通常会根据fork返回值的差异选择执行不同的代码，所有if结构几乎是fork的固定搭配
	5.父子进程空间独立，操作的都是本空间的内容，互不影响
	6.子进程也有自己的特性，比如PID号，PCB，命令集等
	示例：
		import os
		import time
		print('********')  #1.原进程会输出，新进程不会
		a = 1              #2.执行并存在于内存空间
		#创建新的进程，新进程复制原有进程的全部代码段和空间，但只会执行fork之后的语句，原有进程fork返回新进程的pid，新进程pid返回0
		pid = os.fork()
		print('b')
		if pid < 0:
			print('failed')
		elif pid==0:
			print('new')
			print('a=',a)   #2.会打印，因为复制内存空间的时候，内存空间就有了
			a = 1000        #会改变a的值，但是改变的是新进程的内存空间
		else:
			sleep(1)         
			print('old')
			print('paren',a)#打印出来的还是原有进程空间的a=1
		print('ok')
	执行结果：
	********   #父进程
	b          #父进程
	b          #子进程
	new        #子进程
	a= 1       #子进程
	ok         #子进程
	old        #父进程(因为sleep一秒)
	paren 1    #父进程
	ok         #父进程

进程相关的函数：
	os.getpid()       #功能：获取当前进程的进程号       返回值：返回进程号
    os.getppid()      #功能：获取当前进程的父进程号     返回值：返回父进程号

os._exit(status)      #功能：进程退出    参数：进程的退出状态
sys.exit([status])    #功能：进程退出    参数：数字表示退出状态，不写默认为0(默认0为正常退出，非0为异常退出)
											   字符串：表示退出时打印的内容
sys.exit 可以通过捕获SystemExit异常阻止退出

孤儿进程：父进程先于子进程退出，此时子进程就称为孤儿进程
	孤儿进程会被操作系统指定的进程收养，系统进程就称为孤儿进程的新父进程(操作系统不重启，该系统进程就是固定的)
僵尸进程：子进程先于父进程退出，但是父进程没有处理子进程的退出状态，此时子进程就会称为僵尸进程
	僵尸进程会存留少量PCB信息在内存中，大量的僵尸进程会消耗系统资源及pid 




#!/usr/bin/env python3
#coding=utf-8
'''
name: lin
email:999@qq.com
data: 2019-9
class:AID
introduce:Chatroom server
env:python3.5
'''





















