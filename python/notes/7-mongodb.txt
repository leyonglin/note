

01： MongoDB基本概念 常用数据类型

数据存储阶段
文件管理阶段：
	优点：使用简单，展现直观，长期保存，存储数据量比较大    
	缺点：查找不方便，容易找出数据冗余，数据格式不规范
数据库管理阶段：
	优点：将数据结构化存储，降低冗余，提高了增删改查效率，方便扩展和程序调用
	缺点：数据库往往需要指令或语句操作，相对复杂

数据：能够输入到计算机中并被识别处理的信息的集合
数据结构：组成一个数据集合的数据之间的关系
数据库：按照一定的数据结构，存储数据的仓库(外存储器)
	    在数据库管理系统管理和控制下，在一定介质上的数据集合
数据库管理系统：数据库管理软件，用于建立维护操作数据库
数据库系统：由数据库和数据库管理系统高等开发工具组成的集合
关系型数据库：采用关系模型(二维表)来组织数据结构的数据库
	Oracle(甲骨文)  db2(IBM)  sqlserver(window)  mysql(开源)  sqlite3(内置模块)
	优点：逻辑容易理解，使用方便(都是用sql语句且sql语句成熟),数据一致性高，冗余低，数据完整性好，便于操作，功能强大，支持很多复杂操作
	缺点：每次操作都要进行sql语句解析,消耗大，操作往往需要加锁，数据一致性高(字段固定，所以存储不灵活)，海量数据时，读写显得不足
	

非关系型数据库(nosql,not only sql)
	优点：高并发，读写能力强，弱化数据结构一致性，使用灵活，有良好的可拓展性
	缺点：通用性差，操作灵活导致容易出错和混乱，没有外键关联等复杂操作，版本更新快
适用场景：
	1.对数据存储灵活性要求高，一致性要求低
	2.数据处理海量并发，要求瞬间效率速度比较高
	3.数据比较容易建立
	4.网站临时缓冲存储，爬虫应用
nosql:
	1.键值型数据库：redis
	2.文档型数据库：mongodb
	3.列存储数据库：hbace
	4.图形数据库
mongodb数据库标签：非关系型数据库，文档型数据库，最像关系型的非关系型数据库
	特点：
	1.是由c++编写的数据库管理系统
	2.支持丰富的数据操作，增删改查索引聚合
	3.支持丰富的数据类型
	4.使用方便，可以很好的拓展，相对比较成熟
	5.支持众多的编程语言接口(python php  c++ c#)
	
mongodb的安装
	yum安装
	源码安装
	默认端口：27017
mongo：进入数据库交互操作界面
mongo shell:用来操作mongodb数据库的界面，在这里可以使用mongo语句操作数据库内容

	mysql           mongodb   			含义
	database		database			数据库
	table			collection			表/集合
	column			field				字段/域
	row				document			记录/文档
	index 			index				索引


操作：
	use databaseName     #存在则进入该数据库，不存在则创建，且不会马上创建，而是插入数据后才会创建(创建一个对象)
	show dbs             #查看系统中的数据库
		admin:存储用户信息
		local:存储本地数据
		config:存储分片信息
	
	db     #mongodb的全局量，代表当前正在使用的数据库
		   如果不选择使用任何数据库db，默认是test，直接插入数据就会建立test数据库
	db.dropDatabase()   #删除db所代表的数据库
	1.db.createCollection(collection_name)   #创建集合
	2.当向一个集合中插入数据的时候如果集合不存在时则自动创建---db.class.insert({'name':'lin','age':'25','sex':'man'})
	show collections   // show table   #查看集合
	db.coll_name.drop()     #删除集合
	db.coll_name.renameCollection("新名")   #重命名集合
	db.coll_name.insert({})  #插入文档数据，键值对数据格式，插入时id域不存在则创建，存在则报错(db.class0 == db.getCollection('class0')
		db.class.insert({'name':'lin','age':'25','sex':'man'})  == inserOne
		db.class.insert([{'3':'3'},{'2':'2'}])   #插入多条文档  == inserMany
	db.coll_name.find()     #查找文档
	db.coll_name.save()     #插入时id域不存在则创建，存在则修改
数据库命名规则：
	1.使用utf-8(默认)
	2.不能含有空格 . / \ '\0' 字符
	3.长度不超过64字节
	4.不能和系统数据库重名
	
集合命名规则：
	1.合法的UTF-8字符
	2.不能有'\0'
	3.不能以system.开头，这是系统保留集合前缀
	4.不能和关键字重合
	
文档：mongodb中数据的组织形式
	是以键值对的形成组成的一组数据，类似python中字典描述数据的方式
	1.文档中键值对是有序的
	2.文档中键值对严格区分大小写	
键：即文档的域，表达了一个键值对的含义
键的命名规则：
	1.utf-8格式的字符串
	2.不能使用'\0'
	3.一个文档中的键不能重复
值：即文档存储的数据

数据库的备份和恢复
	备份：mongodump -h host -d dbname -o path
	恢复：mongorestore -h dbhost:port -d dbname path    #目标库不存在则会自动创建
数据监控运行数据：mongostat
	insert  query update delete getmore command flushes(每秒和磁盘交互次数) mapped  vsize(虚拟内存)    res(物理内存) faults  locked db idx miss %     qr|qw   ar|aw  netIn netOut  conn       time(时间)	
监控数据库读写时长：mongotop
	 ns(数据表)       total(总时间)        read(读时间)       write(写时间)	


类型：整型，布尔类型，浮点型，Array，Data，Timestamp，string，symbol(特殊字符)，Binary data(二进制子串)
	Null  object(内部文档/对象)  code(js代码)  regex(正则子串)   
	ObjectId(自动生成ID标记)：_id：当mongodb插入文档时如果不指定_id域则自动生成_id域，值如果不自己指定即会自动生成一个objectId值
		24位16进制数：8位文档创建时间，6位机器id  4位进程id   6位计数器
	指定id插入：db.class1.insert({_id:1,'name':'lin','age':'25','sex':'man'})
	
集合中的文档：
	1.集合中的文档不一定有相同的域(个数/域/数据类型都可能不同)
	2.集合中文档各自比较独立，相互不影响，不支持外键关联
集合创建原则：
	1.集合中的文档要描述同一类事物
	2.数据库中同一类数据尽量集中存放在相同的集合
	3.集合中的文档嵌套层数不要太多
	插入操作中键可以不加引号，值需要加入引号
	_id可以指定，但是不能重复






02： MongoDB Shell 文档 

帮助文档：https://docs.mongodb.com/

非关系型数据库和关系型数据库的区别
	1.不是以关系模型构建的，结构比较自由
	2.nosql不保障数据的一致性，但是读写能力强，抗高并发，海量数据处理
	3.nosql技术还在发展，功能没关系型数据库成熟强大

db.coll_name.find(query,field)   #功能：查找文档    参数：query  查找条件、相当于where字句    field查找的域(字段)(0表示不显示该域，1表示只显示该域)   返回值：查找到的所有文档
	db.class1.find({b:'2'})[1]   #通过find查找道德记录可以用索引下标
	db.class1.find({age:'25'},{age:1,name:1})   #匹配age=25且只显示age和name域(字段)
	db.class1.find({age:'25'},{_id:0,name:1})   #_id特殊，不指定为0都会显示，其它域不能混写
db.coll_name.findOne(query,field)               #越慢插入越靠后。功能：查找第一条符合条件的文档   参数：同find    返回值：返回查找到的文档
db.coll_name.distinct(field)                    #功能：查找某个域的值范围
db.coll_name.pretty()                           #格式化查询结果
db.coll_name.limit()                            #功能:查询前几条结果
db.coll_name.skip()                             #跳过前n条记录
db.coll_name.count()                            #统计
db.coll_name.sort({field,1/-1})                 #排序
复合排序
db.coll_name.remove(query,justone)              #功能：删除功能   参数：query同find   justone布尔值，false表示删除所有符合条件的文档
db.coll_name.update(query,update,upsert,multi)  #功能：修改文档   参数：query筛选条件  同find    update要修改成什么内容，通常配合修改操作符(修改器)使用   upsert 布尔值 默认时false，如果query没有筛选到文档则不做任何操作，true则不存在则插入  multi布尔值，默认false表示只修改一条
比较操作符
$eq  等于  $lt 小于  $lte 小于等于  $gt 大于  $gte 大于等于  $ne不等于(使用ne也会查找到该域不存在的文档)
$in  在[]里面   $nin不包含
	db.class1.find({'a':{$eq:'5'}},{_id:0})        #注意只要用引号
	db.class1.find({'a':{$gt:'5',$lt:'8'}},{_id:0})
	所有的{}[]中都可以写多个条件
	db.class1.find({'a':{$in:['3','4','5']}},{_id:0})
$size  通过数组元素个数查找
$slice 显示数组中指定项
	db.class.find({},{_id:0,score:{$slice:[1,2]}})

逻辑比较符：
$and  在query如果写多个条件默认为$and
	 db.class1.find({'a':{$in:['3','5']},a:'5'},{_id:0})
	 等同于  db.class1.find({$and:[{a:{$in:['3','5']}},{a:'5'}]},{_id:0})
$or   逻辑或db.class1.find({$or:[{a:{$lt:5}},{'a':{$gt:'3'}}]},{_id:0})
$not  逻辑非

逻辑条件混合

Array：[1,2,3]   #但不是列表。1.数组是有序的数据集合   2.mongo中数组也可以有多重数据元素混合

$mod 余数查找
$type  指定类型的数据文档

练习：2-03:25:46





03： 索引 聚合

修改操作符(修改器)
	$set #修改一个域的值(不存在则添加一个域)
		db.class.update({'name':'lin'},{$set:{sex:'m'}})
	$unset  #删除一个域
		db.class.update({'name':'lin'},{$unset:{sex:' '}})
	$rename #修改域的名称
	$setOnInsert  #如果使用update插入文档，则将改修改器内容作为插入文档的一部分
	$inc  #加法修改器
		db.class.update({},{#inc:{age:'1'}},false,true)       #参数可以是正数负数，整数，小数
	$mul  #乘法修改器
	$min  #筛选文档的指定域小于min则不修改，大于min值则修改min值
	$max  #如果筛选文档的指定域大于max值则不修改，小于则修改位max值
	$push #向数组中添加一项
	$pushALL  #向数组中添加多项
	$pull     #从数组中删除一项
	$each    #对多个值进行操作
		db.class.update({'name':'lin'},{$push:{score:{$each:['9','8']}}})		
	$position  #指定插入位置
		db.class.update({'name':'lin'},{$push:{score:{$each:['9','8'],$position:1}}})
	$pop  #弹出数组最后一项，-1为第一项
	$sort
	$addToSet:向数组中添加一项不重复的
	
new Date()  #自动生成当前时间	
Date	#自动生成当前时间（字符串类型）	
date.ISODate#插入指定时间，默认自动生成当前时间		
valueOf	#获取当前时间戳
	
NULL类型
值 null	   #存在却没值可赋值null,可以查找某个域不存在情况
Object     #内部文档, 文档内部某个域的值还是一个文档数据则这个文档就是内部文档类型数据
			通常使用外部文档域名，引用内部文档域名的方式使用内部文档
			通过数组下标直接操作某一项
	2-01：18：00
	
索引：
	指建立指定键值及所在文档存储位置的对照清单，使用索引可以方便我们进行快速查找，减少遍历次数提高查找效率
	ensureIndex()    #功能：创建索引    参数：索引域和索引选项
	db.coll_name.getIndexes()   #查看索引
	db.coll_name.dropIndex()    #删除索引   _id除外
	索引类型：
		复合索引，根据多个域创建多个索引
		数组索引：子文档索引，如果对某个域的值为数组或者子文档的域创建索引，呢么通过数组或者子文档中某一项进行查找也是索引查找
		唯一索引：创建索引的域的值不能重复
		稀疏索引(间隙索引)：只针对有指定索引域的文档创建索引，没有该域则不插入所以表
	索引约束：占用空间，更新慢
	数据量小时不适合建立索引，当数据库进行频繁修改操作而不是查找操作也不适合创建索引
聚合操作：对文档的筛选结果进行整理统计
	db.coll_name.aggregate()     #功能：完成集合操作   参数：聚合条件，聚合操作符
		$group  分组聚合
			$sum  $max   $min 
			$project：修改文档的显示效果  用法同 find(field)
			$match:数据筛选 
			$limit   $skip  $sort
	聚合管道：将上一个聚合操作结果给下一个聚合继续操作
	
	
	
04： Python操作MongoDB 增删改查

固定集合：
	创建大小固定的集合，称之为固定集合
	特点:1.能够淘汰早期数据    2.插入和顺序查找速度更快    3.可以控制集合的空间大小
	使用：临时缓存/日志处理
	db.createCollection(coll_name,{capped:true,size:10000,max:1000})   #capped:true创建固定集合  
文件存储:
	1.存储文件路径   
		优点:节省数据库空间，操作简单     缺点：数据库或文件位置发生变化时需要修改数据库内容 
	2.存储文件本身   将文件以二进制形式存储到数据库中

GridFS存储大文件
	大文件，mongodb > 16M 文件为大文件
	方法：以两个集合配合的方法存储文件
		fs.files:存储文件相关信息
		fs.chunks：分块存储文件内容
	命令：mongofiles -d dbname put file   ---存储文件
		  mongofiles -d dbname get file   ---提取文件

游标：cursor
	通过获取操作数据库的返回结果，得到返回结果对象。通过游标可以进一步获取操作结果数据(类似for遍历和迭代器，游标效率更高，防止大量操作阻塞)
	将返回结果赋给一个js变量，作为查找结果游标
		var cursor = db.class.find()
	查看是否有下一个结果
		cursor.hasNext()
	获取下一个结果
		cursor.next()

操作步骤：
	1.创建mongodb的数据库连接对象
		conn = pymongo.MongoClient('localhost',27017)
	2.生成数据库对象
		db = conn.stu  或 db = conn['stu']
	3.生成集合对象
		myset = db.class  或 myset = db['class']
	4.集合操作(增删改查索引聚合)
		print(dir(myset))  #查看提供的方法		
	5.关闭集合对象
		conn.close()
	示例：
		from pymongo import MongoClient
		#创建数据库连接
		conn = MongoClient('localhost',27017)
		#创建数据库对象
		db = conn.stu
		#创建集合对象
		myset = db.class1
		#数据库操作
		# print(dir(myset))  #查看提供的方法
		
		
		#插入数据
		# myset.insert({'name':'林','king':'皇帝'})
		# myset.insert_many([{'name':'wang','juese':'baobao'},{'name':'wang','juese':'laopo'}])   #插入多条记录(列表)
		
		#查找操作find(),返回一个结果游标对象
		# dic = myset.find_one({},{'_id':0})       #返回一个字典{'name': '林', 'king': '皇帝'}
		# print(dic)
		# cursor = myset.find({},{'_id':0})        #返回对象，类似迭代器一样<pymongo.cursor.Cursor object at 0x7f0b3ebc7ba8>
		# print(cursor)      
		# for i in cursor:
		# 	print(i)
		# 	print(i['name'],i['king'])
		
		#操作符使用
		# myset1 = db.class1
		# cursor = db.class1.find({'a':{$gt:'5',$lt:'8'}},{_id:0})
		
		#总结：在pymongo中所有操作符的用法同mongo shell相同,只是操作时加引号
		#cursor对象属性。next()  limit()  skip()  count()  sort()
		#for 或者 next 使游标位置不再指向原来的位置，调用limit skip  sort等会报错
		
		
		#关闭连接
		conn.close()


	#存储小文件，直接转换为二进制格式插入到数据库
	import bson
	bson.binary.Binary()  #功能：将bytes格式子串转换成mongodb的二进制存储格式





















