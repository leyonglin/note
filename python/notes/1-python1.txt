 
01： Python简介 Python程序 Python核心数据类型及内置对象 表达式 运算符

文档：
python 库函数
https://github.com/jackfrued/Python-100-Days
https://docs.python.org/zh-cn/3/library/index.html

.py      python文件
.c        c语言
.cpp    c++
.java    java
.exe    window可执行文件
.dll     动态库文件

数字：把其他进制转换成十进制用乘法，十进制转换成其他进制是求余
整型：
      二进制：0b
      八进制：0o
      十六进制：0x  (0~9 a~f)
浮点数：
      小数形式：3.     .14
      科学计数法 ：小数指数(e/E) 6.18E-1 = 0.618    2.99e3 = 2990
复数：complex
      实部(real)   
      虚部(image)   以j/J结尾 
布尔型数 bool
      True     1
      False    0
空值None：表示不存在的特殊对象
	作用：用来占位    变量解除绑定

表达式：数字+运算符    括号()可以提高优先级  
算术运算符：
   +    加
   -    减
   *    乘
   /    除
   //   地板除/向下取整
   %    求余
   **   幂运算
混合类型自动升级：1.5+1.5=3.0


变量是关联一个对象的标识符：字母与下划线开头,后跟字母/下划线/数字,不能使用python关键字作为变量
变量可以绑定一个对象，并可以通过变量名来使用这个对象
赋值语句：创建并绑定变量
    变量名1(=变量名2...)=表达式
    变量名1,变量名2,...=序列
python中自动化内存管理和引用计数
   python中，变量没有类型
   关联/绑定/引用都是指一个变量和一个对象的关联关系
查看变量：help("__main__")或dir([object])   
删除变量：del 变量                     #解除绑定关系
is/is not 运算符   #判断两个对象是否为一个对象id(内存地址)，并返回True/False(a=b才算绑定一个对象   -5到256区间的数字永远存在于小整数池中，是例外)
id(x)    #函数，返回对象的内存地址


02： Python变量 基本输入输出 关系运算 布尔运算 条件语句
 
复合赋值算术运算符：+=  -=  *= ...
 变量  运算符=值 -->  y += x 

比较运算符：  <   <=   >   >=   ==   != 
         语法：左表达式 > 右表达式   (特殊 a <= x <= b > c...)    比较运算符通常返回布尔类型的值  

数值对象的构造(创建)函数：转换
a = 3.14 ； b=3 ,  y = int(a,base=10)/float(b)/complex(a,b)/bool(a)    #逗号用来分隔数据或变量

bool函数：bool假值情况
None   False    0    0.0   0j     ' '    [ ]     ( )    { }    set( )            #一切空容器

浮点数在计算机内部会转换成二进制，因此3.14-3 != 0.14        #精度损失

abs(x)  #绝对值函数
round()    #函数，先进行二进制转换再进行四舍五入
pow(x,y,z=None)   #函数幂运算，即x**y%z 

帮助函数：help()  /  help(object)    //  或者从官网查找文档搜索查找
基本输入函数  input('提示字符串')   返回用户输入的字符串
基本输出函数  print(value,...,sep=' ',end='\n')     #将一系列值以字符串形式输出到标准输出设备上，sep：两个值之间的分隔符，默认是一个空格。end：输出完毕后在末尾自动追加一个字符
1.a=5 ； b=6  ； print(a, '+', b, '+', a+b, ...)      #可输出数字/字符串/变量
2.hour = input("num:")
   print(hour * 60)       #字符串是可以相乘的
   hour = int(hour)
   print(hour * 60)

语句 statement
语句是由一些表达式组成，通常一条语句可以独立执行来完成一部分事情并形成结果，多条语句写在一行需要用分号(;) 分开  建议一条语句写一行

显示换行：
   折行符 \    #必须放在一行末尾，来示意解释执行器的下一行也是本行内容
   隐式换行：括/引号 必须成对出现

if 语句：让程序根据条件选择性的执行某条语句或某些语句
语法： 
  if  真值表达式1：      #必须有，其他视情况而定，真值表达式值为bool值
       语句块1              #建议缩进四个空格，表示该语句是被包含的
  elif  真值表达式2：
       语句块2
  ...
  else:
         语句块n

条件表达式：根据真值表达式的取值(Ture/False)来决定执行表达式1或者表达式2并返回结果
   语法： 表达式1  if  真值表达式2  else 表达式2

pass语句：通常用来填充语法空白

布尔运算符： not  and  or
   not  表达式x     #对x进行布尔值取非
   x  and  y         #优先返回假值对象，当x的布尔值为False时，返回x，否则返回y   例如 100 and 200 ， 100(True)返回200
   x  or    y          #优先返回真值对象 ，当x的布尔值为True时，返回x，否则返回y  例如 0 or 0.0   返回0.0

正负号运算符：一元运算符
+(正号)   -(负号)



03： 字符串 字符串访问 Raw字符串 字符串格式化

字符串 str ：用来记录文字信息(存放字符串类型的容器)----->拼接，格式化，运算
    表示方法：在非注释中凡是用引号括起来的部分都是字符串   单引号'/双引号"/三单引号'''/三双引号"""
         空字符串的字面值的表达方式  ''   ""  ''''''   """"""    # bool测值为False
    引号成对出现，三引号可以自动折行
		 1.s = 'aaa\nbbb'
		 print(s)
		 2.s1 = '''aaa
		 bbb'''
		 print(s1)
	用转义序列\显示特殊字符
       \'          代表一个单引号
       \"          代表一个双引号
       \n          代表一个换行符
       \\          代表一个反斜杠
       \r          返回光标至行首   print("ABCD\rab")
       \t          水平制表符
       \f          换页
       \v	       垂直制表符
       \b          倒退
       \0          字符串0
       \0oo        oo为两位八进制表示的字符
       \xXX        XX为两位十六进制表示的字符  
       \uXXXX      Unicode 16的十六进制的字符(汉字解码)
       \UXXXXXXXX  Unicode 32的十六进制表示的字符(汉字)
		
		ascii编码(0~127)  
		UNICODE编码(0~65535) ---> 0~127为英文字母

字符在计算机内部是图片形式存在的，在计算下通讯过程传输的是图片的编码(进制数字)	
常用ascii编码：美国标准码/信息交换	
字符      十进制    十六进制
'0'        48        0x30
'A'        65        0x41
'a'        97        0x61

print("\x31\x30")      -->  10  
print("\x77\x65\x69")  --> wei
chr(i)  返回i这个值所对应的字符(i为十进制数)
0-127 表示英文

序列的概念：有序排列(都支持索引和切片)   
	 字符串是序列     len() 求长度
	 raw 字符串(原始字符串)   让转义字符\无效
	 格式： r'字符串'(引号可以是别的引号)
	 
字符串的运算：
	运算符： +  +=  *  *=
	+ 加号运算符用于拼接字符串
	+= 用于拼接运算后改变原变量的绑定关系
    *  *=  数字必须是整数
	
字符串比较运算
	运算符： <  <=  >  >=  ==  !=  （ascii码的比较）
 
in  /  not in 运算符（和is不同）
	in用于序列，字典，集合中，用于判断某个值是否存在于容器中，存在返回True，否则返回False
    格式：  对象  in/not in  序列

索引 index：得到一个元素
	python字符串是不可以改变的序列
	所有的序列都可以通过索引来获取其中的数据元素
    语法：字符串[整数表达式]
	正向索引从0开始，最后一个索引为len(x)-1     反向索引从-1开始，即最后一个，第一个是-len(s)
	
切片  slice：(得到多个元素)从字符串序列中取出相应的元素重新自称一个字符串序列
	语法：s[(开始索引b):(结束索引e)(:(步长s))]
    1.0代表第一个元素，-1代表最后一个元素  2.结束索引是切片的终止索引(但不包括终止点) 3.步长是切片每次获取完当前元素后移动的方向和偏移量

python3中能用于字符串的函数
	len(x)  返回字符串长度
	max(x)  返回编码值最大的字符
	min(x)  返回最小编码值的字符

字符串编码转换函数：
	ord(c)  返回一个字符c的unicode编码值
	chr(i)  返回i这个值所对应的字符(i为十进制数)
	
整数转字符串的函数
	bin(i)       将整数转换成二进制字符串
	oct(i)       将整数转换成八进制字符串，将二进制三位一组转换过来的
	hex(i)       将整数转换成十六进制字符串，将二进制四位一组转换过来的

字符串的构造(创建)函数	
	str(object)      将对象转换成字符串
	查看方法：help(str)

python3中常用的字符串方法(method)
    方法的调用语法：对象.方法名(方法传参)
	s.isalpha()                                 是否都为字母
	s.isdigit()                                 数字
	s.islower()                                 小写
	s.isupper()                                 大写
	s.isspace()                                 空白字符(\n,\t ...)
	s.center(width[,fill])                      居中，左右默认填充空格
	s.count(sub)                                获取一个字符串中子串的个数(sub为子串字符)
	s.count(sub[,start[,end]])                  获取一个字符串中子串的个数
	s.find(sub[,start[,end]])                   获取字符串中子串sub的索引，失败返回-1，成功返回字符位置
	s.strip([chars])                            去掉左右char字符的字符串
	s.lstrip([chars])
	s.rstrip([chars])
	s.upper()                                   大写
	s.lower()									小写
	s.replace(old,new[,count])                  替换count次数
	s.startswith(prefix[,start[,end]])			以prefix开头
	s.endswith(suffix[,start[,end]])            以suffix结尾
	s.isnumeric()                               是否权威数字字符



04： while循环语句 break continue for in 循环

字符串格式化表达式：生成一定格式的字符串
    运算符(占位符)：%
    语法格式： 格式字符串 % 参数值   或  格式字符串 % (参数值1, 参数值2, ...)--->%右边多个参数，默认是元组类型
		1.fmt = "name: %s, age: %d"
          s= fmt % ('lly', 35)
          print(s)
		2. "%d%%" % 95   --->  95%
	格式化字符串中的占位符和类型码
	%s       字符串，使用str(x)将x转换为字符串
	%r       字符串，使用repr(x)将x转换成字符串('表达式')
	%c       整数转为单个字符(数字转字符)
	%d       转为十进制整数
	%o       转为八进制整数
	%x       十六进制整数(a-f)
	%X       十六进制整数(A-F)
	%e       指数型浮点数(e)
	%E       指数型浮点数(E)
	%f,%F    浮点数(小数形式)
   	%g,%G    智能在指数和浮点数之间选择一个表示
	%%       等同于%

占位符和类型码之间的格式化语法：
	% [- + 0 宽度.精度] 类型码
	-   ：左对齐
	+   ：显示正号
	0   ：左侧空白位置补零
	宽度：整个字符串的字符个数
	精度：保留小数点后多少位(默认6位)
       pi=3.141592535897932
	   "-+%07.2f"  %  pi  --> -+0003.14     # "-+%07.2f"是一个字符串，左对齐(-)显示正号(+)左侧空白位置补零(0)宽度7(7)小数点2(2)

两种循环：
while 语句：根据一定条件，重复的执行一条语句或多条语句
    语法：
	while 真值表达式：            # bool(真值表达式)
        语句块1
    else：
        语句块2

while 语句的嵌套(语句是可以嵌套的)：while 语句本身是语句，和其他语句一样，可以嵌套到任何复合语句中

break语句：用于循环语句(while,for语句)中，用来终止当前循环语句的执行
语法：break
	1.break语句通常于if语句组合使用  2.终止循环时，else子句的语句将不会执行  3.break仅跳出当前循环

死循环：死循环是指条件一直成立的循环，通常用break语句来终止循环，死循环的else子句永远不会被执行




05： 列表 列表访问 列表常用方法 列表推导式

for 语句：用来遍历可迭代对象的数据元素，可迭代对象是指能依次获取数据元素的对象，遍历：经历且仅经历一次
可迭代对象包括：字符串str   列表list   元组tuple  range()返回结果...
语法：
	for 变量列表 in 可迭代对象:
		语句块1
	else:
		语句块2
		
range 函数 ：和for搭配的时候只被调用一次
    range(start, stop[,step]) 用来生产0~num区间内step步长的整数，不包含num
	用来创建一个生成一系列整数的可迭代对象(整数序列生成器)

for 嵌套：乘法的效果

continue 语句：用于循环语句(while,for)中，不再执行本次循环continue之后的语句，重新开始一次新的循环
	语法：continue
	1. 在while语句中执行continue，将会直接跳转到while语句的真值表达式处重新判断循环条件
	2.在for语句中执行continue语句，将会从可迭代对象中取下一个元素，绑定变量后再次进行循环

循环小结：四条语句：  while语句   for语句  break语句   continue语句


list：1.是一种容器  2.是可以被改变的序列  3.由一系列特定(不限类型)元素组成的，元素与元素之间可以没有任何关联关系，但有先后顺序关系    ---->  追加函数  运算

python3中的序列类型： 字符串str  列表list  元组tuple   字节串bytes   字节数组bytearray
创建列表的字面值表达式： 1. [x,y,...] #创建一个列表   2. L = [x,y,...] #变量L绑定一个新创建的列表
列表的构建函数list:
	1. list()  #生成一个空列表，等同于[]    2.list(iterable) #用可迭代对象创建一个列表
列表的运算：id(x)相同，即改变列表本身
	算术运算：+   +=   *   *=   #运算规则与字符串的运算规则相同
	语法：列表变量 += 可迭代对象
#列表是可变对象，+=是修改原来的对象；字符串是不可变对象，+=是创建新的对象，让变量绑定新的对象---> id(x)

列表的比较运算：
	运算符：<   <=   >   >=   ==   !=   #与字符串一样
列表是可迭代对象
    # a=input('请输入')
    # b=input('请输入')
    # c=input('请输入')
    # L=[]
    # 1.
    # L += a
    # L += b
    # L += c
    # 2.
    # L += [a]
    # L += [b]
    # L += [c]
    # 3.
    # L=[a,b,c]
    # print(L)

序列： 可运算(+   +=   *   *=)  比较(<   <=   >   >=   ==   !=)    in/not in  
		索引(列表[整数表达式])/切片(列表[(开始索引b):(结束索引e)(:(步长s))])   可迭代对象




06： 元组 元组常用方法

列表的索引赋值：列表是可变的，可以通过索引赋值改变列表中的元素    #L变量 ，L[n]变量存在L里面，并绑定对象
	语法：列表[整数表达式] = 表达式
	作用：改变列表中索引的绑定关系
	列表切片：列表[:] 或 列表[::]  列表的切片取值返回一个新的列表，规则等同于字符串
	列表的切片赋值：可改变原列表的数据排列，可以插入和修改数据，可以用切片改变列表的对应元素的值(索引可以越界)
		语法：列表[切片] = 可迭代对象
		    注意事项：对于步长不等于1的切片赋值，赋值运算符的右侧的可迭代对象提供的元素个数一定要等于切片切出的个数
		    L = [1, 2, 3, 4]
            print(L[1::2])
            L[1::2] = "ab"
            #L[1::2] = "abc"    这个会报错，左右个数不一致
            print(L) 
	del语句：用于删除列表的元素
		语法： 1. del 列表[索引]    2.del 列表[切片]
	python3中常用于序列的函数
		len(x)       #返回序列长度
		max(x)       #返回序列最大值元素
		min(x)       #返回序列最小值元素
		sum(x)       #返回序列所有元素的和(元素都是数址类型) 
		any(x)       #真值测试，其中一个值为真值则返回True
		all(x)       #真值测试，所有值为真值返回True
	python3常用方法：对象是存于内存的东西，但下面的obj指列表中的一个元素
	L.index(obj[,begin[,end]])      #返回第一个索引值
	L.insert(索引,值)               #插入值
	L.count(obj)                    #指定元素的个数
	L.remove(obj)                   #删除第一个obj
	L2=L.copy()                     #赋值列表，L2=L:绑定，不是拷贝，L与L2同时修改
	L.append()                      #追加元素
	L.extend(list)                  #追加列表
	L.clear()                       #清空，等同于L[:]=[]
	L.sort(reverse=False)           #排序，默认从小到大
	L.reverse()                     #反转
	L.pop([index])                  #删除索引对应的元素，默认删除最后一个，这个可以赋值别的变量
	
	深拷贝和浅拷贝
		浅拷贝shallow copy：在复制过程中，只复制一层变量，不会复制深层变量绑定的对象的复制过程
			L=[3.1, 3.2]  L1=[1,2,L]  L2=L1.copy()  #L2[2][0] (L2对3.1和3.2操作的时候)是对L的操作，不会对L进行复制
		深拷贝deep copy：复制对象及对象关联的对象一起复制过程叫深拷贝
		    import copy           #深拷贝模块导入
            L=[3.1, 3.2]
			L0=L                  #绑定
            L1=[1,2,L]
            # L2=L1.copy()        #浅拷贝
            L2=copy.deepcopy(L1)  #深拷贝
            print(L,L1,L2)
            L2[2][0]=3.14
            print(L,L1,L2)
	
	列表与字符串比较：1.都是序列，有先后顺序关系及相同的运算操作   2.字符串只能存字符串类型数据且不可变，列表可存任意类型数据且可变
	
	字符串的文本解析方法：转换列表或者字符间填充
	S.split(sep=None)   #将字符串，使用sep作用分隔符分割S字符串，返回分割后的字符串列表，默认是空白字符(\r \n \t 空格...)为分隔符
	S.join(iterable)    #用可迭代对象中的字符串，返回一个中间用S进行分隔的字符串 L[1,2,3]  '$'.join(L) 得到 1$2$3
	
	列表推导式list comprehension
	列表推导式是用可迭代对象创建列表的表达式
	作用：用简易方法生成列表
	语法： [表达式 for 变量 in 可迭代对象]  或者  [表达式 for 变量 in 可迭代对象 if 真值表达式]
	列表推导式的嵌套：[表达式 for 变量1 in 可迭代对象1 if 真值表达式1 for 变量2 in 可迭代对象2 if 真值表达式2 ...]      #先执行for，在执行表达式
		[ x + str(y) for x in 'ABC' for y in range(6) if y % 2 ==1 ]  #输出['A1', 'A3', 'A5', 'B1', 'B3', 'B5', 'C1', 'C3', 'C5']

	

07： 字典 字典常用方法

元组tuple：元组是不可改变的序列，可以存放任意类型的元素，一旦创建将无法改变
	表示方式：用小括号()括起来，单个元素括起来后加逗号(,)区分单个对象还是元组
	创建元组字面值表达式： t=()   t=2,  t=(2,)  t=(2,3)   t=2,3   #type(x)函数，可以返回对象x的类型，常用判断语句 if type(x) is int:
		错误示例： t=(2) #t绑定2这个对象，不是元组    x,y,z=1,2,3    x,y,z=(1,2,3)   x,y,z=[1,2,3]    x,y,z="ABC"  #x,y,z=序列赋值(分别赋值)
	元组的构造函数tuple： 1.tuple()    2.tuple(iterable) 用可迭代对象生成一个元组

元组运算： +   +=   *   *=                  #是可以运算的
元组的比较运算：<   <=   >   >=   ==   !=   #与字符串规则一样
元组的in / not in 运算符：用于判断元素是否存在于元组中
索引index：不支持索引赋值
切片slice：不支持切片赋值

元组方法：
	T.index(v[,begin[,end]])   #返回对应元素的索引下标
	T.count(x)                 #返回元组中对应的元素个数

reversed(iterable)         #反向输出


字典dict：1.字典是一种可变的容器，可以存储任意类型的数据   2.字典中的每个数据都是用‘键key’进行索引的，而不是索引下标  3.数据是无序的
		  4.以 键key-值value对形式进行映射存储(映射是变量的绑定)      5.键不能重复，且只能用不可变类型作为字典的键

字典的字面值表示方法：以{}括起来，以冒号(:)分隔键-值对，各键值对用逗号分隔开
	创建字典：d = {'k1': 'v1', 'k2':'v2', ... }    #K不能重复，且只能用不可变类型 ；v可以存储任意数据
字典的构造函数dict：1.dict()     2.dict(iterable)    3.dict(**kwatgs) #用关键字传参形式创建一个新的字典
	d1=dict((['name', 'lin'], 'ab'))   #iterable必须是成对序列
	print(d1)                          #输出结果{'name': 'lin', 'a': 'b'}
	d2=dict(name='lin', age=15)   #关键字传参
	print(d2)
	操作示例：
		test = {1:'a',2:'b'}
		for i in test:                       #遍历字典的键
			print('i =',i)
		for j,k in test.items():             #遍历字典的键值
			print('j = %s,k = %s' % (i,j))
		for m in test.values():              #遍历字典的值
			print('m =',m)
		for n in test.keys():                #遍历字典的键
			print('n =',n)
	
	
字典操作:统计及操作速度快
	字典的键索引：用[]运算符可以获取字典内'键'对应'值'
		语法：字典[键]  --->v(值)
	添加/修改字典的元素：不存在则创建并绑定，存在则修改绑定关系
		语法：字典[键] = 表达式
	删除：del 语句     语法：del 字典[键]
字典的in / not in 运算符：用来判断一个键是否存在字典中。示例：  'name(key)' in dict 
字典的迭代访问：字典是可迭代对象，字典只能对'键'进行访问	
    for k,v in d:
    	print(k,v)    #只能返回'键'
字典可用函数：
    len(x)  #返回字典的键值对个数
    max(x)  #返回键最大值
    min(x)  
    sum(x)  #键和
    any(x)
    all(x)
字典的方法：
    D.clear()               #清空
    D.pop(key)              #移除并返回value
    D.copy()                #浅拷贝
    D.update(D2)            #合并，若键冲突，以D2为准
    D.get(key, default)     #获取values，不存在返回default，默认是None
    D.keys()				#返回所有键
    D.values()				#返回所有值
    D.items()				#返回(k,v)
        d={1:'one', 2:'two',3:'three'}
        # for i in d.values():
        # for i in d.keys():
        for i,j in d.items():
        	print(i,j)

字典推导式：是用可迭代对象生成字典的表达式
	语法：{键表达式 ：值表达式 for 变量 in 可迭代对象 if 真值表达式}
字典推导式的嵌套等同于列表推导式的嵌套

字典vs列表：1.都是可变对象  2.列表用整数索引，字典用键索引   3.列表有序，字典无序    4.字典增删改查速度快于列表    
			#列表查找的时候，需要遍历。插入的时候为了保证有序，需要挪动数据     字典是按照一定算法存入的(反序：先确定位置再存入),，因此查找容易，并且是无序的，因此不存在挪动数据





08： 集合 集合推导式

集合set：1.集合是可变容器  2.集合内的数据对象都是唯一，不可重复的   3.集合是无序的存储结构，没有先后关系    4.集合内元素必须是不可变对象    5.集合是可迭代对象    6.集合是相当于只有键没有值的字典
创建空集合：set()     
创建非空的集合的字面值：s = {1, 2, 3}
集合的构造函数：set()（不能用{}来创建空集合）  或者 set(iterable)
	set({1:1, 2:2}.items())  -->  {(1, 1), (2, 2)}
	
不可变数据类型: bool  int  float  complex  str  tuple  frozenset  bytes
可变数据类型：list  dict  set  bytearray

集合的运算：
	交集&    并集|   补集-   对称补集^(补集的和)   子集<   超集>  
	==	  !=   集合相同/不同    s1 = {1, 2, 3} == s2 = {3, 2, 1}
	in / not in 

用于集合的函数
    len(x)
    max(x)
    min(x)
    sum(x)
    any(x)
    all(x)

集合是可迭代对象，可以用于for语句中

集合方法：
	s.add(e)
	s.remove(e)        #移除，不存在则报错keyerror
	s.discard(e)       #移除，不存在不报错
	s.clear()
	s.copy()           #浅拷贝
	s.pop()            #随机删除一个
	s.update(s2)       #s = s|s2  或 s |= s2
	s.difference(s2)

集合推导式：用于可迭代对象创建集合的表达式
	语法：{表达式 for 变量 in 可迭代对象 if 真值表达式}

固定集合 frozenset：固定集合可以作为字典的键，也可以作为集合的值
	固定集合是不可变的，无序的，含有唯一元素的集合

固定集合的构造函数：frozenset()   或者   frozenset(iterable)   #iterable为一个对象(列表/字典...)
固定集合的运算：& | - ^   in/not in  > >= < <= == !=
固定集合的方法：相当于集合的全部方法去掉修改集合的方法


函数function：可以重复执行的语句块，可以重复调用
	作用：1.用于封装语句块，提高代码的重用性    2.定义用户级别的函数
	def语句创建一个函数，并用函数名变量绑定这个函数
		语法：def 函数名(形参列表)：
			      语句块(代码块)
	语法说明：1.函数名是全局变量，用于绑定语句块
		2.函数有自己的名字空间，在函数外部不可以访问函数内部的变量，在函数内部可以访问函数外部的变量
		3.函数不需要传入参数时，形参列表可以为空
		4.语句部分不能为空，为空需要填充pass语句
	函数调用：函数名(实际调用传递参数)    #实际调用传递参数 称实参
		函数调用是一个表达式，如果函数内部没有return语句，则函数执行完毕后返回None对象
	def say_hello():                 #创建函数名变量
		print("hello world")         #语句块
		return 1
	say_hello()						 #函数调用，输出hello world，返回1，执行函数包含的所有语句，遇return中断返回
	v=say_hello()					 #输出hello world，返回1赋值给v，函数调用并创建变量v绑定函数调用后的return返回值
	print(v)						 #输出1(函数无return语句，输出None)

	return语句：用于函数中结束当前函数的执行(遇return结束函数调用并返回)，返回到调用该函数的地方，同时返回一个对象的引用关系
	语法：return [表达式]
	1.return不带表达式，默认返回None
	2.如果没有return语句，执行完最后语句后返回None


09： 函数 函数参数传递

 函数的参数传递：实参为函数外调用函数是添加的参数，形参为定义函数def是添加的参数，另外函数调用myfun(a=a) 第一个a是形参("a="有时候可以省略)，第二个是实参(实际对象或函数外变量)
 传递方式：将数据传给函数
		  函数的参数传递和返回值是根据功能而定的	
	位置传参：实际参数(实参)的对应关系与形式参数(形参)的对应关系是借位置来依次对应的
		说明：1.实际参数和形式参数通过位置进行传递和匹配  2.实际参数的个数必须与形式参数的个数相同
			示例：def myfun(a,b,c):
					  print(a,b,c)
				  myfun(1,2,3)
	序列传参:在函数调用过程中，用*将序列拆解后按位置进行传递的传参方式
			示例：def myfun(a,b,c):
					  print(a,b,c)
				  s1=[1,2,3]/{1,2,3}/(1,2,3)
				  myfun(*s1)
	关键字传参:传参时，按着形参的名称给形参赋值，实参和形参按名称进行匹配
			示例：def myfun(a,b,c):
					  print(a,b,c)
				  myfun(b=2,c=3,a=1)	
	字典关键字传参:实参为字典，将字典用**拆解后进行关键字传参的方式
		说明：1.字典的键名和形参名一致  2.字典的键名必须为字符串(且为标识符的命名方式)  3.字典的键名要在形参中存在
			示例：def myfun(a,b,c):
					  print(a,b,c)
				  d1={'c':300, 'b':200, 'a':100}
				  myfun(**d1)                           #输出100 200 300

 函数的综合传参：函数的传参方式，在能确定形参能唯一匹配到相应实参的情况下可以任意组合				
	1.函数的位置传参在前，要先于关键字传参在后   2.位置传参和序列传参，关键字和字典关键字传参可以混合使用并且顺序颠倒
		示例：def myfun(a,b,c):
				  print(a,b,c)
			  s1=[1,2]
			  myfun(*s1,3)

定义形参：
	函数的缺省参数
		语法：def 函数名(形参名1=默认实参1, 形参名2=默认实参2, ...):
				  语句块
		说明：缺省参数必须自右至左依次存在，如果一个参数有缺省参数，则其右侧的所有参数都必须有缺省参数，缺省参数可以有0个或多个，甚至全部都有缺省参数
函数形参的定义方式：接受调用者传递过来的数据
	位置形参：
		def 函数名(形参名1, 形参名2, ..)
			语句块
	星号元组形参：收集多余的位置传参，元组形参名一般命名为'args'
		def 函数名(*元组形参名)：
			语句块		
		def func(a, b, *args):     #可以结合使用
			print(a, b)            #ab实参必须有
			print(len(args), args)
			#return sum(args)      #args是可迭代对象
		#func()
		func(0, 1, 2, 3)           #args输出的是元组
	
		def mymax(a, *args):
        	if not args:
        		return max(a)
        	else:
        		return max(a, *args)
        print(mymax([6, 8, 3, 5]))
        print(mymax(1, 3, 5, 7))
	命名关键字形参:强制所有的参数都必须用关键字传参或字典关键字传参
		语法：
			def 函数名(*, 命名关键字形参)：
				语句块
			或者
			def 函数名(*.args, 命名关键字形参)：
				语句块
			def myfun(a, *, b, c):
				print(a, b,c)
			myfun(1, b=2, c=3)              #只能有三个实参，输出1 2 3
			
			def myfun2(a, *args, c, d):
				print(a, args, c, d)
			myfun2(1, 2, 3, c=5, d=6)        #输出1 (2, 3) 5 6
			myfun2(1, **{'d':4, 'c':3})      #输出1 () 3 4    ()是*args没参数返回的列表			
	双星字典形参：收集多余的关键字传参，字典形参一般命名为kwargs
		语法：
			def 函数名(**字典形参名):
				语句块
			def fun(**kwargs):
				print('num=', len(kwargs))
				print('kwargs=', kwargs)
			fun(name='lin', age=35, address='CN')      
			fun(a=1, b='b', c=[2,3], d=True)               #输出字典格式数据
	
	函数的参数说明：位置参数，缺省参数，星号元组形参，双星号字典形参等可以混合使用
	自左向右的顺序：1.位置形参   2.星号元组形参   3.命名关键字形参  4.双星号字典形参--->（a, *args, b, **kwargs）




010： 递归函数 作用域

全局变量和局部变量: 改变变量指的是id(x)改变，赋值语句才会改变变量，追加不会改变变量id(x)
	局部变量：定义在函数内部的变量称为局部变量(函数的形参也是局部变量)，局部变量只能在函数内部使用，局部变量在函数调用时才能被创建，在函数调用之后会自动销毁
	全局变量：定义在函数外部，模块内部的变量称为全局变量，全局变量所有函数都可以直接访问(但函数内部不能将其赋值)
		说明：在函数内部赋值语句不会对全局变量造成影响，即不能改变全局变量id(x)
globals()/locals函数
	globals()  返回当前全局作用域内变量的字典
	locals()   返回当前局部作用内变量的字典 
	    a=1
		c=3
		def fn(c,d):
			e=300
			print('locals() 返回：', locals())                 #c,d,e为局部变量
			print('globals() 返回：', globals())          	   #a，c，fn为全局变量
			print(c,globals()['c'])
		fn(100,200)
		
函数变量：函数名是变量，他在创建函数是绑定一个函数
        def fn():                                  #def创建一个函数对象，然后用fn这个变量绑定函数对象
        	print("hello world")
        f1=fn                                      #f1绑定fn，即f1=fn,f1()=fn()
        print(f1,fn)                               #返回函数变量内存地址<function f1 at 0x00CB07C8>
        print(f1())                                #执行函数语句块并返回None
		 
一个函数可以作为另一个函数的实参传递
		def myinput(fn):
		 L = [1, 3, 5]
		 return fn(L)
		print(myinput(max))

函数可以返回另一个函数
		def get_num():
			return max
		L=[1, 3, 5, 7]
		f=get_num()                        #函数调用，返回max函数，即f=max函数
		print(f(L))                        #
函数嵌套定义：函数嵌套定义是指一个函数里用def语句来创建另一个函数的情况

python3的四个作用域：作用域也叫名字空间，是访问变量时查找变量名的范围空间
	1.局部作用域(函数内)Local(function)
	2.外部嵌套函数作用域Enclosing function locals
	3.函数定义所在模块作用域Global(module)
	4.python内置模块的作用域Builtin(python)
	查找规则：	   L > E > G > B
	默认情况下，变量名赋值会再当前作用域内创建变量和修改变量

global语句：告诉解释执行器，global语句声明的一个或多个变量，这些变量的作用域为模块级的作用域，也称为全局作用域
			全局声明global将赋值变量映射到模块文件内部的作用域，形参变量不能使用global全局声明
			语法：global 变量名1， 变量名2，...
nonlocal语句：声明变量是外部嵌套函数内(最近一层)的变量，形参变量不能使用nonlocal声明
			语法：nonlocal 变量名1， 变量名2，...

lambda 表达式：创建一个匿名函数对象，同def雷士，但不提供函数名
	语法：lambda [形参名1, 形参名2, ...]: 表达式        #[形参列表]内的内容可省略
		myadd = lambda x, y: x + y       #创建一个匿名函数赋值给变量myadd(可以这样理解，myadd是函数名，x,y是形参 ，x+y为return表达式)
	说明：1.是表达式，被调用时，返回表达式的结果的引用  2.创建的函数只能包含一条表达式   3.简单可随时创建和销毁，有利于减少程序的耦合度

eval()函数：把一个字符串当成一个表达式来执行，返回表达式执行后的结果
	格式：eval(source, globals=None, locals=None)
		s='1+2+3'  eval(s)     #输出6
exec()函数：把一个字符串当成程序来执行
	格式：eval(source, globals=None, locals=None)
	从网上下载一个字符串(程序组成)，exec(s)就能使之执行
	






































