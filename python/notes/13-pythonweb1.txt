

01： Flask 框架 开发环境建立 模板 

1.基本知识点
	1.静态网页和动态网页
		1.静态网页：不与服务器动态交互的网页
		2.动态网页：允许与服务器做动态交互的
		
	2.服务器：给用户提供服务的机器称为服务器
	
	3.web服务器
		作用：
			1.存储web上的信息
			2.能够接受用户的请求(request)并给出响应(response)
			3.执行服务器端程序
			4.具备一定的安全功能
			
	4.框架	
		框架是一个为了解决开放性问题而存在一种程序结构，框架本身提供了一些最基本的功能。
		
	5.python web框架
		1.Flask       轻量级
		2.Webpy		  轻量级
		3.Tornado	  异步框架
		4.Django	  重量级框架
		
	6.框架模式
		1.MTV
			Models	   	 模型层，主要负责数据库建模
			Templates	 模板层，用于处理用户的显示内容，如html
			Views 		 视图，处理与用户打交道的内容(请求和响应)
		2.MVC
			Models  	 模型层，主要负责数据库建模
			Views   	 视图，处理用户的显示内容
			Controller   控制器，用户与用户交互的部分内容(请求和响应)
	7.Flask是一个基于Python并且依赖于Jinja2模板引擎和Werkzeug WSGI服务的一个微型框架
		WSGI：Web Server Gateway Interface(web服务器服务网关接口)
		Flask是采用MTV的框架模式
	
2.安装Flask
	1.查看已安装的Flask版本
		1.安装Flask
			pip3 install flask
		2.import flask
			flask.__version__
	2.Flask - 路由(route)
		1.客户端发送请求给web服务器，web服务器再将请求发给Flask程序实例
			程序实例需要知道每个url请求所对应的运行代码是谁。所以程序中必须创建一个url请求地址，到python运行函数的一个映射，处理url和函数之间的关系的程序就是路由
		2.路由表示
			@app.route('/')
		3.带参数的路由
			路由中可以携带参数表示不同数据
			1.基本带参路由
				@app.route('/show/<name>')
				def show(name):
					return 'xxx'
			2.带多个参数的路由
				@app.route('/show/<name>/<age>')
				def show(name,age):
					return 'xxx'
			3.指定参数类型的路由
				@app.route('/show/<name>/<int:age>')
				def show(name,age)
				
				Flask中所支持的类型转换器
					类型转换器		作用
					缺省			字符串，不能有斜杆('/')
					int:			整型
					float:			浮点型
					path:			字符串,可以有斜杠
					
			4.多url的路由匹配
				@app.route('地址1')
				@app.route('地址2')
				...
				def show(name,age):
			
			5.路由中设置HTTP请求方法
				Flask路由也允许设置对应的请求方法(post/get),只有将匹配上请求方法的路径才能交给对应的视图处理函数去处理，所有的路由，默认只接受get请求
				@app.route('/',methods=['get','post'])
			6.url的反向解析
				正向解析：程序自动解析，根据@app.route()中的访问路径，来匹配处理函数
				反向解析：通过视图处理的函数的名称自动生成对应的访问路径
				在Flask中实现反向解析:
					url_for(funName,args)
						funName:要生成地址的函数名
						args:该地址中需要的函数
		

		
		
		

02： WEB 表单 数据库 


Templates模板：相应的网页
	1.
		在模板中，允许包含"占位变量"来表示动态的内容
		模板最终也会被解析成字符串再响应给客户端，这一过程通常称为"渲染"
		Flask中的模板是依赖Jinja2的模板系统
	2.模板的设置
		默认情况下，Flask会在程序文件夹中的templates(根目录下)的子文件夹中搜索模板
		默认情况下，需要手动创建templates文件夹
	3.模板的渲染
		作用：在视图中，将模板文件(xx.html)渲染成字符串之后，再响应给客户端浏览器
		函数：render_template('xx.html')
	4.模板中的语法
		1.变量
			变量是一种特殊的占位符，告诉模板引擎该位置的值是从渲染模板时的数据中获取出来的
			在视图中
			@app.route('/')
			def index():
				return render_template('xxx.html',变量1=值1,...)
			在模板中：
			{{变量名}}
			变量类型：字符串，数字，列表，元组，字典...
			引用: 
				列表：list.0/list.[0]   
				元组：tup[1]/tip.1  
				字典：dic['name']/dic.name
				person对象的name属性：
					<h1>person.name:{{params.person.name}}</h1>
				person对象的方法：
					<h1>person.say:{{params.person.say()}}</h1>
		2.过滤器
			过滤器是允许在变量输出前改变变量的值
			语法：
				{{变量|过滤器}}
			Jinja2 模板中常见的过滤器：
				过滤器名                说明
				capitalize				首字符大写，其它小写
				lower					将值转换成小写
				upper					将值转换成大写
				title					将值中的每个单词首字符变成大写
				trim					去掉值两边的空格
		3.标签
			每个标签指的是不同的服务器端的功能
			模板：
			常用标签{% %}
				1.if 标签
					{% if 条件 %}
						执行语句
					{% elif 条件 %}
						执行语句
					{% else %}
						执行语句
					{% endif %}
						执行语句
				2.for 标签
					{% for 变量 in 元组/列表/字典 %}
					{% endfor %}
					
					在Jinja2模板的循环中，支持内部变量-loop
					loop作用：记载但钱循环中的一些相关信息
					loop常用属性：
						1.index
							用法：loop.index
							作用：记录当前循环的次数，从1开始记录
						2.index0
							用法：loop.index0
							作用：记录当前循环的次数，从0开始记录
						3.first
							用法：loop.first
							作用：值为True，则表示当前循环时第一次循环
						4.last
							用法：loop.last
							作用：值为True，则表示当前循环时最后一次循环
				3.macro标签(宏)
					1.作用：相当于是在模板中声明函数
					2.语法：
						{% macro 名称(参数列表) %}
							语句
						{% endmacro%}
					3.在独立的文件中声明宏
						1.创建macro.html 模板文件
							定义项目中要用到的所有的宏
						2.导入macro.html
							{% import 'macro.html' as macros %}
				4.include标签
					将其它的模板文件包含到当前的模板文件中,在哪里导入，在哪里执行
					语法：{% include 'xxx.html' %}
	5.动态文件处理
		1.在Flask中不能与服务器动态交互的文件都是静态文件
		2.静态文件的处理(js/css/images)
			1.所有的静态文件必须放在名为static的目录中
				static目录要放在项目的根目录处
			2.所有的静态文件必须通过/static/路径访问
	





03： 项目结构 用户管理 分页 

1.静态文件地址的反向解析
	url_for('static',filename='<file_path>')   -->  浏览器访问/static/<file_path>
2.模板的继承
	一个模板中出现的内容来自于另一个模板，那么可以使用继承的方式简化开发
	语法：
		1.父模板：
			需要定义出哪些东西在子模版中是可以被重写的
				{% block 块名 %}
					父模板中正常显示的内容
				{% endblock %}
			block:
				1.在父模板中是可以正常显示的，没有任何影响
				2.在子模板中是可以被重写的
		2.子模版
			1.指定继承自那个父模板
				{% extends '父模板名称' %}
			2.重写父模板中对应的内容
				{% block 块名 %}
					1.子模版覆盖
						覆盖父模板block内容
					2.允许通过{{ super () }}来调用父模板中的内容
						{{ super() }}    #调用父模板所有内容
						追加内容
				{% endblock %}
			

修改配置
	app=Flask(__name__,template_folder='muban',static_url_path='/s',static_folder='/sta')
	app.run(debug=True,port=5555,host='0.0.0.0')

请求(request)和响应(response)
	1.HTTP协议
		Request Headers - 请求消息头
		Response Headers - 响应消息头
	2.请求对象 - request
		request - 请求对象，封装了所有与请求相关的信息。
			如：请求数据，请求消息头，请求路径，...
		在Flask中，要使用request的话，必须先导入
			from flask import request
		1.request的常用成员
			1.scheme：获取请求方案(协议)
			2.method: 获取本次请求的请求方式
			3.args:	获取使用get请求方式提交的数据
			4.form: 获取使用post请求方式提交的数据
			5.cookies: 获取cookies的相关信息
			6.headers: 获取请求信息头的相关信息
			7.files: 获取上传的文件
			8.path:	获取请求的url地址(进入到主机后的请求资源地址，不包含请求参数)
			9.full_path: 获取请求的url地址(进入到主机后的请求资源地址，会包含请求参数, url？之后是参数，参数之间用&分隔开)
			10.url: 获取完整的请求地址，从协议开始的地址
		2.获取请求提交的数据
			1.get请求方式提交数据，地址栏所有请求都是get，该方式提交的数据会拼接在url栏中
				1.表单允许实现get请求
					<form action="" method="get">
						name:<input name="uname">
					</form>
					输出结果：https://www.baidu.com   /s         ?          ie=utf-8   &       f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=席欣悦
					           协议     主机       访问路径  后面拼接参数   参数    参数分割符 第二个参数
				2.在请求地址后拼请求的参数					
					获取get请求方式提交的数据：
					request.args封装的是get请求的数据
			2.post请求方式
				post请求只有在表单中才能够被触发
					<form method="post">
				获取post请求提交的数据：
					request.form封装的就是post请求的数据，类型为字典
						request.form['name']
						request.form.get('name','')
						request.form.getlist('name'):获取name数据列表，如多选框





04： 国际化与本地化、测试、项目部署 测试 项目部署


	3.响应(response)
		响应是由服务器端带给客户端的内容，对应着请求
		响应可以是普通字符串，模板或重定向
			return "普通字符串"
			return render_template('xxx.html')
		响应对象：
			将响应的内容封装到一个对象中，可以完成更多的响应的行为(如：增加cookies,...)
			在flask中，使用make_response()构建响应对象
				from flask import make_response
				@app.route('/')
				def xxx():
					resp = make_response('响应内容')   #允许实现其它的响应行为,如render_template('xx.html')或者cookies
					return resp
			重定向：
				由服务器端通知客户端向一个新的地址放松请求（客户端多次请求）
				语法：	
					from flask import redirect		
					1.return redirect('重定向地址')
					2. resp = redirect('重定向地址') #借助resp实现其它的响应行为
						return resp
	4.文件上传	
		1.表单有文件上传
			1.提交方式method必须为post
			2.表单的enctype属性的值，必须为multipart/form-data（分块上传）
		2.服务器端获取
			1.通过request.files  获取上传文件(缓存区)
				request.files['文本框的name值']
			2.通过f.save(保存路径)将文件保存至指定目录处
				1.通过f.filename 获取文件的名称
					f.save('/static'+f.filename)
				2.获取项目的绝对路径
					basedir = os.path.dirname(__file__)
				3.通过时间字符串代替文件名称
					1.获取当前的时间字符串
						ftime = datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
					2.获取文件拓展名
						ext = f.filename.split('.')[1]
					3.拼完整的上传路径
						upload_path = os.path.join(basedir,'static/upload',ftime)

	5.Models
		1.模型：
			根据数据库中表的结构而创建出来的class。
			每一张表对应到编程语言中，就是一个class
			表中的每一个列对应的编程语言中就是class的一个属性
		2.模型的框架 - ORM(object relational mapping)
			表的关系：1对1 ，1对多 ，多对多
			三大特征：
				数据表(table)到编程类(class)的映射，数据库中的每一张表对应到编程语言中，都有一个类
					在ORM中：
						允许将数据表自动生成一个类
						允许将类自动生成一张数据表
				2.数据类型的映射
					将数据库表中的字段以及数据类型对应到编程语言中类的属性
					在ORM中：
						允许将表中的字段和数据类型自动映射到编程语言中
						也允许将类中的属性和数据类型也自动映射到表中
				3.关系映射：
					将数据库中的表与表之间的关系对应到编程语言中类与类之间的关系
						1.一对一：外键，主键，唯一约束
							A表中的一条数据只能与B表中的另一条数据相关联
						2.一对多：外键，主键
							A表中的一条数据可以与B表中的任意多条数据相关联
							反之，B表中的一条数据只能与A表中的一条数据相关联
						3.多对多：通过第三张关联表去关联两张表
							A表中的一条数据可以与B表中的任意多条数据相关联，
							B表中的一条数据也可以与A表中的任意多条数据相关联
		3.ORM优点：
			1.封装了数据库所有的操作，大大提高了开发效率
			2.可以省略庞大的数据访问层，即便不用SQL编码也能完成对数据的CRUD的操作
	6.Flask中的ORM框架
		1.数据库和框架配置
			在Python和Flask中，使用ORM的框架是 - SQLAlchemy
			在Flask中想使用SQLALchemy的话，需要进行安装：
				pip3 install sqlalchemy  flask-sqlalchemy
		2.创建数据库
			create database flask default charset utf8 collate utf8_general_ci;
	7.定义模型
		模型：数据库中的表在编程语言中的体现，其本质就是一个python类(模型类或实体类)
		实体(数据库数据)完整性：表中的实体不能完全重复 - 主键：从语法上是可以改的，但不推荐改(AUTO_INCREMENT)
		语法：
			class modelname(db.Model):                  #定义模型类的名称，根据表名设定
			__tablename__="tablename"                   #映射到数据库中表的名称
			column_name=db.Column(db.type,option)       #定义列名，type：映射到列的数据类型，option：列选项
				
			db.type列类型：
				类型名          python类型           说明
				Integer         int					 普通整数，32位
				SmallInterger   int                  小范围整数，16位
				BigInteger	    int/long             不限精度整数
				Float           float                浮点数
				Numeric         decimal.Decimal      定点数
				String          str                  变长字符串
				Text            str                  变长字符串,优化
				Unicode         unicode              变长Unicode字符串
				Boolean         bool                 布尔值
				Date			datetime.date		 日期
				Time			datetime.time		 时间
				DateTime		datetime.datetime    日期和时间

			option列选项：
			选项名           	说明
			primary_key			如果设置为True表示该列为主键
			unique				如果设置为True表示该列值唯一
			index				如果设置为True表示该列要创建索引
			nullable			如果设置为True表示该列允许为空
			default				如果设置为True表示该列默认值
	
	8.数据库操作
		1.插入
			1.创建实体对象
			2.完成插入				
				user = Users(字段值1,...)		#创建Users对象并赋值				
				db.session.add(实体对象)		#将对象通过该方法插入到数据库				
				db.session.commit()				#提交插入操作
		2.删除已创建的表结构
			db.drop_all()
		3.数据库查询
			1.基于db.session进行查询
				1.db.session.query()
					该函数会返回一个query对象，类型位BaseQuery，对象中包含了实体类对应的表中的所有数据
					可以接收一/多个参数，参数表示要查询的实体对象是谁(Users/Users,Course/Users.username,Users.email)
				2.查询执行函数
					目的：在query()的基础上得到最终想要的结果
					语法：db.session.query(...)查询执行函数()
					函数              说明
					all()			  以列表形式返回query()中所有查询函数结果(需要重写__repr__方法)
					first()           只返回查询结果中的第一条结果，不存在返回null
					first_or_404()    返回查询结果中的第一条结果，不存在终止当前请求并返回404
					count()           返回查询结果的数量
				3.查询过滤器函数
					作用：在查询的基础上，筛选部分行数据
					语法：db.session.query(...)过滤器函数(),查询执行函数()
					过滤器函数 			说明
					filter()			按指定条件进行过滤(多表，单表，定值，不定值)
					filter_by()			按等值条件过滤时使用
					limit()				按限制行数获取
					order_by()			根据指定条件进行排序
					group_by()          根据指定条件进行分组
					过滤器函数详解：
						1.filter()
							注意：条件必须由模型类，属性构成
							1.查询年龄大于30的Users的信息
								db.session.query(Users).filter(Users.age>30).all()
							2.查询年龄大于30并且id大于1的Users的信息(and)
								db.session.query(Users).filter(Users.age>30,Users.id>1).all()
							3.查询年龄大于30或者id大于1的Users的信息(or_())
								db.session.query(Users).filter(or_(Users.age>30,Users.id>1)).all()
							4.查询id为2的Users的信息
								db.session.query(Users).filter(Users.id==2).all()
							5.查询email中包含'w'的Users的信息 --模糊查询
								模糊查询like需要使用实体类中属性提供的like()
								db.session.query(Users).filter(Users.email.like('w%')).all()
							6.查询id在[2,3]之间的Users的信息
								模糊查询in需要使用实体类中属性提供的in_([])
								db.session.query(Users).filter(Users.id.in_([2,3])).all()
						2.聚合函数
							db.session.query(func.聚合函数('列名').label('别名')).all()
		
			2.基于Models类进行查询(单表查询)
				Models.query.查询过滤器函数(条件参数).查询执行函数()
					user = Users.query.filter(Users.id==1).first()
					user = Users.query.filter_by(id=3).first()
				删除：
					1.查询出要删除的实体对象
						u=db.session.query(Models).filter_by(xxx).first()
					2.根据提供的删除方法进行删除
						db.session.delete(u)
从业务逻辑上来说，永久性数据(用户)的删除并非永久删除，而是添加了一个权限判断字段(bool类型)。临时性数据可以真正删除
					3.修改
						1.查：
						2.改：
						3.保存：

	关系映射：关联属性以及反向引用关系并非添加字段，而是执行的时候会创建的属性
		一对多
			语法：
				1.在"多"的实体中，增加一个列，引用自"一"表的主键列
					外键别名 = db.Column(db.Integer,db.ForeignKey('主表.主键'))
				2.在"一"的实体中，增加关联属性以及反向引用关系
					关联属性：在"一"的对象中，通过一个属性能够得到对应的所有"多"
					反向引用：在"多"的对象中，通过一个属性能够得到对应的"一"
						属性名=db.relationship('多表实体类名',关系选项)
							关系选项：							
								选项名：		说明：		
								backref			在关系的另一个模型中添加的反向引用属性名			
								lazy			指定如何加载当前的相关记录
													值：select(首次访问时加载记录)immediate(源对象加载中马上加载相关记录)subquery:利用子查询方式加载记录(效果同immediate，量多情况用)noload:永不加载记录 dynamic:默认不加载记录，但是会提供加载记录的查询
								userlist		如果设置False，表示不使用列表表示关联数据，而使用标量(变量)(一对一时候用)
								secondary		指定多对多关系映射中的关联表的名字

		一对一：
			1.在任意一张表中增加
				外键列名 = db.Column(db.Integer,db.ForeignKey('主键表.主键列'))
			2.在另外一个类中增加关联属性和反向引用关系属性
				属性 = db.relationship('关联的实体类',backref='反向引用属性',userlist=False)

		多对多：
			实现：
				在数据库中使用第三张表(关联表)
				1.创建第三张表
					student_course=db.Table(
						'关联表名',
						db.Column(id,db.Integer,primary_key=True),
						db.Column('外键列名',db.Type,db.ForeignKey('主表.主键')),
						db.Column('外键列名',db.Type,db.ForeignKey('主表.主键'))
					)
				2.关联属性和反向引用关系
					在任意一个实体中：
						关联属性名=db.relationship(
							'关联的实体类',
							secondary='关联的第三张表名',
							lazy='dynamic'
							backref=db.backref(
								'反向引用属性名',
								lazy='dynamic'
								)
							)
			  

cookies / cookie
	1.一种数据存储手段
		将一段文本保存在客户端(浏览器)的一种手段，并可以长时间保存
	2.cookies的使用场合
		1.记住密码
		2.记住搜索关键词
	3.Flask中使用cookies
		1.使用响应对象，将数据保存仅cookies(客户端)
			1.resp = make_response("字符串"|render_template())
			2.resp = redirect('地址')
		2.cookies的语法
			1.响应对象.set_cookie(key,value,max_age)
				key:保存的cookies的名称
				value:保存的cookie的值
				max_age:保存时间，取值为整数/算术表达式，默认单位s(秒)
			2.获取cookie的值
				每次相服务器发送请求时，都会把cookie中的数据封装到request中并带到服务器上
				在flask中通过request.cookies获取所有的cookies值
			3.删除cookie的值
				响应对象.delete_cookie('key')
		3.session - 会话
			1.session是保存在服务器上，为每个浏览器所开辟的一段空间(sessionID,会保存在浏览器cookie上，关闭会销毁sessionID)
			2.session在flask中的实现
				1.配置SECRET_KEY
					app.config['SECRET_KEY'] = "随机字符串"
				2.使用session
					from flask import session
					1.向session中保存数据
						session['key']=value
					2.
						value=session['key']
						value=session.get('key','')
					3.从session中删除书库
						del session['key']
					












